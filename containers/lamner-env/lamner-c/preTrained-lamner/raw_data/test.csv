code,summary
"public XmlWrapperSerializer createSerializer(File file, JsonEncoding encoding) {
        try {
        	
        	XMLSerializer xmlStreamWriter=new XMLSerializer(new FileWriter(file));
			return new XmlWrapperSerializer(xmlStreamWriter);
		} catch (Exception e) {
			e.printStackTrace();
			throw new KriptonRuntimeException(e);
		}
	}",Create a serializer for the given file.
"@Override
    public BlogResource newResource(final String name, final String contentType, final byte[] bytes) throws BlogClientException {
        if (resourcesCollection == null) {
            throw new BlogClientException(""No resource collection"");
        }
        return resourcesCollection.newResource(name, contentType, bytes);
    }",Create a new resource.
"@Override
    public ListChangeSetsResult listChangeSets(ListChangeSetsRequest request) {
        request = beforeClientExecution(request);
        return executeListChangeSets(request);
    }",Returns a list of ChangeSets that are contained in a CA.
"public void setType(int type) {
        this.type = type;
        if (level == LEVEL_UNDEFINED) {
            switch (type) {
                case TYPE_INT:
                case TYPE_LONG:
                case TYPE_DOUBLE:
                    level = LEVEL_LOW;
                    break;
                case TYPE_STAT:
                    level = LEVEL_MEDIUM;
                    unit = ""unit.ms"";
                    break;
                case TYPE_LOAD:
                    level = LEVEL_HIGH;
                    break;
                case TYPE_SUBMODULE:
                    level = LEVEL_MAX;
                    break;
                default:
                    break;
            }
        }
    }",Sets the type of the class.
"public ReadyState getReadyState() {
        if (stream == null) {
            return EventSource.ReadyState.CONNECTING;
        }
        else {
            switch (stream.getReadyState()) {
            case CONNECTING:
                return EventSource.ReadyState.CONNECTING;
                
            case OPEN:
                return EventSource.ReadyState.OPEN;

            case CLOSING:
            case CLOSED:
            default:
                return EventSource.ReadyState.CLOSED;
            }
        }        
    }",Gets the ReadyState of the EventSource.
"private RouteDoc extractDocInfo(RouteMeta routeMeta) {
        RouteDoc routeDoc = new RouteDoc();
        routeDoc.setGroup(routeMeta.getGroup());
        routeDoc.setPath(routeMeta.getPath());
        routeDoc.setDescription(routeMeta.getName());
        routeDoc.setType(routeMeta.getType().name().toLowerCase());
        routeDoc.setMark(routeMeta.getExtra());

        return routeDoc;
    }",Extract doc info from RouteMeta
"@Override
    public GetAccountPasswordPolicyResult getAccountPasswordPolicy(GetAccountPasswordPolicyRequest request) {
        request = beforeClientExecution(request);
        return executeGetAccountPasswordPolicy(request);
    }",Retrieves the password policy for an account.
"@Programmatic
    public DocumentType create(
            final String reference,
            final String name) {
        final DocumentType documentType = new DocumentType(reference, name);
        repositoryService.persistAndFlush(documentType);
        return documentType;
    }",Create a new document type.
"public static TApplicationException read(TProtocol iprot) throws TException {
        TField field;
        iprot.readStructBegin();

        String message = null;
        int type = TApplicationException.UNKNOWN;

        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1:
                    if (field.type == TType.STRING) {
                        message = iprot.readString();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2:
                    if (field.type == TType.I32) {
                        type = iprot.readI32();
                    } else {
                        TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    TProtocolUtil.skip(iprot, field.type);
                    break;
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        return new TApplicationException(type, message);
    }",read a TApplicationException object from the TProtocol.
"static boolean isCharsetSupported() throws IOException {
    try {
      ZipFile.class.getConstructor(new Class[] { File.class, Charset.class });
      return true;
    }
    catch (NoSuchMethodException e) {
      return false;
    }
  }",Check if the charset is supported by the ZipFile.
"private void mapPrimitiveOrEnumToVertex(ITypedInstance typedInstance, AtlasVertex instanceVertex,
                                            AttributeInfo attributeInfo) throws AtlasException {
        Object attrValue = typedInstance.get(attributeInfo.name);

        final String vertexPropertyName = GraphHelper.getQualifiedFieldName(typedInstance, attributeInfo);
        Object propertyValue = null;

        if (attrValue == null) {
            propertyValue = null;
        } else if (attributeInfo.dataType() == DataTypes.STRING_TYPE) {
            propertyValue = typedInstance.getString(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.SHORT_TYPE) {
            propertyValue = typedInstance.getShort(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.INT_TYPE) {
            propertyValue = typedInstance.getInt(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.BIGINTEGER_TYPE) {
            propertyValue = typedInstance.getBigInt(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.BOOLEAN_TYPE) {
            propertyValue = typedInstance.getBoolean(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.BYTE_TYPE) {
            propertyValue = typedInstance.getByte(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.LONG_TYPE) {
            propertyValue = typedInstance.getLong(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.FLOAT_TYPE) {
            propertyValue = typedInstance.getFloat(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.DOUBLE_TYPE) {
            propertyValue = typedInstance.getDouble(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.BIGDECIMAL_TYPE) {
            propertyValue = typedInstance.getBigDecimal(attributeInfo.name);
        } else if (attributeInfo.dataType() == DataTypes.DATE_TYPE) {
            final Date dateVal = typedInstance.getDate(attributeInfo.name);
            //Convert Property value to Long  while persisting
            if (dateVal != null) {
                propertyValue = dateVal.getTime();
            }
        } else if (attributeInfo.dataType().getTypeCategory() == TypeCategory.ENUM) {
            if (attrValue != null) {
                propertyValue = ((EnumValue) attrValue).value;
            }
        }

        GraphHelper.setProperty(instanceVertex, vertexPropertyName, propertyValue);
    }",Map primitiveOrEnum to vertex.
"public static List<PersistenceUnitMetadata> findPersistenceUnits(final URL url, final String[] persistenceUnits,
            PersistenceUnitTransactionType defaultTransactionType) throws InvalidConfigurationException
    {
        Document doc;
        try
        {
            doc = getDocument(url);
        }
        catch (InvalidConfigurationException e)
        {
            throw e;
        }
        doc.getXmlVersion();
        Element top = doc.getDocumentElement();

        String versionName = top.getAttribute(""version"");

        NodeList children = top.getChildNodes();
        ArrayList<PersistenceUnitMetadata> units = new ArrayList<PersistenceUnitMetadata>();

        // parse for persistenceUnitRootInfoURL.
        for (int i = 0; i < children.getLength(); i++)
        {
            if (children.item(i).getNodeType() == Node.ELEMENT_NODE)
            {
                Element element = (Element) children.item(i);
                String tag = element.getTagName();
                // look for ""persistence-unit"" element
                if (tag.equals(""persistence-unit""))
                {
                    PersistenceUnitMetadata metadata = parsePersistenceUnit(url, persistenceUnits, element, versionName);
                    if (metadata != null)
                    {
                        units.add(metadata);
                    }
                }
            }
        }
        return units;
    }",Returns a list of persistence unit metadata from the URL.
"public void setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime, boolean after)
    {
        if (after) {
            setEndRule(endMonth, endDay, -endDayOfWeek, endTime);
        } else {
            setEndRule(endMonth, -endDay, -endDayOfWeek, endTime);
        }
    }",Set the EndRule attribute of the CrazDa disposition.
"public void setHsmsPendingDeletion(java.util.Collection<String> hsmsPendingDeletion) {
        if (hsmsPendingDeletion == null) {
            this.hsmsPendingDeletion = null;
            return;
        }

        this.hsmsPendingDeletion = new com.amazonaws.internal.SdkInternalList<String>(hsmsPendingDeletion);
    }",Sets the value of the hsmsPendingDeletion property.
"static ClassifiedTBox classify(OntologyImpl.UnclassifiedOntologyTBox onto) {

		DefaultDirectedGraph<ObjectPropertyExpression, DefaultEdge> objectPropertyGraph =
				getObjectPropertyGraph(onto);
		EquivalencesDAGImpl<ObjectPropertyExpression> objectPropertyDAG =
				EquivalencesDAGImpl.getEquivalencesDAG(objectPropertyGraph);

		DefaultDirectedGraph<DataPropertyExpression, DefaultEdge> dataPropertyGraph =
				getDataPropertyGraph(onto);
		EquivalencesDAGImpl<DataPropertyExpression> dataPropertyDAG =
				EquivalencesDAGImpl.getEquivalencesDAG(dataPropertyGraph);

		EquivalencesDAGImpl<ClassExpression> classDAG =
				EquivalencesDAGImpl.getEquivalencesDAG(getClassGraph(onto, objectPropertyGraph, dataPropertyGraph));

		EquivalencesDAGImpl<DataRangeExpression> dataRangeDAG =
				EquivalencesDAGImpl.getEquivalencesDAG(getDataRangeGraph(onto, dataPropertyGraph));

		chooseObjectPropertyRepresentatives(objectPropertyDAG);
		chooseDataPropertyRepresentatives(dataPropertyDAG);
		chooseClassRepresentatives(classDAG, objectPropertyDAG, dataPropertyDAG);
		chooseDataRangeRepresentatives(dataRangeDAG, dataPropertyDAG);

		ClassifiedTBoxImpl r = new ClassifiedTBoxImpl(
                onto.classes(),
                onto.objectProperties(),
                onto.dataProperties(),
                onto.annotationProperties(),
                classDAG,
                objectPropertyDAG,
                dataPropertyDAG,
                dataRangeDAG,
                onto.getDisjointClassesAxioms(),
                onto.getDisjointObjectPropertiesAxioms(),
                onto.getDisjointDataPropertiesAxioms(),
                onto.getReflexiveObjectPropertyAxioms(),
                onto.getIrreflexiveObjectPropertyAxioms(),
                onto.getFunctionalObjectProperties(),
                onto.getFunctionalDataProperties());
//		if (equivalenceReduced) {
//			r = getEquivalenceSimplifiedReasoner(r);
//		}
		return r;
	}",Classify an ontology.
"public List<String> collect(@NonNull HString hString) {
      return stream(hString).collect(Collectors.toList());
   }",Collect a list of HString
"@Override
    public void elemAdd(MVec addend) {
        if (addend instanceof Tensor) {
            elemAdd((Tensor)addend);
        } else {
            throw new IllegalArgumentException(""Addend must be of type "" + this.getClass());
        }
    }",Add a vector to the Sequence.
"public void processAnonymousField(Properties attributes) throws XDocletException
    {
        if (!attributes.containsKey(ATTRIBUTE_NAME))
        {
            throw new XDocletException(Translator.getString(XDocletModulesOjbMessages.class,
                                       XDocletModulesOjbMessages.PARAMETER_IS_REQUIRED,
                                       new String[]{ATTRIBUTE_NAME}));
        }

        String             name     = attributes.getProperty(ATTRIBUTE_NAME);
        FieldDescriptorDef fieldDef = _curClassDef.getField(name);
        String             attrName;

        if (fieldDef == null)
        {
            fieldDef = new FieldDescriptorDef(name);
            _curClassDef.addField(fieldDef);
        }
        fieldDef.setAnonymous();
        LogHelper.debug(false, OjbTagsHandler.class, ""processAnonymousField"", ""  Processing anonymous field ""+fieldDef.getName());

        attributes.remove(ATTRIBUTE_NAME);
        for (Enumeration attrNames = attributes.propertyNames(); attrNames.hasMoreElements(); )
        {
            attrName = (String)attrNames.nextElement();
            fieldDef.setProperty(attrName, attributes.getProperty(attrName));
        }
        fieldDef.setProperty(PropertyHelper.OJB_PROPERTY_ACCESS, ""anonymous"");
    }",Processes an anonymous field.
"public Entry getLast()
  {
    if (tc.isEntryEnabled())
    {
      SibTr.entry(tc, ""getLast"");     
      SibTr.exit(tc, ""getLast"", last);
    }

    return last;
  }",Get the last entry in the list of the list.
"protected synchronized void destroyServerSocket() {
        if (null == this.serverSocket) {
            // already closed
            return;
        }
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc, ""ServerSocket being closed for port "" + this.listenPort);
        }
        closeServerSocket();
        this.serverSocket = null;
    }",Destroy the serverSocket.
"public static int multiplyRgb(int rgb, double fr, double fg, double fb)
    {
        if (rgb == 0)
        {
            return rgb;
        }

        final int a = rgb >> Constant.BYTE_4 & 0xFF;
        final int r = (int) UtilMath.clamp((rgb >> Constant.BYTE_3 & 0xFF) * fr, 0, 255);
        final int g = (int) UtilMath.clamp((rgb >> Constant.BYTE_2 & 0xFF) * fg, 0, 255);
        final int b = (int) UtilMath.clamp((rgb >> Constant.BYTE_1 & 0xFF) * fb, 0, 255);

        // CHECKSTYLE IGNORE LINE: BooleanExpressionComplexity|TrailingComment
        return (a & 0xFF) << Constant.BYTE_4
               | (r & 0xFF) << Constant.BYTE_3
               | (g & 0xFF) << Constant.BYTE_2
               | (b & 0xFF) << Constant.BYTE_1;
    }",Multiply the RGB value of a single SHORT attribute.
"public static String rewriteMethodSignature(ClassNameRewriter classNameRewriter, String methodSignature) {
        if (classNameRewriter != IdentityClassNameRewriter.instance()) {
            SignatureParser parser = new SignatureParser(methodSignature);

            StringBuilder buf = new StringBuilder();

            buf.append('(');
            for (Iterator<String> i = parser.parameterSignatureIterator(); i.hasNext();) {
                buf.append(rewriteSignature(classNameRewriter, i.next()));
            }

            buf.append(')');
            buf.append(rewriteSignature(classNameRewriter, parser.getReturnTypeSignature()));

            methodSignature = buf.toString();
        }

        return methodSignature;
    }",Rewrite method signature.
"private static ProteinSequence getProteinSequence(String str) {
		try {
			ProteinSequence s = new ProteinSequence(str);
			return s;
		} catch (CompoundNotFoundException e) {

			logger.error(""Unexpected error when creating ProteinSequence"",e);
		}
		return null;
	}",Get a ProteinSequence from a String
"public static boolean isMappedIPv4Address(String ipString) {
    byte[] bytes = ipStringToBytes(ipString);
    if (bytes != null && bytes.length == 16) {
      for (int i = 0; i < 10; i++) {
        if (bytes[i] != 0) {
          return false;
        }
      }
      for (int i = 10; i < 12; i++) {
        if (bytes[i] != (byte) 0xff) {
          return false;
        }
      }
      return true;
    }
    return false;
  }",Checks if the given string is a mapped IPv4 address.
"public String getCategories(int i) {
    if (GOMention_Type.featOkTst && ((GOMention_Type)jcasType).casFeat_categories == null)
      jcasType.jcas.throwFeatMissing(""categories"", ""de.julielab.jules.types.GOMention"");
    jcasType.jcas.checkArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GOMention_Type)jcasType).casFeatCode_categories), i);
    return jcasType.ll_cas.ll_getStringArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GOMention_Type)jcasType).casFeatCode_categories), i);}",indexed getter for categories - gets an indexed value -
"@Override
	public CommerceSubscriptionEntry fetchByPrimaryKey(Serializable primaryKey) {
		Serializable serializable = entityCache.getResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED,
				CommerceSubscriptionEntryImpl.class, primaryKey);

		if (serializable == nullModel) {
			return null;
		}

		CommerceSubscriptionEntry commerceSubscriptionEntry = (CommerceSubscriptionEntry)serializable;

		if (commerceSubscriptionEntry == null) {
			Session session = null;

			try {
				session = openSession();

				commerceSubscriptionEntry = (CommerceSubscriptionEntry)session.get(CommerceSubscriptionEntryImpl.class,
						primaryKey);

				if (commerceSubscriptionEntry != null) {
					cacheResult(commerceSubscriptionEntry);
				}
				else {
					entityCache.putResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED,
						CommerceSubscriptionEntryImpl.class, primaryKey,
						nullModel);
				}
			}
			catch (Exception e) {
				entityCache.removeResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED,
					CommerceSubscriptionEntryImpl.class, primaryKey);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return commerceSubscriptionEntry;
	}",Returns the commerce subscription entry with the primary key.
"public Collector<Type, ClosureHolder, List<Type>> closureCollector(boolean minClosure, BiPredicate<Type, Type> shouldSkip) {
        return Collector.of(() -> new ClosureHolder(minClosure, shouldSkip),
                ClosureHolder::add,
                ClosureHolder::merge,
                ClosureHolder::closure);
    }",Collect a list of types to a closure.
"public static void copyTypeParametersFromJvmOperation(List<JvmTypeParameter> inputParameters,
			List<JvmTypeParameter> outputParameters,
			Map<String, JvmTypeReference> superTypeParameterMapping,
			JvmTypeReferenceBuilder typeParameterBuilder, JvmTypesBuilder typeBuilder,
			TypeReferences typeReferences, TypesFactory jvmTypesFactory) {
		// Copy the generic types in two steps: first step is the name's copy.
		for (final JvmTypeParameter typeParameter : inputParameters) {
			final JvmTypeParameter typeParameterCopy = jvmTypesFactory.createJvmTypeParameter();
			typeParameterCopy.setName(typeParameter.getName());
			outputParameters.add(typeParameterCopy);
		}
		// Second step is the constraints' copy
		for (int i = 0; i < inputParameters.size(); ++i) {
			final JvmTypeParameter typeParameter = inputParameters.get(i);
			final JvmTypeParameter typeParameterCopy = outputParameters.get(i);
			for (final JvmTypeConstraint constraint : typeParameter.getConstraints()) {
				JvmTypeConstraint cst = null;
				if (constraint instanceof JvmLowerBound) {
					cst = jvmTypesFactory.createJvmLowerBound();
				} else if (constraint instanceof JvmUpperBound) {
					cst = jvmTypesFactory.createJvmUpperBound();
				}
				if (cst != null) {
					typeParameterCopy.getConstraints().add(cst);
					cst.setTypeReference(cloneWithTypeParametersAndProxies(
							constraint.getTypeReference(),
							outputParameters,
							superTypeParameterMapping,
							typeParameterBuilder, typeBuilder, typeReferences, jvmTypesFactory));
				}
			}
		}
	}",Copy the type parameters from the jvm operation.
"static Object find(String factoryId)
        throws SOAPException
    {
        ClassLoader classLoader;
        try {
            classLoader = getContextClassLoader();
        } catch (Exception x) {
            throw new SOAPException(x.toString(), x);
        }

        // Use the system property first
        try {
            String systemProp =
                System.getProperty( factoryId );
            if( systemProp!=null) {
                return newInstance(systemProp, classLoader);
            }
        } catch (SecurityException se) {
        }

        // try to read from $java.home/lib/jaxm.properties
        try {
            String javah=System.getProperty( ""java.home"" );
            String configFile = javah + File.separator +
                ""lib"" + File.separator + ""jaxm.properties"";
            File f=new File( configFile );
            if( f.exists()) {
                Properties props=new Properties();
                props.load( new FileInputStream(f));
                String factoryClassName = props.getProperty(factoryId);
                return newInstance(factoryClassName, classLoader);
            }
        } catch(Exception ex ) {
        }

        String serviceId = ""META-INF/services/"" + factoryId;
        // try to find services in CLASSPATH
        try {
            InputStream is=null;
            if (classLoader == null) {
                is=ClassLoader.getSystemResourceAsStream(serviceId);
            } else {
                is=classLoader.getResourceAsStream(serviceId);
            }
        
            if( is!=null ) {
                BufferedReader rd =
                    new BufferedReader(new InputStreamReader(is, ""UTF-8""));
        
                String factoryClassName = rd.readLine();
                rd.close();

                if (factoryClassName != null &&
                    ! """".equals(factoryClassName)) {
                    return newInstance(factoryClassName, classLoader);
                }
            }
        } catch( Exception ex ) {
        }

        ClassLoader moduleClassLoader = null;
        try {
            final Class<?> moduleClass = Class.forName(""org.jboss.modules.Module"");
            final Class<?> moduleIdentifierClass = Class.forName(""org.jboss.modules.ModuleIdentifier"");
            final Class<?> moduleLoaderClass = Class.forName(""org.jboss.modules.ModuleLoader"");
            final SecurityManager sm = System.getSecurityManager();
            Object moduleLoader = null;
            if (sm != null) {
                moduleLoader = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
                    public Object run() throws Exception {
                        return moduleClass.getMethod(""getBootModuleLoader"").invoke(null);

                    }
                });
            } else {
                moduleLoader = moduleClass.getMethod(""getBootModuleLoader"").invoke(null);
            }
            Object moduleIdentifier = moduleIdentifierClass.getMethod(""create"", String.class).invoke(null, JBOSS_SAAJ_IMPL_MODULE);
            final Object module = moduleLoaderClass.getMethod(""loadModule"", moduleIdentifierClass).invoke(moduleLoader, moduleIdentifier);
            if (sm != null) {
                try {
                    moduleClassLoader = AccessController.doPrivileged(new PrivilegedExceptionAction<ClassLoader>() {
                        @Override
                        public ClassLoader run() throws Exception {
                            return (ClassLoader) moduleClass.getMethod(""getClassLoader"").invoke(module);
                        }
                    });
                } catch (PrivilegedActionException pae) {
                    throw pae.getException();
                }
            } else {
                moduleClassLoader = (ClassLoader) moduleClass.getMethod(""getClassLoader"").invoke(module);
            }
        } catch (ClassNotFoundException e) {
           //ignore, JBoss Modules might not be available at all
        } catch (Exception e) {
           throw new SOAPException(e);
        }
        if (moduleClassLoader != null) {
           try {
              InputStream is = moduleClassLoader.getResourceAsStream(serviceId);
          
              if( is!=null ) {
                  BufferedReader rd =
                      new BufferedReader(new InputStreamReader(is, ""UTF-8""));
          
                  String factoryClassName = rd.readLine();
                  rd.close();

                  if (factoryClassName != null &&
                      ! """".equals(factoryClassName)) {
                      return newInstance(factoryClassName, moduleClassLoader);
                  }
              }
          } catch( Exception ex ) {
          }
        }

        return null;
    }",Find a single instance of the class with the specified factory id.
"public RoleInner createOrUpdate(String deviceName, String name, String resourceGroupName, RoleInner role) {
        return createOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, role).toBlocking().last().body();
    }",Creates or updates a role.
"@Override
    public List<StorageState> decodeContent(InputStream in, Charset charset) throws IOException {
        // 解析报文内容
        byte[] bytes = new byte[(int) getContentLength()];
        int contentSize = in.read(bytes);
        if (contentSize != getContentLength()) {
            throw new IOException(""读取到的数据长度与协议长度不符"");
        }
        return decode(bytes, charset);

    }",Decode content.
"public static DocumentBuilder createDocumentBuilder() {
		final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		disableXXE(dbf);
		DocumentBuilder builder = null;
		try {
			builder = dbf.newDocumentBuilder();
		} catch (Exception e) {
			throw new UtilException(e, ""Create xml document error!"");
		}
		return builder;
	}",Create a DocumentBuilder object.
"private XSSFCellStyle updateSubreportBandElementStyle(XSSFCellStyle cellStyle, BandElement bandElement, Object value, int gridRow, int gridColumn, int colSpan) {
    	if (subreportCellStyle == null) {
    		return cellStyle;
    	}
    	    	    	    	
    	if (gridColumn == 0) {    		
    		cellStyle.setBorderLeft(subreportCellStyle.getBorderLeft());    	
    		cellStyle.setLeftBorderColor(subreportCellStyle.getLeftBorderColor());    	
    	} else if (gridColumn+colSpan-1 == bean.getReportLayout().getColumnCount()-1) {    		
    		cellStyle.setBorderRight(subreportCellStyle.getBorderRight());
    		cellStyle.setRightBorderColor(subreportCellStyle.getRightBorderColor());
    	}     	    	
    	
    	if (pageRow == 0) {    		    		
    		cellStyle.setBorderTop(subreportCellStyle.getBorderTop());  
    		cellStyle.setTopBorderColor(subreportCellStyle.getTopBorderColor());  
    	} else if ( (pageRow+1) == getRowsCount()) {    	    		
    		cellStyle.setBorderBottom(subreportCellStyle.getBorderBottom());    	
    		cellStyle.setBottomBorderColor(subreportCellStyle.getBottomBorderColor());
    	}    	
    	    
    	return cellStyle;
    }",Update the subreport band element style
"public Request acceptEncoding(String encoding){
        final String acceptEncoding = RequestHeaderFields.ACCEPT_ENCODING.getName();
        String encodingValue = headers.get(acceptEncoding);
        if (encodingValue == null){
            encodingValue = encoding;
        } else {
            encodingValue = encodingValue + "", "" + encoding;
        }
        return this.setHeader(acceptEncoding, encodingValue);
    }",Sets the request header to accept the given encoding.
"public void marshall(APNSSandboxChannelResponse aPNSSandboxChannelResponse, ProtocolMarshaller protocolMarshaller) {

        if (aPNSSandboxChannelResponse == null) {
            throw new SdkClientException(""Invalid argument passed to marshall(...)"");
        }

        try {
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getApplicationId(), APPLICATIONID_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getCreationDate(), CREATIONDATE_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getDefaultAuthenticationMethod(), DEFAULTAUTHENTICATIONMETHOD_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getEnabled(), ENABLED_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getHasCredential(), HASCREDENTIAL_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getHasTokenKey(), HASTOKENKEY_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getId(), ID_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getIsArchived(), ISARCHIVED_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getLastModifiedBy(), LASTMODIFIEDBY_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getLastModifiedDate(), LASTMODIFIEDDATE_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getPlatform(), PLATFORM_BINDING);
            protocolMarshaller.marshall(aPNSSandboxChannelResponse.getVersion(), VERSION_BINDING);
        } catch (Exception e) {
            throw new SdkClientException(""Unable to marshall request to JSON: "" + e.getMessage(), e);
        }
    }",marshalls the given APNSSandboxChannelResponse to the JSON file.
"protected Connection createConnection(Socket socket, InputStream inputStream,
			OutputStream outputStream) throws IOException {
		return new Connection(socket, inputStream, outputStream);
	}",Creates a new connection to the server.
"public Date getFirstValueAsDate() throws ParseException {
        String valueString = getFirstValue();
        if (valueString == null) {
            return null;
        }
        return XmppDateTime.parseXEP0082Date(valueString);
    }",Gets the first value as a Date.
"public CmsPermissionSet getPermissions(String resourceName, String userName) throws CmsException {

        // reading permissions is allowed even if the resource is marked as deleted
        CmsResource resource = readResource(resourceName, CmsResourceFilter.ALL);
        CmsUser user = readUser(userName);
        return m_securityManager.getPermissions(m_context, resource, user);
    }",Returns the permissions for the given resource and user.
"public ProjectCalendarHours addCalendarHours(Day day)
   {
      ProjectCalendarHours bch = new ProjectCalendarHours(this);
      bch.setDay(day);
      m_hours[day.getValue() - 1] = bch;
      return (bch);
   }",Add calendar hours to this calendar.
"private DateTime providedOrDefaultFromValue(DateTime from, DateTime to,
			AggregateCounterResolution resolution) {
		if (from != null) {
			return from;
		}
		switch (resolution) {
		case minute:
			return to.minusMinutes(59);
		case hour:
			return to.minusHours(23);
		case day:
			return to.minusDays(6);
		case month:
			return to.minusMonths(11);
		case year:
			return to.minusYears(4);
		default:
			throw new IllegalStateException(
					""Shouldn't happen. Unhandled resolution: "" + resolution);
		}
	}",Given two dates return the value of the provided value.
"@Override
    public IRenderingElement generate(IAtomContainer container, RendererModel model) {

        final Map<IChemObject, Integer> highlight = container.getProperty(ID_MAP);

        if (highlight == null) return null;

        final Palette palette = model.getParameter(HighlightPalette.class).getValue();
        final double radius = model.getParameter(HighlightRadius.class).getValue()
                / model.getParameter(BasicSceneGenerator.Scale.class).getValue();

        final Map<Integer, Area> shapes = new HashMap<Integer, Area>();

        for (IAtom atom : container.atoms()) {

            Integer id = highlight.get(atom);

            if (id == null) continue;

            Area area = shapes.get(id);
            Shape shape = createAtomHighlight(atom, radius);

            if (area == null)
                shapes.put(id, new Area(shape));
            else
                area.add(new Area(shape));
        }

        for (IBond bond : container.bonds()) {

            Integer id = highlight.get(bond);

            if (id == null) continue;

            Area area = shapes.get(id);
            Shape shape = createBondHighlight(bond, radius);

            if (area == null)
                shapes.put(id, (area = new Area(shape)));
            else
                area.add(new Area(shape));

            // punch out the area occupied by atoms highlighted with a
            // different color

            IAtom   a1   = bond.getBegin(), a2 = bond.getEnd();
            Integer a1Id = highlight.get(a1), a2Id = highlight.get(a2);

            if (a1Id != null && !a1Id.equals(id)) area.subtract(shapes.get(a1Id));
            if (a2Id != null && !a2Id.equals(id)) area.subtract(shapes.get(a2Id));
        }

        // create rendering elements for each highlight shape
        ElementGroup group = new ElementGroup();
        for (Map.Entry<Integer, Area> e : shapes.entrySet()) {
            group.add(GeneralPath.shapeOf(e.getValue(), palette.color(e.getKey())));
        }

        return group;
    }",Generate the CRS for the given atom container.
"@Override
	public CPDefinitionLocalization fetchByCPDefinitionId_Last(
		long CPDefinitionId,
		OrderByComparator<CPDefinitionLocalization> orderByComparator) {
		int count = countByCPDefinitionId(CPDefinitionId);

		if (count == 0) {
			return null;
		}

		List<CPDefinitionLocalization> list = findByCPDefinitionId(CPDefinitionId,
				count - 1, count, orderByComparator);

		if (!list.isEmpty()) {
			return list.get(0);
		}

		return null;
	}",Returns the last cp definition localization in the ordered set.
"public <T extends RegressionEvaluation> T evaluateRegression(JavaRDD<DataSet> data, int minibatchSize) {
        long nOut = ((FeedForwardLayer) network.getOutputLayer().conf().getLayer()).getNOut();
        return (T)doEvaluation(data, new org.deeplearning4j.eval.RegressionEvaluation(nOut), minibatchSize);
    }",Evaluates a regression model.
"public EEnum getObjectClassificationStrucFlgs() {
		if (objectClassificationStrucFlgsEEnum == null) {
			objectClassificationStrucFlgsEEnum = (EEnum)EPackage.Registry.INSTANCE.getEPackage(AfplibPackage.eNS_URI).getEClassifiers().get(101);
		}
		return objectClassificationStrucFlgsEEnum;
	}",Get the object classification StrucFlgs attribute.
"private void startNegotiators() {

        for (ContentNegotiator contentNegotiator : contentNegotiators) {
            TransportNegotiator transNeg = contentNegotiator.getTransportNegotiator();
            transNeg.start();
        }
    }",Start all the negotiators.
"@Override
    public DeleteInstanceResult deleteInstance(DeleteInstanceRequest request) {
        request = beforeClientExecution(request);
        return executeDeleteInstance(request);
    }",Deletes an instance.
"public static void printSystemOut(String message1, long message2) {

        if (TRACESYSTEMOUT) {
            System.out.print(message1);
            System.out.println(message2);
        }
    }",Print the system out.
"public void marshall(ListTagsForProjectRequest listTagsForProjectRequest, ProtocolMarshaller protocolMarshaller) {

        if (listTagsForProjectRequest == null) {
            throw new SdkClientException(""Invalid argument passed to marshall(...)"");
        }

        try {
            protocolMarshaller.marshall(listTagsForProjectRequest.getId(), ID_BINDING);
            protocolMarshaller.marshall(listTagsForProjectRequest.getNextToken(), NEXTTOKEN_BINDING);
            protocolMarshaller.marshall(listTagsForProjectRequest.getMaxResults(), MAXRESULTS_BINDING);
        } catch (Exception e) {
            throw new SdkClientException(""Unable to marshall request to JSON: "" + e.getMessage(), e);
        }
    }",marshalls the given parameter object.
"public String getTextureFile(AiTextureType type, int index) {
        checkTexRange(type, index);
        
        return getTyped(PropertyKey.TEX_FILE, type, index, String.class);
    }",Gets the texture file.
"static private Vector3f[] copyVertices(Vector3f[] vertices) {
        if (vertices == null) {
            return null;
        }
        Vector3f[] copy = new Vector3f[vertices.length];
        for (int i = 0; i < vertices.length; ++i) {
            copy[i] = new Vector3f(vertices[i]);
        }
        return copy;
    }",Copy the vertices array.
"public static <ID, T extends Model> Finder<ID, T> withFinder() {
        return withFinder(DataSourceManager.getDefaultDataSourceName());
    }",Returns a Finder that will use the default datasource name.
"@Route(method = HttpMethod.POST, uri = ""samples/auto-validation"")
    public Result auto(@Valid @Body Car car) throws IOException {
        return ok();
    }",Auto validation of a single entity.
"public static boolean isValid(final String cssValue) {
        if (cssValue == null || StringUtil.isBlank(cssValue)) {
            return false;
        }

        final String[] cssValueParts = StringUtil.splitBySpace(cssValue);

        ColumnWidth columnWidth = null;
        ColumnCount columnCount = null;

        for (final String eachPart : cssValueParts) {
            boolean invalid = true;
            if (columnWidth == null && ColumnWidth.isValid(eachPart)) {
                columnWidth = new ColumnWidth(eachPart);
                invalid = false;
            } else if (columnCount == null && ColumnCount.isValid(eachPart)) {
                columnCount = new ColumnCount(eachPart);
                invalid = false;
            }
            if (invalid) {
                return false;
            }
        }

        return columnWidth != null || columnCount != null;
    }",Checks if the given CSS value is a valid CSP image.
"@CheckReturnValue
    @SchedulerSupport(SchedulerSupport.NONE)
    public final Observable<T> concatWith(@NonNull CompletableSource other) {
        ObjectHelper.requireNonNull(other, ""other is null"");
        return RxJavaPlugins.onAssembly(new ObservableConcatWithCompletable<T>(this, other));
    }",Concatenates two set of images.
"public static void closeWindow(Component component) {

        Window window = getWindow(component);
        if (window != null) {
            window.close();
        }
    }",Close the window.
"public static CPRule fetchByGroupId_Last(long groupId,
		OrderByComparator<CPRule> orderByComparator) {
		return getPersistence().fetchByGroupId_Last(groupId, orderByComparator);
	}",Returns the last cp rule in the ordered set where groupId = &#63 ;.
"public static void computePosition (
        Point start, Point end, long elapsed, long duration, Point pos)
    {
        float pct = (float)elapsed / duration;
        int travx = (int)((end.x - start.x) * pct);
        int travy = (int)((end.y - start.y) * pct);
        pos.setLocation(start.x + travx, start.y + travy);
    }",Compute the position of a page in a page.
"@Override
    public DeleteDeliveryStreamResult deleteDeliveryStream(DeleteDeliveryStreamRequest request) {
        request = beforeClientExecution(request);
        return executeDeleteDeliveryStream(request);
    }",Deletes an existing delivery source.
"@Subscribe
    public synchronized void renew(final SchemaAddedEvent schemaAddedEvent) {
        logicSchemas.put(schemaAddedEvent.getShardingSchemaName(), createLogicSchema(schemaAddedEvent.getShardingSchemaName(), 
                Collections.singletonMap(schemaAddedEvent.getShardingSchemaName(), DataSourceConverter.getDataSourceParameterMap(schemaAddedEvent.getDataSourceConfigurations())), 
                schemaAddedEvent.getRuleConfiguration(), true));
    }",Renews the logic schema.
"@Override
    protected Event doExecute(final RequestContext context) {
        try {
            val request = WebUtils.getHttpServletRequestFromExternalWebflowContext(context);
            val wa = request.getParameter(WA);
            if (StringUtils.isNotBlank(wa) && wa.equalsIgnoreCase(WSIGNIN)) {
                wsFederationResponseValidator.validateWsFederationAuthenticationRequest(context);
                return super.doExecute(context);
            }
            return wsFederationRequestBuilder.buildAuthenticationRequestEvent(context);
        } catch (final Exception ex) {
            LOGGER.error(ex.getMessage(), ex);
            throw new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE, ex.getMessage());
        }
    }",Override doExecute to validate WA param.
"@XmlElementDecl(namespace = ""http://schema.intuit.com/finance/v3"", name = ""Status"", substitutionHeadNamespace = ""http://schema.intuit.com/finance/v3"", substitutionHeadName = ""IntuitObject"")
    public JAXBElement<Status> createStatus(Status value) {
        return new JAXBElement<Status>(_Status_QNAME, Status.class, null, value);
    }",Create an instance of the Status class
"public void subtract(final AbstractHistogram otherHistogram)
            throws ArrayIndexOutOfBoundsException, IllegalArgumentException {
        long highestRecordableValue = valueFromIndex(countsArrayLength - 1);
        if (highestRecordableValue < otherHistogram.getMaxValue()) {
            if (!isAutoResize()) {
                throw new ArrayIndexOutOfBoundsException(
                        ""The other histogram includes values that do not fit in this histogram's range."");
            }
            resize(otherHistogram.getMaxValue());
        }
        if ((bucketCount == otherHistogram.bucketCount) &&
                (subBucketCount == otherHistogram.subBucketCount) &&
                (unitMagnitude == otherHistogram.unitMagnitude) &&
                (getNormalizingIndexOffset() == otherHistogram.getNormalizingIndexOffset())) {
            // Counts arrays are of the same length and meaning, so we can just iterate and add directly:
            long observedOtherTotalCount = 0;
            for (int i = 0; i < otherHistogram.countsArrayLength; i++) {
                long otherCount = otherHistogram.getCountAtIndex(i);
                if (otherCount > 0) {
                    if (getCountAtIndex(i) < otherCount) {
                        throw new IllegalArgumentException(""otherHistogram count ("" + otherCount + "") at value "" +
                                valueFromIndex(i) + "" is larger than this one's ("" + getCountAtIndex(i) + "")"");
                    }
                    addToCountAtIndex(i, -otherCount);
                    observedOtherTotalCount += otherCount;
                }
            }
            setTotalCount(getTotalCount() - observedOtherTotalCount);
            updatedMaxValue(Math.max(getMaxValue(), otherHistogram.getMaxValue()));
            updateMinNonZeroValue(Math.min(getMinNonZeroValue(), otherHistogram.getMinNonZeroValue()));
        } else {
            // Arrays are not a direct match, so we can't just stream through and add them.
            // Instead, go through the array and add each non-zero value found at it's proper value:
            for (int i = 0; i < otherHistogram.countsArrayLength; i++) {
                long otherCount = otherHistogram.getCountAtIndex(i);
                if (otherCount > 0) {
                    long otherValue = otherHistogram.valueFromIndex(i);
                    if (getCountAtValue(otherValue) < otherCount) {
                        throw new IllegalArgumentException(""otherHistogram count ("" + otherCount + "") at value "" +
                                otherValue + "" is larger than this one's ("" + getCountAtValue(otherValue) + "")"");
                    }
                    recordValueWithCount(otherValue, -otherCount);
                }
            }
        }
        // With subtraction, the max and minNonZero values could have changed:
        if ((getCountAtValue(getMaxValue()) <= 0) || getCountAtValue(getMinNonZeroValue()) <= 0) {
            establishInternalTackingValues();
        }
    }",Subtracts the given histogram from this one.
"public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {
//        if (e instanceof IllegalArgumentException) {
//            //TODO: test if this is OK with new MOP, should be changed!
//            // we don't want the exception being unwrapped if it is a IllegalArgumentException
//            // but in the case it is for example a IllegalThreadStateException, we want the unwrapping
//            // from the runtime
//            //Note: the reason we want unwrapping sometimes and sometimes not is that the method
//            // invocation tries to invoke the method with and then reacts with type transformation
//            // if the invocation failed here. This is OK for IllegalArgumentException, but it is
//            // possible that a Reflector will be used to execute the call and then an Exception from inside
//            // the method is not wrapped in a InvocationTargetException and we will end here.
//            boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof org.codehaus.groovy.reflection.GeneratedMetaMethod;
//            return MetaClassHelper.createExceptionText(""failed to invoke method: "", this, object, argumentArray, e, setReason);
//        }

        if (e instanceof RuntimeException)
          return (RuntimeException) e;

        return MetaClassHelper.createExceptionText(""failed to invoke method: "", this, object, argumentArray, e, true);
    }",Process a do method invoke exception.
"private Map<FileInfo, FileInfo> getCopyToMap() {
        final Map<FileInfo, FileInfo> copyToMap = new HashMap<>();

        if (forceUnique) {
            forceUniqueFilter.copyToMap.forEach((dstFi, srcFi) -> {
                job.add(dstFi);
                copyToMap.put(dstFi, srcFi);
            });
        }

        for (final Map.Entry<URI, URI> e : reader.getCopyToMap().entrySet()) {
            final URI target = job.tempDirURI.relativize(e.getKey());
            final FileInfo targetFi = job.getFileInfo(target);
            final URI source = job.tempDirURI.relativize(e.getValue());
            final FileInfo sourceFi = job.getFileInfo(source);
            // Filter when copy-to was ignored (so target is not in job),
            // or where target is used directly
            if (targetFi == null ||
                    (targetFi != null && targetFi.src != null)) {
                continue;
            }
            copyToMap.put(targetFi, sourceFi);
        }

        return copyToMap;
    }",Get a copy of the map from the job to the temp directory.
"@Override
    public BoundStatement bindInsert(PreparedStatement statement, P pojo, int ttl) {
        List<Object> parameters = new LinkedList<>();
        keyBinding.collectParameters(pojo, parameters);
        facetBindings.forEach(facetBinding -> facetBinding.collectParameters(pojo, parameters));
        parameters.add(ttl);
        return bind(statement, parameters);
    }",Binds the given POJO to the given statement.
"private void close(Store store) {
        StoreKey key = keysByStore.get(store);
        LOGGER.info(""Closing store in directory '"" + key.getUri() + ""'."");
        store.stop();
    }",Close the store.
"@SuppressWarnings(""unused"")
    private CharSequence readData() throws IOException {
        if (!_eventSource.isConnected()) {
            String s = ""Can't read using the MessageReader if the event "" +
                       ""source is not connected"";
            throw new SseException(s);
        }

        synchronized (this) {        
            if (_payload != null) {
                // If we are here, then it means that readData() was invoked 
                // after next(). So, the _payload is already setup and we just
                // have to return the data.
                if (_eventType != SseEventType.DATA) {
                    String s = ""readData() can only be used to read events "" +
                               ""of type SseEventType.DATA"";
                    throw new SseException(s);            
                }
                
                // Clear the _payload member variable for the internal state 
                // machine.
                _payload = null;            
                return _data;
            }
            
            // This will block the thread. If we are here, this means that
            // readData() was invoked without a previous invocation of next().
            // So, we invoke next() and ensure that the next message is a text
            // message. Otherwise, throw an exception.
            SseEventType type = next();
            
            if (type != SseEventType.DATA) {
                String s = ""readData() can only be used to read events "" +
                           ""of type SseEventType.DATA"";
                throw new SseException(s);            
            }
    
            _data = _payload.getData();
            _eventName = _payload.getEventName();
    
            // Clear the _payload member variable for the internal state machine.
            _payload = null;
            return _data;
        }
    }",readData - Reads the data from the event source.
"public void into(@NonNull BitmapTarget target) {
    long started = System.nanoTime();
    checkMain();

    if (target == null) {
      throw new IllegalArgumentException(""Target must not be null."");
    }
    if (deferred) {
      throw new IllegalStateException(""Fit cannot be used with a Target."");
    }

    if (!data.hasImage()) {
      picasso.cancelRequest(target);
      target.onPrepareLoad(setPlaceholder ? getPlaceholderDrawable() : null);
      return;
    }

    Request request = createRequest(started);

    if (shouldReadFromMemoryCache(request.memoryPolicy)) {
      Bitmap bitmap = picasso.quickMemoryCacheCheck(request.key);
      if (bitmap != null) {
        picasso.cancelRequest(target);
        target.onBitmapLoaded(bitmap, MEMORY);
        return;
      }
    }

    target.onPrepareLoad(setPlaceholder ? getPlaceholderDrawable() : null);

    Action action = new BitmapTargetAction(picasso, target, request, errorDrawable, errorResId);
    picasso.enqueueAndSubmit(action);
  }",Converts the image into the target.
"public static Alignment<NucleotideSequence> align(LinearGapAlignmentScoring scoring, NucleotideSequence seq1, NucleotideSequence seq2,
                                                      int offset1, int length1, int offset2, int length2, int width) {
        try {
            MutationsBuilder<NucleotideSequence> mutations = new MutationsBuilder<>(NucleotideSequence.ALPHABET);
            float score = align0(scoring, seq1, seq2, offset1, length1, offset2, length2, width,
                    mutations, AlignmentCache.get());
            return new Alignment<>(seq1, mutations.createAndDestroy(),
                    new Range(offset1, offset1 + length1), new Range(offset2, offset2 + length2), score);
        } finally {
            AlignmentCache.release();
        }
    }",Aligns two nucleotides using LinearGapAlignmentScoring.
"Constraint getUniqueConstraintForExprs(Expression[] indexExprs) {
        for (int i = 0, size = constraintList.length; i < size; i++) {
            Constraint exprc = constraintList[i];

            if (exprc.isUniqueWithExprs(indexExprs)) {
                return exprc;
            }
        }
        return null;
    }",Get the UniqueConstraint for the given indexExprs.
"public static void addLibrary(final JobID jobID, final Path name, final long size, final DataInput in)
			throws IOException {

		final LibraryCacheManager lib = get();
		lib.addLibraryInternal(jobID, name, size, in);
	}",Add a library to the cache.
"@SuppressWarnings(""unchecked"")
	public EList<IfcStructuralAnalysisModel> getLoadGroupFor() {
		return (EList<IfcStructuralAnalysisModel>) eGet(
				Ifc2x3tc1Package.Literals.IFC_STRUCTURAL_LOAD_GROUP__LOAD_GROUP_FOR, true);
	}",Gets the named LoadGroup for.
"@Override
	public void removeListener(InvalidationListener listener) {
		Objects.requireNonNull(listener);
		if (0 < invalidationSize) {
			if (size == 1) {
				if (invalidationSize == 1 && this.listener.equals(listener)) {
					sentinel = false;
					this.listener = null;
					invalidationSize--;
					size--;
				}
			} else if (size == 2) {
				Object[] l = (Object[]) this.listener;
				if (listener.equals(l[0])) {
					sentinel = false;
					invalidationSize--;
					size--;
					this.listener = l[1];
				} else if (invalidationSize == 2 && listener.equals(l[1])) {
					sentinel = false;
					invalidationSize--;
					size--;
					this.listener = l[0];
				}
			} else {
				Object[] l = (Object[]) this.listener;

				for (int i = 0; i < invalidationSize; i++) {
					if (listener.equals(l[i])) {
						if (sentinel) {
							sentinel = false;
							l = Arrays.copyOf(l, l.length);
							this.listener = l;
						}
						if (i + 1 < size) {
							System.arraycopy(l, i + 1, l, i, size - i - 1);
						} else {
							l[i] = null;
						}
						invalidationSize--;
						size--;
						break;
					}
				}
			}
		}
	}",Removes the listener.
"public static synchronized void setChannelGroups(Collection<WonderPushChannelGroup> channelGroups) {
        if (channelGroups == null) return;
        boolean save = false;
        try {
            Set<String> groupIdsToRemove = new HashSet<>(sChannelGroups.keySet());
            for (WonderPushChannelGroup channelGroup : channelGroups) {
                if (channelGroup == null) continue;
                groupIdsToRemove.remove(channelGroup.getId());
                if (_putChannelGroup(channelGroup)) save = true;
            }
            for (String groupId : groupIdsToRemove) {
                if (_removeChannelGroup(groupId)) save = true;
            }
        } catch (Exception ex) {
            Log.e(WonderPush.TAG, ""Unexpected error while setting channel groups "" + channelGroups, ex);
        } finally {
            try {
                if (save) {
                    save();
                }
            } catch (Exception ex) {
                Log.e(WonderPush.TAG, ""Unexpected error while setting channel groups "" + channelGroups, ex);
            }
        }
    }",Set the channel groups.
"private void generateEntity(M2MEntity entity) {
		entity.propertyPrimaryKey = TypeName.LONG;
		entity.propertyKey1 = findPrimaryKeyFieldType(entity.entity1Name.toString());
		entity.propertyKey2 = findPrimaryKeyFieldType(entity.entity2Name.toString());
		if (!entity.needToCreate) {
			return;
		}

		String tableName = entity.tableName;
		String entityClassName = entity.name;

		AnnotationProcessorUtilis.infoOnGeneratedClasses(BindDaoMany2Many.class, entity.getPackageName(),
				entityClassName);

		Converter<String, String> converterFK = CaseFormat.LOWER_CAMEL.converterTo(CaseFormat.UPPER_CAMEL);
		Converter<String, String> converterFieldName = CaseFormat.UPPER_CAMEL.converterTo(CaseFormat.LOWER_CAMEL);
		Converter<String, String> converterField2ColumnName = CaseFormat.LOWER_CAMEL
				.converterTo(CaseFormat.LOWER_UNDERSCORE);
		String fkPrefix = converterFK.convert(entity.idName);

		String fk1Name = converterField2ColumnName.convert(entity.entity1Name.simpleName() + fkPrefix);
		String fk2Name = converterField2ColumnName.convert(entity.entity2Name.simpleName() + fkPrefix);

		String field1Name = converterFieldName.convert(entity.entity1Name.simpleName() + fkPrefix);
		String field2Name = converterFieldName.convert(entity.entity2Name.simpleName() + fkPrefix);

		List<SQLProperty> properties = new ArrayList<SQLProperty>();

		// we define property type later
		{
			SQLProperty property = new SQLProperty(entity.idName, entity.getClassName(), entity.propertyPrimaryKey);
			property.columnType = ColumnType.PRIMARY_KEY;
			property.columnName = entity.idName;
			property.setNullable(false);
			property.setPrimaryKey(true);
			property.foreignParentClassName = null;
			properties.add(property);
		}

		{
			SQLProperty property = new SQLProperty(field1Name, entity.getClassName(), entity.propertyKey1);
			property.columnType = ColumnType.INDEXED;
			property.columnName = fk1Name;
			property.setNullable(false);
			property.setPrimaryKey(false);
			property.onDeleteAction = ForeignKeyAction.CASCADE;
			property.foreignParentClassName = entity.entity1Name.toString();
			properties.add(property);
		}

		{
			SQLProperty property = new SQLProperty(field2Name, entity.getClassName(), entity.propertyKey2);
			property.columnType = ColumnType.INDEXED;
			property.columnName = fk2Name;
			property.setNullable(false);
			property.setPrimaryKey(false);
			property.onDeleteAction = ForeignKeyAction.CASCADE;
			property.foreignParentClassName = entity.entity2Name.toString();
			properties.add(property);
		}

		// @formatter:off
		classBuilder = TypeSpec.classBuilder(entityClassName).addModifiers(Modifier.PUBLIC)
				.addAnnotation(AnnotationSpec.builder(BindSqlType.class).addMember(""name"", ""$S"", tableName).build());
		// @formatter:on

		if (entity.immutable) {
			// create constructor
			Builder constructorBuilder = MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC);
			for (SQLProperty p : properties) {
				constructorBuilder
						.addParameter(ParameterSpec.builder(p.getPropertyType().getTypeName(), p.getName()).build());
				constructorBuilder.addStatement(""this.$L=$L"", p.getName(), p.getName());
			}
			classBuilder.addMethod(constructorBuilder.build());
		}

		Modifier fieldModifier = entity.immutable ? Modifier.PRIVATE : Modifier.PUBLIC;

		// javadoc for class
		classBuilder.addJavadoc(""<p>"");
		classBuilder.addJavadoc(""\nGenerated entity implementation for <code>$L</code>\n"", entity.name);
		classBuilder.addJavadoc(""</p>\n"");
		JavadocUtility.generateJavadocGeneratedBy(classBuilder);
		// classBuilder.addJavadoc("" @see $T\n"",		

		{
			// @formatter:off
			FieldSpec fieldSpec = FieldSpec.builder(entity.propertyPrimaryKey, entity.idName, fieldModifier)
					.addJavadoc(""Primary key\n"")
					.addAnnotation(AnnotationSpec.builder(BindSqlColumn.class)
							.addMember(""columnType"", ""$T.$L"", ColumnType.class, ColumnType.PRIMARY_KEY).build())
					.build();
			// @formatter:on
			classBuilder.addField(fieldSpec);
		}

		{
			// @formatter:off
			FieldSpec fieldSpec = FieldSpec
					.builder(entity.propertyKey1, field1Name, fieldModifier)
					.addJavadoc(""Foreign key to $T model class\n"", entity.entity1Name)
					.addAnnotation(AnnotationSpec.builder(BindSqlColumn.class)
							.addMember(AnnotationAttributeType.PARENT_ENTITY.getValue(), ""$T.class"", entity.entity1Name)
							.addMember(AnnotationAttributeType.ON_DELETE.getValue(), ""$T.$L"", ForeignKeyAction.class,
									ForeignKeyAction.CASCADE)
							.build())
					.build();
			// @formatter:on
			classBuilder.addField(fieldSpec);
		}

		{
			// @formatter:off
			FieldSpec fieldSpec = FieldSpec
					.builder(entity.propertyKey2, field2Name, fieldModifier)
					.addJavadoc(""Foreign key to $T model class\n"", entity.entity2Name)
					.addAnnotation(AnnotationSpec.builder(BindSqlColumn.class)
							.addMember(AnnotationAttributeType.PARENT_ENTITY.getValue(), ""$T.class"", entity.entity2Name)
							.addMember(AnnotationAttributeType.ON_DELETE.getValue(), ""$T.$L"", ForeignKeyAction.class,
									ForeignKeyAction.CASCADE)
							.build())
					.build();
			// @formatter:on
			classBuilder.addField(fieldSpec);
		}

		if (entity.immutable) {
			// getters
			for (SQLProperty p : properties) {
				Builder methodBuilder = MethodSpec
						.methodBuilder(""get"" + CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, p.getName()))
						.returns(p.getPropertyType().getTypeName()).addStatement(""return this.$L"", p.getName())
						.addModifiers(Modifier.PUBLIC);

				classBuilder.addMethod(methodBuilder.build());
			}
		}

		TypeSpec typeSpec = classBuilder.build();

		try {
			JavaWriterHelper.writeJava2File(filer, entity.getPackageName(), typeSpec);
		} catch (IOException e) {
			throw new KriptonRuntimeException(e);
		}

		GeneratedTypeElement entityElement = new GeneratedTypeElement(entity.getPackageName(), classBuilder.build(),
				tableName, fk1Name + "", "" + fk2Name);

		entityElement.properties = properties;

		entityResult.add(entityElement);
	}",generate entity.
"public static void set(MutableIntTuple t, int v)
    {
        for (int i=0; i<t.getSize(); i++)
        {
            t.set(i, v);
        }
    }",Sets the contents of the MutableIntTuple to the given value.
"public static SecondaryIndex createInstance(ColumnFamilyStore baseCfs, ColumnDefinition cdef) throws ConfigurationException
    {
        SecondaryIndex index;

        switch (cdef.getIndexType())
        {
        case KEYS:
            index = new KeysIndex();
            break;
        case COMPOSITES:
            index = CompositesIndex.create(cdef);
            break;
        case CUSTOM:
            assert cdef.getIndexOptions() != null;
            String class_name = cdef.getIndexOptions().get(CUSTOM_INDEX_OPTION_NAME);
            assert class_name != null;
            try
            {
                index = (SecondaryIndex) Class.forName(class_name).newInstance();
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
            break;
            default:
                throw new RuntimeException(""Unknown index type: "" + cdef.getIndexName());
        }

        index.addColumnDef(cdef);
        index.validateOptions();
        index.setBaseCfs(baseCfs);

        return index;
    }",Creates a secondary index instance.
"@Override
    public boolean onTouchEvent(MotionEvent ev) {
        if (null != mGestureDetector) {
            return mGestureDetector.onTouchEvent(ev);
        } else {
            return super.onTouchEvent(ev);
        }
    }",Override onTouchEvent to call the appropriate GestureDetector.
"public RegistryCredentialsInner regenerateCredentials(String resourceGroupName, String registryName) {
        return regenerateCredentialsWithServiceResponseAsync(resourceGroupName, registryName).toBlocking().single().body();
    }",Regenerate access to a container registry.
"public static void replaceMultipleTo (@Nullable final String sInputString,
                                        @Nonnull final char [] aSearchChars,
                                        final char cReplacementChar,
                                        @Nonnull final StringBuilder aTarget)
  {
    ValueEnforcer.notNull (aSearchChars, ""SearchChars"");
    ValueEnforcer.notNull (aTarget, ""Target"");

    // Any input text?
    if (hasText (sInputString))
    {
      // Any search chars?
      if (aSearchChars.length == 0)
      {
        aTarget.append (sInputString);
      }
      else
      {
        // Perform the replacement
        for (final char c : sInputString.toCharArray ())
        {
          if (ArrayHelper.contains (aSearchChars, c))
            aTarget.append (cReplacementChar);
          else
            aTarget.append (c);
        }
      }
    }
  }",Replace multiple to.
"public void flushChildScopes(QName unitId) {
        Set<Integer> childScopes = findChildScopes(unitId);
        for(Integer scopeId : childScopes)
        {
            MutableContext mutableContext = statementContexts.get(scopeId);
            mutableContext.clearStatements();
        }
    }",Flush all child scopes of a unit.
"public boolean execInsert(D6Model[] modelObjects, D6Inex includeExcludeColumnNames) {
    boolean ignoreDuplicate = false;
    return execInsert(modelObjects, includeExcludeColumnNames, ignoreDuplicate);
  }",Insert a sequence of D6Models into the database.
"public void setRelatedEvents(java.util.Collection<String> relatedEvents) {
        if (relatedEvents == null) {
            this.relatedEvents = null;
            return;
        }

        this.relatedEvents = new com.amazonaws.internal.SdkInternalList<String>(relatedEvents);
    }",Sets the value of the relatedEvents property.
"private static void sort1(Quicksortable q, int off, int k, int len) {
        // we don't care about anything >= to k
        if (off >= k)
            return;
        // Insertion sort on smallest arrays
        if (len < 7) {
            for (int i = off; i < len + off; i++)
                for (int j = i; j > off && q.compare(j, j - 1) < 0; j--)
                    q.swap(j, j - 1);
            return;
        }

        // Choose a partition element, v
        int m = off + (len >> 1);       // Small arrays, middle element
        if (len > 7) {
            int l = off;
            int n = off + len - 1;
            if (len > 40) {        // Big arrays, pseudomedian of 9
                int s = len / 8;
                l = med3(q, l, l + s, l + 2 * s);
                m = med3(q, m - s, m, m + s);
                n = med3(q, n - 2 * s, n - s, n);
            }
            m = med3(q, l, m, n); // Mid-size, med of 3
        }
        // move the pivot element to to the front
        q.swap(off, m);
        m = off;

        // Establish Invariant: m* (<m)* (>m)* m*
        int a = off+1, b = a, c = off + len - 1, d = c;
        int cmp;
        while (true) {
            while (b <= c && (cmp = q.compare(b, off)) <= 0) {
                if (cmp == 0)
                    q.swap(a++, b);
                b++;
            }
            while (c >= b && (cmp = q.compare(c, off)) >= 0) {
                if (cmp == 0)
                    q.swap(c, d--);
                c--;
            }
            if (b > c)
                break;
            q.swap(b++, c--);
        }

        // Swap partition elements back to middle
        int s, n = off + len;
        s = Math.min(a - off, b - a);
        vecswap(q, off, b - s, s);
        s = Math.min(d - c, n - d - 1);
        vecswap(q, b, n - s, s);

        // Recursively sort non-partition-elements
        if ((s = b - a) > 1)
            sort1(q, off, k, s);
        if ((s = d - c) > 1)
            sort1(q, n - s, k, s);
    }",sort1 Method.
"@Deprecated
    public static String parseRegionName(final String host,
                                         final String serviceHint) {
        String region = parseRegion(host, serviceHint);

        // If region is null, then endpoint is totally non-standard;
        // guess us-east-1 for lack of a better option.
        return region == null ? ""us-east-1"" : region;
    }",Parse region name from host and service hint.
"private static String getRealDeptId(String deptId){
		int start=deptId.indexOf(""["");
		String realKey=deptId;
		if(start>0){
			realKey=deptId.substring(0,start);
		}
		return realKey;
	}",Gets the real deptId.
"void write(ByteCodeWriter out)
    throws IOException
  {
    out.write(ConstantPool.CP_UTF8);
    out.writeUTF8(_value);
  }",Write the content of this object to the specified output stream.
"protected void sequence_XSynchronizedExpression(ISerializationContext context, XSynchronizedExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__PARAM));
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXSynchronizedExpressionAccess().getParamXExpressionParserRuleCall_1_0(), semanticObject.getParam());
		feeder.accept(grammarAccess.getXSynchronizedExpressionAccess().getExpressionXExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}",Sequence the given XSynchronizedExpression.
"public String getRedirectUri(AccessTokenRequest request) {

		String redirectUri = request.getFirst(""redirect_uri"");

		if (redirectUri == null && request.getCurrentUri() != null && useCurrentUri) {
			redirectUri = request.getCurrentUri();
		}

		if (redirectUri == null && getPreEstablishedRedirectUri() != null) {
			// Override the redirect_uri if it is pre-registered
			redirectUri = getPreEstablishedRedirectUri();
		}

		return redirectUri;

	}",Get the redirect uri from the request.
"public boolean remove(Set<?> set, Object object) {
		if (set == null || object == null) {
			return false;
		}
		
		return set.remove(object);
	}",Removes the specified object from the specified set.
"public IntStream ones() {
		return IntStream.range(0, length())
			.filter(index -> bit.get(_genes, index));
	}",Returns an IntStream of all the values in this set.
"public static LUDecomposition<FloatMatrix> lu(FloatMatrix A) {
      int[] ipiv = new int[min(A.rows, A.columns)];
      FloatMatrix result = A.dup();
      NativeBlas.sgetrf(A.rows, A.columns, result.data, 0, A.rows, ipiv, 0);

      // collect result
      FloatMatrix l = new FloatMatrix(A.rows, min(A.rows, A.columns));
      FloatMatrix u = new FloatMatrix(min(A.columns, A.rows), A.columns);
      decomposeLowerUpper(result, l, u);
      FloatMatrix p = Permutations.permutationFloatMatrixFromPivotIndices(A.rows, ipiv);
      return new LUDecomposition<FloatMatrix>(l, u, p);
  }",Returns the LU decomposition of A.
"private boolean containsRestrictedPrefix(String tpl)
	{
		for (String i : blackPrefixList) {
			if (tpl.startsWith(i))
				return true;
		}
		return false;
	}",Checks if the template contains a restricted prefix.
"public NormalizedUserProfile getUserProfileInfo(AccessToken accessTokenParam)
    {
        if(accessTokenParam == null || (accessTokenParam.getAccessToken() == null ||
                accessTokenParam.getAccessToken().trim().isEmpty()))
        {
            throw new FluidClientException(
                    ""Code must be provided."",
                    FluidClientException.ErrorCode.FIELD_VALIDATE);
        }

        try {
            String accessToken = accessTokenParam.getAccessToken();

            List<HeaderNameValue> headerListing = new ArrayList<HeaderNameValue>();

            headerListing.add(new HeaderNameValue(
                    NormalizedUserProfile.HeaderMapping.AUTHORIZATION,
                    ""Bearer ""+accessToken));

            return new NormalizedUserProfile(
                    this.getJson(true, WS.Path.Auth0.Version1.userInfo(),headerListing));
        }
        //
        catch (UnsupportedEncodingException e) {

            throw new FluidClientException(
                    ""Unable to Encode (Not Supported). ""+ e.getMessage(),
                    FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR);
        }
    }",Gets user profile info.
"public static java.sql.Date newDate() {
        return new java.sql.Date((System.currentTimeMillis() / DAY_MILLIS) * DAY_MILLIS);
    }",Creates a new date.
"public final void castExpression() throws RecognitionException {
		BaseDescr expr =null;

		try {
			// src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:521:5: ( ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN expr= unaryExpression | ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus )
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==LEFT_PAREN) ) {
				int LA54_1 = input.LA(2);
				if ( (synpred17_DRL5Expressions()) ) {
					alt54=1;
				}
				else if ( (synpred18_DRL5Expressions()) ) {
					alt54=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("""", 54, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("""", 54, 0, input);
				throw nvae;
			}

			switch (alt54) {
				case 1 :
					// src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:521:8: ( LEFT_PAREN primitiveType )=> LEFT_PAREN primitiveType RIGHT_PAREN expr= unaryExpression
					{
					match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression2593); if (state.failed) return;
					pushFollow(FOLLOW_primitiveType_in_castExpression2595);
					primitiveType();
					state._fsp--;
					if (state.failed) return;
					match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression2597); if (state.failed) return;
					pushFollow(FOLLOW_unaryExpression_in_castExpression2601);
					expr=unaryExpression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					// src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:522:8: ( LEFT_PAREN type )=> LEFT_PAREN type RIGHT_PAREN unaryExpressionNotPlusMinus
					{
					match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_castExpression2618); if (state.failed) return;
					pushFollow(FOLLOW_type_in_castExpression2620);
					type();
					state._fsp--;
					if (state.failed) return;
					match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_castExpression2622); if (state.failed) return;
					pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression2624);
					unaryExpressionNotPlusMinus();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}

		catch (RecognitionException re) {
		    throw re;
		}

		finally {
			// do for sure before leaving
		}
	}",Parses the expression
"@Override
    public void markInitialState() {

        super.markInitialState();
        Converter c = getConverter();
        if (c != null && c instanceof PartialStateHolder) {
            ((PartialStateHolder) c).markInitialState();
        }

    }",Override markInitialState to mark the initial state of the record.
"private Sha256Hash recursiveExtractHashes(int height, int pos, ValuesUsed used, List<Sha256Hash> matchedHashes) throws VerificationException {
        if (used.bitsUsed >= matchedChildBits.length*8) {
            // overflowed the bits array - failure
            throw new VerificationException(""PartialMerkleTree overflowed its bits array"");
        }
        boolean parentOfMatch = checkBitLE(matchedChildBits, used.bitsUsed++);
        if (height == 0 || !parentOfMatch) {
            // if at height 0, or nothing interesting below, use stored hash and do not descend
            if (used.hashesUsed >= hashes.size()) {
                // overflowed the hash array - failure
                throw new VerificationException(""PartialMerkleTree overflowed its hash array"");
            }
            Sha256Hash hash = hashes.get(used.hashesUsed++);
            if (height == 0 && parentOfMatch) // in case of height 0, we have a matched txid
                matchedHashes.add(hash);
            return hash;
        } else {
            // otherwise, descend into the subtrees to extract matched txids and hashes
            byte[] left = recursiveExtractHashes(height - 1, pos * 2, used, matchedHashes).getBytes(), right;
            if (pos * 2 + 1 < getTreeWidth(transactionCount, height-1)) {
                right = recursiveExtractHashes(height - 1, pos * 2 + 1, used, matchedHashes).getBytes();
                if (Arrays.equals(right, left))
                    throw new VerificationException(""Invalid merkle tree with duplicated left/right branches"");
            } else {
                right = left;
            }
            // and combine them before returning
            return combineLeftRight(left, right);
        }
    }",Recursive method to extract the hashes from the merkle tree.
"public AABBf setMax(float maxX, float maxY, float maxZ) {
        this.maxX = maxX;
        this.maxY = maxY;
        this.maxZ = maxZ;
        return this;
    }",Sets the maximum value of the AABBf.
"public IssueDto setComponentUuid(@Nullable String s) {
    checkArgument(s == null || s.length() <= 50, ""Value is too long for column ISSUES.COMPONENT_UUID: %s"", s);
    this.componentUuid = s;
    return this;
  }",Sets the value of the componentUuid column.
"public Object saveState(FacesContext context) {

        if (context == null) {
            throw new NullPointerException();
        }
        if (attachedObjects == null) {
            return null;
        }
        if (initialState) {
            Object[] attachedObjects = new Object[this.attachedObjects.size()];
            boolean stateWritten = false;
            for (int i = 0, len = attachedObjects.length; i < len; i++) {
                T attachedObject = this.attachedObjects.get(i);
                if (attachedObject instanceof StateHolder) {
                    StateHolder sh = (StateHolder) attachedObject;
                    if (!sh.isTransient()) {
                        attachedObjects[i] = sh.saveState(context);
                    }
                    if (attachedObjects[i] != null) {
                        stateWritten = true;
                    }
                }
            }
            return ((stateWritten) ? attachedObjects : null);
        } else {

            Object[] attachedObjects = new Object[this.attachedObjects.size()];
            for (int i = 0, len = attachedObjects.length; i < len; i++) {
                attachedObjects[i] = UIComponentBase.saveAttachedState(context, this.attachedObjects.get(i));
            }
            return (attachedObjects);
        }

    }",Save the state of this component.
"@Override
    public com.spatial4j.core.shape.Shape toSpatial4j(SpatialContext spatialContext) {
        return spatialContext.makePoint(longitude, latitude);
    }",Convert this object to a spatial 4j shape.
"private static int toAnsi(int red, int green, int blue)
    {
        // rescale to 0-5 range
        red = red * 6 / 256;
        green = green * 6 / 256;
        blue = blue * 6 / 256;

        return 16 + red * 36 + green * 6 + blue;
    }",Converts the RGB values to an ANSI value.
"private HttpOutboundServiceContextImpl getInterface(VirtualConnection inVC) {

        if (null == this.myInterface) {
            this.myInterface = new HttpOutboundServiceContextImpl((TCPConnectionContext) getDeviceLink().getChannelAccessor(), this, inVC, this.myChannel.getHttpConfig());
        }
        return this.myInterface;
    }",Gets the HttpOutboundServiceContextImpl.
"public static final int lastIndexOf(char toBeFound, char[] array,
			int startIndex, int endIndex)
	{
		for (int i = endIndex; --i >= startIndex;)
		{
			if (toBeFound == array[i])
			{
				return i;
			}
		}
		return -1;
	}",Gets the last index of toBeFound in the specified char array.
"public void upsert(Term term, Document document) {
        Log.debug(""Updating document %s with term %s"", document, term);
        try {
            indexWriter.updateDocument(term, document);
        } catch (IOException e) {
            Log.error(e, ""Error while updating document %s with term %s"", document, term);
            throw new RuntimeException(e);
        }
    }",Update a document in the cache.
"public  MaterialAccount getAccountAtCurrentPosition(int position) {

        if (position < 0 || position >= accountManager.size())
            throw  new RuntimeException(""Account Index Overflow"");

        return findAccountNumber(position);
    }",Get the account at the current position.
"@Override protected void resizeDynamicText() {
        double maxWidth = unitText.isVisible() ? width - size * 0.275 : width - size * 0.1;
        double fontSize = size * 0.24;
        valueText.setFont(Fonts.latoRegular(fontSize));
        if (valueText.getLayoutBounds().getWidth() > maxWidth) { Helper.adjustTextSize(valueText, maxWidth, fontSize); }
    }",Resize the dynamic text.
"public static void startTrack(final Object... args){
    if(isClosed){ return; }
    //--Create Record
    final int len = args.length == 0 ? 0 : args.length-1;
    final Object content = args.length == 0 ? """" : args[len];
    final Object[] tags = new Object[len];
    final StackTraceElement ste = getStackTrace();
    final long timestamp = System.currentTimeMillis();
    System.arraycopy(args,0,tags,0,len);
    //--Create Task
    final long threadID = Thread.currentThread().getId();
    final Runnable startTrack = new Runnable(){
      public void run(){
        assert !isThreaded || control.isHeldByCurrentThread();
        Record toPass = new Record(content,tags,depth,ste,timestamp);
        depth += 1;
        titleStack.push(args.length == 0 ? """" : args[len].toString());
        handlers.process(toPass, MessageType.START_TRACK, depth, toPass.timesstamp);
        assert !isThreaded || control.isHeldByCurrentThread();
      }
    };
    //--Run Task
    if(isThreaded){
      //(case: multithreaded)
      long threadId = Thread.currentThread().getId();
      attemptThreadControl( threadId, startTrack );
    } else {
      //(case: no threading)
      startTrack.run();
    }
  }",Start a record in a thread.
"private RegisteredCommand searchCommands(String cmdOwner, HttpMethod method, String uri,
                                             String query, Map<String, String> variableMap) {
        Map<HttpMethod, SortedSet<RegisteredCommand>> evalMap = getCmdEvalMap(cmdOwner);
        if (evalMap == null) {
            return null;
        }
        
        // Find the sorted command set for the given HTTP method.
        SortedSet<RegisteredCommand> cmdSet = evalMap.get(method);
        if (cmdSet == null) {
            return null;
        }
        
        // Split uri into a list of non-empty nodes.
        List<String> pathNodeList = new ArrayList<>();
        String[] pathNodes = uri.split(""/"");
        for (String pathNode : pathNodes) {
            if (pathNode.length() > 0) {
                pathNodeList.add(pathNode);
            }
        }
        
        // Attempt to match commands in this set in order.
        for (RegisteredCommand cmd : cmdSet) {
            if (cmd.matches(pathNodeList, query, variableMap)) {
                return cmd;
            }
        }
        return null;
    }",Search commands for a command that matches the query string.
"public EEnum getIfcControllerTypeEnum() {
		if (ifcControllerTypeEnumEEnum == null) {
			ifcControllerTypeEnumEEnum = (EEnum) EPackage.Registry.INSTANCE.getEPackage(Ifc2x3tc1Package.eNS_URI)
					.getEClassifiers().get(800);
		}
		return ifcControllerTypeEnumEEnum;
	}",Get the EEnum for the ifcControllerTypeEnum attribute.
"protected Object readValue (Class type, Class elementType, Class defaultType)
		throws YamlException, ParserException, TokenizerException {
		String tag = null, anchor = null;
		Event event = parser.peekNextEvent();

		switch (event.type) {
		case ALIAS:
			parser.getNextEvent();
			anchor = ((AliasEvent)event).anchor;
			Object value = anchors.get(anchor);
			if (value == null) throw new YamlReaderException(""Unknown anchor: "" + anchor);
			return value;
		case MAPPING_START:
		case SEQUENCE_START:
			tag = ((CollectionStartEvent)event).tag;
			anchor = ((CollectionStartEvent)event).anchor;
			break;
		case SCALAR:
			tag = ((ScalarEvent)event).tag;
			anchor = ((ScalarEvent)event).anchor;
			break;
		default:
		}

		return readValueInternal(this.chooseType(tag, defaultType, type), elementType, anchor);
	}","Reads a
	 object from the YAML."
"public void write(LangProfile langProfile, OutputStream outputStream) throws IOException {
		try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream, Charset.forName(""utf-8"")))) {
            writer.write(""{\""freq\"":{"");
            boolean first = true;
            for (Map.Entry<String, Integer> entry : langProfile.getFreq().entrySet()) {
                if (!first) {
                    writer.write(',');
                }
                writer.write('""');
                writer.write(entry.getKey());
                writer.write(""\"":"");
                writer.write(entry.getValue().toString());
                first = false;
            }
            writer.write(""},\""n_words\"":["");
            first = true;
            for (int nWord : langProfile.getNWords()) {
                if (!first) {
                    writer.write(',');
                }
                writer.write(Integer.toString(nWord));
                first = false;
            }
            writer.write(""],\""name\"":\"""");
            writer.write(langProfile.getName());
            writer.write(""\""}"");
            writer.flush();
        }
	}",Write the language profile to the output stream.
"public final ServiceTracker<T, ServletContextHelperElement> create(final Class<? extends T> trackedClass) {
		return new ServiceTracker<>(bundleContext, createFilter(bundleContext, trackedClass), this);
	}",Create a new service tracker for the specified class.
"protected XmlMappingException convertCastorException(XMLException ex, boolean marshalling) {
		if (ex instanceof ValidationException) {
			return new ValidationFailureException(""Castor validation exception"", ex);
		}
		else if (ex instanceof MarshalException) {
			if (marshalling) {
				return new MarshallingFailureException(""Castor marshalling exception"", ex);
			}
			else {
				return new UnmarshallingFailureException(""Castor unmarshalling exception"", ex);
			}
		}
		else {
			// fallback
			return new UncategorizedMappingException(""Unknown Castor exception"", ex);
		}
	}",Convert a Castor exception to an XMLMappingException.
"public double sim(DoubleVector v1, DoubleVector v2) {
        double dotProduct = VectorMath.dotProduct(v1, v2);
        return Math.pow(dotProduct + 1, degree);
    }",Compute the sim of two vectors.
"@Action(name = ""Customize Linux Guest"",
            outputs = {
                    @Output(Outputs.RETURN_CODE),
                    @Output(Outputs.RETURN_RESULT),
                    @Output(Outputs.EXCEPTION)
            },
            responses = {
                    @Response(text = Outputs.SUCCESS, field = Outputs.RETURN_CODE, value = Outputs.RETURN_CODE_SUCCESS,
                            matchType = MatchType.COMPARE_EQUAL, responseType = ResponseType.RESOLVED),
                    @Response(text = Outputs.FAILURE, field = Outputs.RETURN_CODE, value = Outputs.RETURN_CODE_FAILURE,
                            matchType = MatchType.COMPARE_EQUAL, responseType = ResponseType.ERROR, isOnFail = true)
            })
    public Map<String, String> customizeLinuxGuest(@Param(value = Inputs.HOST, required = true) String host,
                                                   @Param(value = PORT) String port,
                                                   @Param(value = PROTOCOL) String protocol,
                                                   @Param(value = USERNAME, required = true) String username,
                                                   @Param(value = PASSWORD, encrypted = true) String password,
                                                   @Param(value = TRUST_EVERYONE) String trustEveryone,
                                                   @Param(value = CLOSE_SESSION) String closeSession,

                                                   @Param(value = VM_NAME, required = true) String virtualMachineName,
                                                   @Param(value = COMPUTER_NAME, required = true) String computerName,
                                                   @Param(value = DOMAIN) String domain,
                                                   @Param(value = IP_ADDRESS) String ipAddress,
                                                   @Param(value = SUBNET_MASK) String subnetMask,
                                                   @Param(value = DEFAULT_GATEWAY) String defaultGateway,
                                                   @Param(value = UTC_CLOCK) String hwClockUTC,
                                                   @Param(value = TIME_ZONE) String timeZone,
                                                   @Param(value = VMWARE_GLOBAL_SESSION_OBJECT) GlobalSessionObject<Map<String, Connection>> globalSessionObject) {


        try {
            final HttpInputs httpInputs = new HttpInputs.HttpInputsBuilder()
                    .withHost(host)
                    .withPort(port)
                    .withProtocol(protocol)
                    .withUsername(username)
                    .withPassword(password)
                    .withTrustEveryone(defaultIfEmpty(trustEveryone, FALSE))
                    .withCloseSession(defaultIfEmpty(closeSession, TRUE))
                    .withGlobalSessionObject(globalSessionObject)
                    .build();

            final VmInputs vmInputs = new VmInputs.VmInputsBuilder().withVirtualMachineName(virtualMachineName).build();

            final GuestInputs guestInputs = new GuestInputs.GuestInputsBuilder()
                    .withComputerName(computerName)
                    .withDomain(domain)
                    .withIpAddress(ipAddress)
                    .withSubnetMask(subnetMask)
                    .withDefaultGateway(defaultGateway)
                    .withHwClockUTC(hwClockUTC)
                    .withTimeZone(timeZone)
                    .build();

            return new GuestService().customizeVM(httpInputs, vmInputs, guestInputs, false);
        } catch (Exception ex) {
            return OutputUtilities.getFailureResultsMap(ex);
        }

    }",Customize Linux Guest.
"public int getAttempts() {
        String attempts = this.properties.get(""attempts"");
        if (attempts == null) {
            attempts = ""0"";
        }

        return Integer.parseInt(attempts);
    }",Gets the value of the attempts property.
"private int ensureIndex(int key, boolean intType) {
        int index = -1;
        int firstDeleted = -1;
        int[] keys = this.keys;
        if (keys != null) {
            int fraction = key * A;
            index = fraction >>> (32 - power);
            int entry = keys[index];
            if (entry == key) { return index; }
            if (entry != EMPTY) {
                if (entry == DELETED) { firstDeleted = index; }
                // Search in table after first failed attempt
                int mask = (1 << power) - 1;
                int step = tableLookupStep(fraction, mask, power);
                int n = 0;
                do {
                    if (check) {
                        if (n >= occupiedCount) Kit.codeBug();
                        ++n;
                    }
                    index = (index + step) & mask;
                    entry = keys[index];
                    if (entry == key) { return index; }
                    if (entry == DELETED && firstDeleted < 0) {
                        firstDeleted = index;
                    }
                } while (entry != EMPTY);
            }
        }
        // Inserting of new key
        if (check && keys != null && keys[index] != EMPTY)
            Kit.codeBug();
        if (firstDeleted >= 0) {
            index = firstDeleted;
        }
        else {
            // Need to consume empty entry: check occupation level
            if (keys == null || occupiedCount * 4 >= (1 << power) * 3) {
                // Too litle unused entries: rehash
                rehashTable(intType);
                return insertNewKey(key);
            }
            ++occupiedCount;
        }
        keys[index] = key;
        ++keyCount;
        return index;
    }",Ensures that the key is in the table.
"@Override
	public int compareTo(final StorageSize that)
	{
		if (that == null)
			throw new NullPointerException(""Cannot compareTo a null value!"");

		return this.getBits().compareTo(that.getBits());
	}",Compares two StorageSize objects.
"public <X> X until(Callable<X> condition) {
    long end = clock.laterBy(timeout.in(MILLISECONDS));
    Exception lastException = null;

    while (true) {
      try {
        X toReturn = condition.call();

        if (toReturn != null && Boolean.class.equals(toReturn.getClass())) {
          if (Boolean.TRUE.equals(toReturn)) {
            return toReturn;
          }
        } else if (toReturn != null) {
          return toReturn;
        }
      } catch (Exception e) {
        lastException = propagateIfNotIgnored(e);
      }

      if (!clock.isNowBefore(end)) {
        String toAppend =
            (message == null) ? "" waiting for "" + condition.toString() : "": "" + message;

        String timeoutMessage = String.format(""Timed out after %d milliseconds%s"",
                                              timeout.in(MILLISECONDS), toAppend);
        throw timeoutException(timeoutMessage, lastException);
      }

      try {
        sleeper.sleep(interval);
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new WebDriverException(e);
      }
    }
  }",Waits until the condition returns true or timeout is reached.
"private int compareToReleaseMinor(GitVersion that) {
        if (this.containsReleaseMinor() && that.containsReleaseMinor())
            return compareToInt(this.getReleaseMinor(), that.getReleaseMinor());
        else if (!this.containsReleaseMinor() && !that.containsReleaseMinor())
            return SAME;
        else if (this.containsReleaseMinor() && !that.containsReleaseMinor())
            return LATER;
        else
            return PREVIOUS;
    }",Compare two GitVersion objects to determine the release minor version.
"@Nonnull
  public static String getPathWithinServletContext (@Nonnull final HttpServletRequest aHttpRequest)
  {
    ValueEnforcer.notNull (aHttpRequest, ""HttpRequest"");

    final String sRequestURI = getRequestURI (aHttpRequest);
    if (StringHelper.hasNoText (sRequestURI))
    {
      // Can e.g. happen for ""Request(GET //localhost:90/)""
      if (LOGGER.isDebugEnabled ())
        LOGGER.debug (""Having empty request URI '"" + sRequestURI + ""' from request "" + aHttpRequest);
      return ""/"";
    }

    // Always use the context path
    final String sContextPath = ServletContextPathHolder.getContextPath ();
    if (StringHelper.hasNoText (sContextPath) || !sRequestURI.startsWith (sContextPath))
      return sRequestURI;

    // Normal case: URI contains context path.
    final String sPath = sRequestURI.substring (sContextPath.length ());
    return sPath.length () > 0 ? sPath : ""/"";
  }",Get the path within the servlet context.
"public static IOException create(IOException exn)
  {
    if (exn.getClass().equals(IOException.class)
        || exn.getClass().equals(java.net.SocketException.class)
        || exn.getClass().getName().equals(""javax.net.ssl.SSLException""))
      return new SocketTimeoutException(exn);
    else
      return exn;
  }",Create an exception from an exception.
"public void marshall(DescribePipelineRequest describePipelineRequest, ProtocolMarshaller protocolMarshaller) {

        if (describePipelineRequest == null) {
            throw new SdkClientException(""Invalid argument passed to marshall(...)"");
        }

        try {
            protocolMarshaller.marshall(describePipelineRequest.getPipelineName(), PIPELINENAME_BINDING);
        } catch (Exception e) {
            throw new SdkClientException(""Unable to marshall request to JSON: "" + e.getMessage(), e);
        }
    }",marshalls the given request to the JSON - compatible parameter object.
"private void initDataDictionaryMap() {
        DataDictionary dd = rawPmml.getDataDictionary();
        if (dd != null) {
            dataDictionaryMap = new HashMap<>();
            for (DataField dataField : dd.getDataFields()) {
                PMMLDataField df = new PMMLDataField(dataField);
                dataDictionaryMap.put(df.getName(), df);
            }
        } else {
            throw new IllegalStateException(""BRMS-PMML requires a data dictionary section in the definition file"");
        }
    }",Initialize the data dictionary map.
"@Override
    public List readAll(final String tableName, Class clazz, EntityMetadata m, final List<Object> rowKey,
            List<String> relationNames, String... columns) throws IOException
    {
        Table hTable = gethTable(tableName);
        List<HBaseDataWrapper> results = ((HBaseReader) hbaseReader).loadAll(hTable, rowKey, null, columns);
        return onRead(m, null, hTable, results);
    }",Read all the n - v phrase.
"private void readAllImagesAndVariations(String root) {

        File basedir = new File(CmsImageLoader.getImageRepositoryPath() + root);
        visitImages(m_clonedCms, basedir);
        m_variations = Collections.unmodifiableMap(m_variations);
        m_sizes = Collections.unmodifiableMap(m_sizes);
        m_lengths = Collections.unmodifiableMap(m_lengths);

    }",Read all the images and variations from the given root.
"public ServiceFuture<List<SyncDatabaseIdPropertiesInner>> listSyncDatabaseIdsNextAsync(final String nextPageLink, final ServiceFuture<List<SyncDatabaseIdPropertiesInner>> serviceFuture, final ListOperationCallback<SyncDatabaseIdPropertiesInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSyncDatabaseIdsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<SyncDatabaseIdPropertiesInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<SyncDatabaseIdPropertiesInner>>> call(String nextPageLink) {
                    return listSyncDatabaseIdsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }",List database ids.
"public SDVariable eye(SDVariable rows, SDVariable cols, SDVariable batchDimension) {
        return eye(null, rows, cols, batchDimension);
    }",Eye operation with batch dimension
"public EthereumBlock readBlock() throws IOException, EthereumBlockReadException {
		ByteBuffer rawBlock = this.readRawBlock();
		if (rawBlock==null) {
			return null;
		}
		RLPObject blockObject =  EthereumUtil.rlpDecodeNextItem(rawBlock);
		if ((blockObject==null) || (!(blockObject instanceof RLPList))){
			throw new EthereumBlockReadException(""Invalid Ethereum Block: Not encoded RLPList"");
		}
		RLPList block = (RLPList)blockObject;
		// block header
		RLPList rlpHeader = (RLPList) block.getRlpList().get(0);
		// transactions
		RLPList rlpTransactions = (RLPList) block.getRlpList().get(1);
		// uncles
		RLPList rlpUncles =  (RLPList) block.getRlpList().get(2);
		//// create header object
		EthereumBlockHeader ethereumBlockHeader = parseRLPBlockHeader(rlpHeader);
		List<EthereumTransaction> ethereumTransactions = parseRLPTransactions(rlpTransactions);
		List<EthereumBlockHeader> uncleHeaders = parseRLPUncleHeaders(rlpUncles);	
		return new EthereumBlock(ethereumBlockHeader,ethereumTransactions,uncleHeaders);
	}",Read a block from the stream.
"public void add(final ClassLoader classLoader) {
        if (classLoader == null) {
            return;
        }
        if (added.add(classLoader)) {
            final ClassLoaderHandlerRegistryEntry entry = getRegistryEntry(classLoader);
            if (entry != null) {
                classLoaderOrder.add(new SimpleEntry<>(classLoader, entry));
            }
        }
    }",Add a class loader to the registry.
"@SuppressWarnings(""unchecked"")
	@Override
	public EList<IfcObjectDefinition> getRelatedObjects() {
		return (EList<IfcObjectDefinition>) eGet(Ifc4Package.Literals.IFC_REL_ASSIGNS__RELATED_OBJECTS, true);
	}",Gets the list of related objects.
"public Yasson doWith(final Consumer<JsonbConfig> configurer) {
    requireNonNull(configurer, ""Configurer callback is required."");
    this.configurer = (jsonConfig, conf) -> configurer.accept(jsonConfig);
    return this;
  }",Configure the object with the given configurer.
"@NullSafe
  public static String toLowerCase(String value) {
    return value != null ? value.toLowerCase() : null;
  }",Returns the value of the CID   .
"public SIBusMessage nextLocked()
      throws SISessionUnavailableException, SISessionDroppedException,
             SIConnectionUnavailableException, SIConnectionDroppedException,
             SIResourceException, SIConnectionLostException, 
             SIErrorException
   {
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc,""nextLocked"");
      JsMessage retMsg = null;
      
      synchronized(lmeOperationMonitor)
      {
         checkValid();   
         
         // At this point we look at each item in the array up to end of the array for the next
         // non-null item. This is because some points in the array may be null if they have been
         // deleted or unlocked.
         while (nextIndex != messages.length)
         {
            retMsg = messages[nextIndex];
            nextIndex++;
            
            if (retMsg != null) break;
         }
      }
      
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc,""nextLocked"", retMsg);
      return retMsg;
	}",This method is called by the SIBSessionImpl to get the next message from the list of messages that have been locked.
"public static String createTimestampAntiLeechUrl(
            String host, String fileName, final StringMap queryStringMap, String encryptKey, long deadline)
            throws QiniuException {
        URL urlObj = null;
        try {
            String urlToSign = null;
            if (queryStringMap != null && queryStringMap.size() > 0) {
                List<String> queryStrings = new ArrayList<String>();
                for (Map.Entry<String, Object> entry : queryStringMap.map().entrySet()) {
                    StringBuilder queryStringBuilder = new StringBuilder();
                    queryStringBuilder.append(URLEncoder.encode(entry.getKey(), ""utf-8""));
                    queryStringBuilder.append(""="");
                    queryStringBuilder.append(URLEncoder.encode(entry.getValue().toString(), ""utf-8""));
                    queryStrings.add(queryStringBuilder.toString());
                }
                urlToSign = String.format(""%s/%s?%s"", host, fileName, StringUtils.join(queryStrings, ""&""));
            } else {
                urlToSign = String.format(""%s/%s"", host, fileName);
            }

            urlObj = new URL(urlToSign);
        } catch (Exception e) {
            throw new QiniuException(e, ""timestamp anti leech failed"");
        }
        return createTimestampAntiLeechUrl(urlObj, encryptKey, deadline);
    }",Create timestamp anti leech url.
"public void writeClosePortal(String portal) {
    ensureBuffer();
    int pos = out.writerIndex();
    out.writeByte(CLOSE);
    out.writeInt(0);
    out.writeByte('P'); // 'S' to close a prepared statement or 'P' to close a portal
    Util.writeCStringUTF8(out, portal);
    out.setInt(pos + 1, out.writerIndex() - pos - 1);
  }",Write a close portal.
"@Override
    public void attachView(@NonNull V view) {
        presenterDestroyed = false;
        viewRef = new WeakReference<V>(view);
        runQueuedActions();
    }",Attaches a view to the presenter.
"public static <T> List<T> reverse(List<T> list) {
		Collections.reverse(list);
		return list;
	}",Returns a reversed view of the specified list.
"public java.lang.String getVariableName() {
    java.lang.Object ref = variableName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      variableName_ = s;
      return s;
    }
  }",Gets the name of the variable.
"protected void initMaxCellWidth() {

        m_maxCellWidth = m_opener.getOffsetWidth() - 2 /*border*/;
        for (Widget widget : m_selector) {
            if (widget instanceof A_CmsSelectCell) {
                int cellWidth = ((A_CmsSelectCell)widget).getRequiredWidth();
                if (cellWidth > m_maxCellWidth) {
                    m_maxCellWidth = cellWidth;
                }
            }
        }
    }",Initialize the max cell width.
"public static OrderBook adaptOrderBook(EXXOrderbook exxOrderbook, CurrencyPair currencyPair) {
    List<LimitOrder> asks = new ArrayList<LimitOrder>();
    List<LimitOrder> bids = new ArrayList<LimitOrder>();

    for (BigDecimal[] exxAsk : exxOrderbook.getAsks()) {
      asks.add(new LimitOrder(OrderType.ASK, exxAsk[1], currencyPair, null, null, exxAsk[0]));
    }

    for (BigDecimal[] exxBid : exxOrderbook.getBids()) {
      bids.add(new LimitOrder(OrderType.BID, exxBid[1], currencyPair, null, null, exxBid[0]));
    }

    return new OrderBook(new Date(), asks, bids);
  }",Adapts an EXXOrderbook to an OrderBook Object
"public boolean waitForFragmentById(int id, int timeout){
		if(config.commandLogging){
			Log.d(config.commandLoggingTag, ""waitForFragmentById(""+id+"", ""+timeout+"")"");
		}
		
		return waiter.waitForFragment(null, id, timeout);
	}",Waits for a Fragment matching the specified ID.
"public static void debug(String format, Object... arguments) {
		debug(LogFactory.get(CallerUtil.getCallerCaller()), format, arguments);
	}",Logs a message at the DEBUG level.
"private <T> Iterator<T> getAll(String entityType, IUnmarshaller<T> unmarshaller) throws StorageException {
        String query = matchAllQuery();
        return getAll(entityType, unmarshaller, query);
    }",Returns an iterator of all the entities of the specified type.
"private void updateOneConfFile(String fileName, DisconfCenterFile disconfCenterFile) throws Exception {

        if (disconfCenterFile == null) {
            throw new Exception(""cannot find disconfCenterFile "" + fileName);
        }

        String filePath = fileName;
        Map<String, Object> dataMap = new HashMap<String, Object>();

        //
        // 开启disconf才需要远程下载, 否则就本地就好
        //
        if (DisClientConfig.getInstance().ENABLE_DISCONF) {

            //
            // 下载配置
            //
            try {

                String url = disconfCenterFile.getRemoteServerUrl();
                filePath = fetcherMgr.downloadFileFromServer(url, fileName, disconfCenterFile.getFileDir());

            } catch (Exception e) {

                //
                // 下载失败了, 尝试使用本地的配置
                //

                LOGGER.error(e.toString(), e);
                LOGGER.warn(""using local properties in class path: "" + fileName);

                // change file path
                filePath = fileName;
            }
            LOGGER.debug(""download ok."");
        }

        try {
            dataMap = FileTypeProcessorUtils.getKvMap(disconfCenterFile.getSupportFileTypeEnum(),
                    disconfCenterFile.getFilePath());
        } catch (Exception e) {
            LOGGER.error(""cannot get kv data for "" + filePath, e);
        }

        //
        // 注入到仓库中
        //
        disconfStoreProcessor.inject2Store(fileName, new DisconfValue(null, dataMap));
        LOGGER.debug(""inject ok."");

        //
        // 开启disconf才需要进行watch
        //
        if (DisClientConfig.getInstance().ENABLE_DISCONF) {
            //
            // Watch
            //
            DisConfCommonModel disConfCommonModel = disconfStoreProcessor.getCommonModel(fileName);
            if (watchMgr != null) {
                watchMgr.watchPath(this, disConfCommonModel, fileName, DisConfigTypeEnum.FILE,
                        GsonUtils.toJson(disconfCenterFile.getKV()));
                LOGGER.debug(""watch ok."");
            } else {
                LOGGER.warn(""cannot monitor {} because watch mgr is null"", fileName);
            }
        }
    }",update one conf file
"@Override
    public ResendContactReachabilityEmailResult resendContactReachabilityEmail(ResendContactReachabilityEmailRequest request) {
        request = beforeClientExecution(request);
        return executeResendContactReachabilityEmail(request);
    }",Resends an email contact reachability for an app.
"public static void setValue(ExpressionAccessor expression, OgnlContext context,
                                Object root, Object value)
    {
        expression.set(context, root, value);
    }",Set the value of a CGNLCTYPE.
"@Override
    public ScheduledEntry<K, V> get(K key) {
        synchronized (mutex) {
            if (scheduleType.equals(ScheduleType.FOR_EACH)) {
                return getByCompositeKey(key);
            }
            Integer second = secondsOfKeys.get(key);
            if (second != null) {
                Map<Object, ScheduledEntry<K, V>> entries = scheduledEntries.get(second);
                if (entries != null) {
                    return entries.get(key);
                }
            }
            return null;
        }
    }",Get an entry from the map.
"static int makeKey(int center, int subcenter, int version) {
    if (center < 0) center = 255;
    if (subcenter < 0) subcenter = 255;
    if (version < 0) version = 255;
    return center * 1000 * 1000 + subcenter * 1000 + version;
  }",Make a key from the center subcenter and version.
"public ServiceFuture<DenyAssignmentInner> getAsync(String scope, String denyAssignmentId, final ServiceCallback<DenyAssignmentInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(scope, denyAssignmentId), serviceCallback);
    }",Deny an App Service Environment. Deny an App Service Environment.
"public ModelAndView getRuleNode(String surt) throws URIException {
        return new ModelAndView(view, ""object"", ruleDao.getRulesWithExactSurt(surt));        
    }",Get the rule node for a given SURT
"public static ComputationGraphSpace fromYaml(String yaml) {
        try {
            return YamlMapper.getMapper().readValue(yaml, ComputationGraphSpace.class);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }",Get a ComputationGraphSpace from a YAML string.
"private int[] hiddenIndices(boolean[] disclosure) {
        if (disclosure == null) {
            throw new IllegalArgumentException(""cannot compute hidden indices of null disclosure"");
        }
        List<Integer> hiddenIndicesList = new ArrayList<>();
        for (int i = 0; i < disclosure.length; i++) {
            if (!disclosure[i]) {
                hiddenIndicesList.add(i);
            }
        }
        int[] hiddenIndices = new int[hiddenIndicesList.size()];
        for (int i = 0; i < hiddenIndicesList.size(); i++) {
            hiddenIndices[i] = hiddenIndicesList.get(i);
        }

        return hiddenIndices;
    }",Compute hidden indices of a set of boolean arrays.
"public static Builder builder() {
    return new AutoValue_OffsetPaginationConfiguration.Builder()
        .setDefaultOffset(0L)
        .setDefaultLimit(20)
        .setMaxLimit(100)
        .setLimitFieldName(""limit"")
        .setOffsetFieldName(""offset"")
        .setAllowZeroLimit(false);
  }",Create a builder for a CRUD page.
"@Override
    public Request<DescribeAddressesRequest> getDryRunRequest() {
        Request<DescribeAddressesRequest> request = new DescribeAddressesRequestMarshaller().marshall(this);
        request.addParameter(""DryRun"", Boolean.toString(true));
        return request;
    }",Returns a request configured with additional parameters to indicate whether to delete the resource.
"private DatanodeDescriptor[] chooseTargetF4(
      String fileName,
      int numOfReplicas,
      DatanodeDescriptor writer,
      List<DatanodeDescriptor> chosenNodes,
      List<Node> exclNodes,
      long blocksize) {
    FSNamesystem.LOG.info(""F4: F4 policy invoked for file: "" + fileName +
      "", with replica count: "" + numOfReplicas);
    // If replica>1 then just default back to RAID
    if (numOfReplicas > 1) {
      return super.chooseTarget(
        numOfReplicas, writer, chosenNodes, exclNodes, blocksize);
    }
    FileInfo info;
    LocatedBlocks blocks;
    int blockIndex = -1;
    try {
      blocks = this.namesystem.getBlockLocations(fileName, 0, Long.MAX_VALUE);
      info = getFileInfo(null, fileName);
      blockIndex = blocks.getLocatedBlocks().size();
    } catch (IOException e) {
      FSNamesystem.LOG.error(
        ""F4: Error happened when calling getFileInfo/getBlockLocations"");
      return super.chooseTarget(
        fileName, numOfReplicas, writer, chosenNodes, exclNodes, blocksize);
    }
    FSNamesystem.LOG.info(
      ""F4: The file: "" + fileName + "" has a type: "" + info.type);
    HashMap<String, HashSet<Node>> rackToHosts =
      new HashMap<String, HashSet<Node>>();
    try {

      // First handle the ""localdir"" case
      if (isLocal(fileName)) {
        return chooseLocalTarget(fileName,
                                 writer,
                                 blocks,
                                 exclNodes,
                                 chosenNodes,
                                 blocksize);
      }

      // For a data file, the locations of its own blocks as the reference
      int stripeIndex = -1;
      String srcFileName = null;
      String parityFileName = null;
      int parityLength = 0;
      int stripeLength = 0;
      switch (info.type) {
        case NOT_RAID:
        case SOURCE:
          srcFileName = fileName;
          parityFileName = null;
          stripeLength = this.stripeLen;
          stripeIndex = blockIndex / stripeLength;
          break;
        case TEMP_PARITY:
        case PARITY:
          srcFileName = getSourceFileFromParity(fileName, info);
          parityFileName = fileName;
          if (srcFileName == null ||
              this.namesystem.getHdfsFileInfo(srcFileName) == null) {
            srcFileName = null;
            FSNamesystem.LOG.error(""F4: "" + srcFileName + "" does not exist"");
          }
          Codec c = getCodec(fileName);
          parityLength = c.parityLength;
          stripeLength = c.stripeLength;
          stripeIndex = blockIndex / parityLength;
          break;
        default:
          return super.chooseTarget(
            numOfReplicas, writer, chosenNodes, exclNodes, blocksize);
      }

      rackToHosts = getRackToHostsMapForStripe(srcFileName,
                                               parityFileName,
                                               stripeLength,
                                               parityLength,
                                               stripeIndex);
    } catch (IOException e) {
      FSNamesystem.LOG.error(""F4: Error happened when calling ""
        + ""getParityFile/getSourceFileFromParity"");
      return super.chooseTarget(
          numOfReplicas, writer, chosenNodes, exclNodes, blocksize);
    } catch (NotEnoughReplicasException e) {
      FSNamesystem.LOG.error(""F4: Error happend when calling ""
        + ""getCompanionSourceNodes/getSourceFile"");
      return super.chooseTarget(
          numOfReplicas, writer, chosenNodes, exclNodes, blocksize);
    }
    return chooseTargetOnNewFailureDomain(fileName,
                                          writer,
                                          chosenNodes,
                                          exclNodes,
                                          rackToHosts,
                                          blocksize);
  }",F4 policy implementation
"public static String stringifyAliasesParameters(Map<Byte, AbstractType<?>> aliases)
    {
        StringBuilder sb = new StringBuilder();
        sb.append('(');
        Iterator<Map.Entry<Byte, AbstractType<?>>> iter = aliases.entrySet().iterator();
        if (iter.hasNext())
        {
            Map.Entry<Byte, AbstractType<?>> entry = iter.next();
            sb.append((char)(byte)entry.getKey()).append(""=>"").append(entry.getValue());
        }
        while (iter.hasNext())
        {
            Map.Entry<Byte, AbstractType<?>> entry = iter.next();
            sb.append(',').append((char)(byte)entry.getKey()).append(""=>"").append(entry.getValue());
        }
        sb.append(')');
        return sb.toString();
    }",Method stringifyAliasesParameters.
"@Override
    public void to(final NodeDescriptor descriptor, final OutputStream output) throws DescriptorExportException,
        IllegalArgumentException {
        // Precondition checks
        if (descriptor == null) {
            throw new IllegalArgumentException(""descriptor must be specified"");
        }
        if (output == null) {
            throw new IllegalArgumentException(""stream must be specified"");
        }

        // Get the root node
        final Node root = descriptor.getRootNode();

        // Delegate
        this.to(root, output);
    }",Export the XML to an OutputStream.
"private static Document getDocument(URL pathToPersistenceXml) throws InvalidConfigurationException
    {
        InputStream is = null;
        Document xmlRootNode = null;

        try
        {
            if (pathToPersistenceXml != null)
            {
                URLConnection conn = pathToPersistenceXml.openConnection();
                conn.setUseCaches(false); // avoid JAR locking on Windows and
                                          // Tomcat.
                is = conn.getInputStream();
            }

            if (is == null)
            {
                throw new IOException(""Failed to obtain InputStream from url: "" + pathToPersistenceXml);
            }

            xmlRootNode = parseDocument(is);
            validateDocumentAgainstSchema(xmlRootNode);
        }
        catch (IOException e)
        {
            throw new InvalidConfigurationException(e);
        }
        finally
        {
            if (is != null)
            {
                try
                {
                    is.close();
                }
                catch (IOException ex)
                {
                    log.warn(""Input stream could not be closed after parsing persistence.xml, caused by: {}"", ex);
                }
            }
        }

        return xmlRootNode;
    }",Gets the XML document from the specified URL.
"public static boolean isTel(String value) {
        String check = ""^\\d{3,4}-?\\d{7,9}$"";
        return match(check, Pattern.CASE_INSENSITIVE, value);
    }",Checks if the given value is a tel number.
"public void updateVolume(int volumeValue) {
        if (null != dialog && dialog.isShowing()) {
            int index = volumeValue / 600;
            if (index >= volumes.length - 1) {
                index = volumes.length - 1;
            }
            mImageView.setImageResource(volumes[index]);
        }
    }",Update the image resource of the image.
"protected Service restoreAuthenticationRequestInContext(final RequestContext requestContext,
                                                            final J2EContext webContext,
                                                            final String clientName) {
        val logoutEndpoint = isLogoutRequest(webContext.getRequest());
        if (logoutEndpoint) {
            return null;
        } else {
            try {
                val client = (BaseClient<Credentials, CommonProfile>) this.clients.findClient(clientName);
                return delegatedClientWebflowManager.retrieve(requestContext, webContext, client);
            } catch (final Exception e) {
                LOGGER.error(e.getMessage(), e);
            }
            throw new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE, ""Service unauthorized"");
        }
    }",Restore authentication request in context.
"public static Type getType(final Class<?> clazz) {
    if (clazz.isPrimitive()) {
      if (clazz == Integer.TYPE) {
        return INT_TYPE;
      } else if (clazz == Void.TYPE) {
        return VOID_TYPE;
      } else if (clazz == Boolean.TYPE) {
        return BOOLEAN_TYPE;
      } else if (clazz == Byte.TYPE) {
        return BYTE_TYPE;
      } else if (clazz == Character.TYPE) {
        return CHAR_TYPE;
      } else if (clazz == Short.TYPE) {
        return SHORT_TYPE;
      } else if (clazz == Double.TYPE) {
        return DOUBLE_TYPE;
      } else if (clazz == Float.TYPE) {
        return FLOAT_TYPE;
      } else if (clazz == Long.TYPE) {
        return LONG_TYPE;
      } else {
        throw new AssertionError();
      }
    } else {
      return getType(getDescriptor(clazz));
    }
  }",Gets the type of the given class.
"public void execute()
        throws MojoExecutionException, MojoFailureException
    {
        if ( isSkip() )
        {
            getLog().info( ""skipping execute as per configuration"" );
            return;
        }
        if ( killAfter != -1 )
        {
            getLog().warn( ""Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6."" );
        }

        if ( null == arguments )
        {
            arguments = new String[0];
        }

        if ( getLog().isDebugEnabled() )
        {
            StringBuffer msg = new StringBuffer( ""Invoking : "" );
            msg.append( mainClass );
            msg.append( "".main("" );
            for ( int i = 0; i < arguments.length; i++ )
            {
                if ( i > 0 )
                {
                    msg.append( "", "" );
                }
                msg.append( arguments[i] );
            }
            msg.append( "")"" );
            getLog().debug( msg );
        }

        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup( mainClass /* name */ );
        Thread bootstrapThread = new Thread( threadGroup, new Runnable()
        {
            public void run()
            {
                int sepIndex = mainClass.indexOf( '/' );

                final String bootClassName;
                if ( sepIndex >= 0 )
                {
                    bootClassName = mainClass.substring( sepIndex + 1 );
                }
                else 
                {
                    bootClassName = mainClass;
                }
                
                try
                {
                    Class<?> bootClass = Thread.currentThread().getContextClassLoader().loadClass( bootClassName );
                    
                    MethodHandles.Lookup lookup = MethodHandles.lookup();

                    MethodHandle mainHandle =
                        lookup.findStatic( bootClass, ""main"",
                                                 MethodType.methodType( void.class, String[].class ) );
                    
                    mainHandle.invoke( arguments );
                }
                catch ( IllegalAccessException e )
                { // just pass it on
                    Thread.currentThread().getThreadGroup().uncaughtException( Thread.currentThread(),
                                                                               new Exception( ""The specified mainClass doesn't contain a main method with appropriate signature."",
                                                                                              e ) );
                }
                catch ( InvocationTargetException e )
                { // use the cause if available to improve the plugin execution output
                   Throwable exceptionToReport = e.getCause() != null ? e.getCause() : e;
                   Thread.currentThread().getThreadGroup().uncaughtException( Thread.currentThread(), exceptionToReport );
                }
                catch ( Throwable e )
                { // just pass it on
                    Thread.currentThread().getThreadGroup().uncaughtException( Thread.currentThread(), e );
                }
            }
        }, mainClass + "".main()"" );
        bootstrapThread.setContextClassLoader( getClassLoader() );
        setSystemProperties();

        bootstrapThread.start();
        joinNonDaemonThreads( threadGroup );
        // It's plausible that spontaneously a non-daemon thread might be created as we try and shut down,
        // but it's too late since the termination condition (only daemon threads) has been triggered.
        if ( keepAlive )
        {
            getLog().warn( ""Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6."" );
            waitFor( 0 );
        }

        if ( cleanupDaemonThreads )
        {

            terminateThreads( threadGroup );

            try
            {
                threadGroup.destroy();
            }
            catch ( IllegalThreadStateException e )
            {
                getLog().warn( ""Couldn't destroy threadgroup "" + threadGroup, e );
            }
        }

        if ( originalSystemProperties != null )
        {
            System.setProperties( originalSystemProperties );
        }

        synchronized ( threadGroup )
        {
            if ( threadGroup.uncaughtException != null )
            {
                throw new MojoExecutionException( ""An exception occured while executing the Java class. ""
                    + threadGroup.uncaughtException.getMessage(), threadGroup.uncaughtException );
            }
        }

        registerSourceRoots();
    }",Execute the CRA - 2A application.
"protected ToolStrip buildTools() {
        ToolStrip tools = new ToolStrip();
        tools.addToolButtonRight(new ToolButton(Console.CONSTANTS.common_label_add(), new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                onAdd();
            }
        }));
        tools.addToolButtonRight(new ToolButton(Console.CONSTANTS.common_label_delete(), new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                onRemove(selectionModel.getSelectedObject().getName());
            }
        }));
        return tools;
    }",Build the tools.
"public static Integer versionCompareNumerically(String str1, String str2) {
        String[] vals1 = str1.split(""\\."");
        String[] vals2 = str2.split(""\\."");
        int i = 0;
        // set index to first non-equal ordinal or length of shortest version string
        while (i < vals1.length && i < vals2.length && vals1[i].equals(vals2[i])) {
            i++;
        }
        try {
            // compare first non-equal ordinal number
            if (i < vals1.length && i < vals2.length) {
                int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
                return Integer.signum(diff);
            }
            // the strings are equal or one string is a substring of the other
            // e.g. ""1.2.3"" = ""1.2.3"" or ""1.2.3"" < ""1.2.3.4""
            else {
                return Integer.signum(vals1.length - vals2.length);
            }
        } catch (NumberFormatException e) {
            // Possibly there are different versions of the app in the store, so we can't check.
            return 0;
        }
    }",Compare two strings in a numerically - compatible manner.
"protected void initCache(ClassTraversal traversal) {
    if (m_CacheNames == null)
      m_CacheNames = new HashMap<>();
    if (m_CacheClasses == null)
      m_CacheClasses = new HashMap<>();
    if (m_BlackListed == null)
      m_BlackListed = new HashSet<>();
    if (m_Cache == null)
      m_Cache = newClassCache(traversal);
  }",Initialize the cache.
"private static List<SerialRow> assembleRowsListFromRowsMapping(
			final List<SerialRow> all, final List<SerialRow> current) {
		List<SerialRow> list;
		if (all == null) {
			list = new ArrayList<>();
			list.addAll(current);
		} else {
			list = all;
			for (SerialRow row : current) {
				if (!all.contains(row)) {
					list.add(row);
				}
			}
		}
		return list;
	}",Assemble rows list from rows mapping.
"@NotNull
    public CommandExecutor build() {
        return new DefaultCommandExecutor(
                logger!=null ? logger : defaultLogger,
                cache!=null ? cache : new ExecutorCache(),
                extensions==null ? Collections.<ModeExtension>emptyList() : extensions
        );
    }",Build a CRID    command executor.
"protected List<Team> updateTeamInformation(FeatureCollector collector) {
        long projectDataStart = System.currentTimeMillis();
        List<Team> teams = featureSettings.isJiraBoardAsTeam() ? jiraClient.getBoards() : jiraClient.getTeams();
        //Add or update teams that we got from api
        teams.forEach(newTeam -> {
            String teamId = newTeam.getTeamId();
            newTeam.setCollectorId(collector.getId());
            LOGGER.info(String.format(""Adding %s:%s-%s"", collector.getMode(), teamId, newTeam.getName()));
            Team existing = teamRepository.findByTeamId(teamId);
            if (existing == null) {
                teamRepository.save(newTeam);
            } else {
                newTeam.setId(existing.getId());
                teamRepository.save(newTeam);
            }
        });
        log(collector.getMode() + "" Data Collected. Added "", projectDataStart, teams.size());
        projectDataStart = System.currentTimeMillis();

        // Delete the ones that are gone from JIRA
        List<Team> existingTeams = teamRepository.findByCollectorId(collector.getId());
        Set<String> newTeamIds = teams.stream().map(Team::getTeamId).collect(Collectors.toSet());
        Set<Team> toDelete = existingTeams.stream().filter(e -> !newTeamIds.contains(e.getTeamId())).collect(Collectors.toSet());

        if (!CollectionUtils.isEmpty(toDelete)) {
            toDelete.forEach(td -> {
                LOGGER.info(String.format(""Deleting %s:%s-%s"", collector.getMode(), td.getTeamId(), td.getName()));
            });
            teamRepository.delete(toDelete);
            log(collector.getMode() + "" Data Collected. Deleted "", projectDataStart, toDelete.size());
        }
        return teams;
    }",Update the team information from JIRA
"private static double contClassicLB(final double numSamplesF, final double theta,
      final double numSDev) {
    final double nHat = (numSamplesF - 0.5) / theta;
    final double b = numSDev * Math.sqrt((1.0 - theta) / theta);
    final double d  = 0.5 * b * Math.sqrt((b * b) + (4.0 * nHat));
    final double center = nHat + (0.5 * (b * b));
    return (center - d);
  }",Continuous LB.
"@Override
    public void register(BindingRegisterContext<JsonArray> ctx) throws SQLException {
        ctx.statement().registerOutParameter(ctx.index(), Types.VARCHAR);
    }",Override this to register the variable char type.
"protected Date getFailureInRangeCutOffDate() {
        val cutoff = ZonedDateTime.now(ZoneOffset.UTC).minusSeconds(configurationContext.getFailureRangeInSeconds());
        return DateTimeUtils.timestampOf(cutoff);
    }",Gets failure in range cut off date.
"public final void mFROM() throws RecognitionException {
		try {
			int _type = FROM;
			int _channel = DEFAULT_TOKEN_CHANNEL;
			// hql.g:29:6: ( 'from' )
			// hql.g:29:8: 'from'
			{
			match(""from""); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally {
			// do for sure before leaving
		}
	}",start INSIDE FROM
"@Override
	public Object setChild(final String key, final Controller<M, V> controller)
	{
		if (null != controller.getParent())
		{
			// controller.getParent().re
		}
		return children.put(key, controller);
	}",Sets the child.
"private boolean doesIndexExistsiSeries(Connection con, String indexName) {
        if (com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.isLoggable(Level.FINE)) {
            LoggingUtil.SESSION_LOGGER_WAS.entering(methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES]);
        }
        boolean indexExists_iSeries = false;

        //Introduce noQualifiertblName and set it to ""SESSIONS"" instead of using tableName since tableName is set to
        //qualifierName.tableName which is different from the one using in iSeries platform
        String sysIndexes = null, sysKeys = null, noQualifiertblName = ""SESSIONS"", qualifierName = null, sqlQueryIndex = null, sqlQueryCol = null, returnIndexName = null, index_colNames = null, schemaSeparator = ""."";

        PreparedStatement ps = null, ps1 = null;
        ResultSet rs = null, rs1 = null;
        int counter = 0;

        sysIndexes = ""QSYS2"".concat(schemaSeparator).concat(""sysindexes"");
        sysKeys = ""QSYS2"".concat(schemaSeparator).concat(""syskeys"");

        //Keep the following line for future reference
        //SELECT INDEX_NAME FROM QSYS2.SYSINDEXES  WHERE INDEX_NAME='SESS_INDEX' AND TABLE_NAME='SESSIONS'
        //AND IS_UNIQUE='U' AND TABLE_SCHEMA='KPW51BSSSN'FOR READ ONLY
        sqlQueryIndex = ""select index_name from "" + sysIndexes + "" where Index_Name = '""
                        + indexName.toUpperCase() + ""' and "" + ""Table_Name = '"" + noQualifiertblName
                        + ""' and IS_UNIQUE = 'U'"";

        //Keep the following line for future reference
        //SELECT COLUMN_NAME FROM qsys2.SYSKEYS  WHERE INDEX_NAME='SESS_INDEX' AND INDEX_SCHEMA='KPW51BSSSN'
        sqlQueryCol = ""select COLUMN_NAME from "" + sysKeys +
                      "" where INDEX_NAME = '"" + indexName.toUpperCase() + ""'"";

        if (collectionName != null) {
            sqlQueryIndex += "" and table_schema = '"" + collectionName.toUpperCase() + ""'"";
            sqlQueryCol += "" and index_schema = '"" + collectionName.toUpperCase() + ""'"";
        }
        sqlQueryIndex += "" for read only"";
        sqlQueryCol += "" for read only"";

        if (com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.isLoggable(Level.FINE)) {
            LoggingUtil.SESSION_LOGGER_WAS.logp(Level.FINE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""sqlQueryIndex: "" + sqlQueryIndex);
            LoggingUtil.SESSION_LOGGER_WAS.logp(Level.FINE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""sqlQueryCol: "" + sqlQueryCol);
        }

        //checking if the index exists first
        try {
            ps = con.prepareStatement(sqlQueryIndex);
            rs = ps.executeQuery();

            if (rs.next()) { //ResultSet returning the possible SESS_INDEX
                returnIndexName = rs.getString(1);
                if (returnIndexName != null) {
                    if (returnIndexName.indexOf(indexName.toUpperCase()) != -1) {
                        if (com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.isLoggable(Level.FINE)) {
                            LoggingUtil.SESSION_LOGGER_WAS.logp(Level.FINE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""index: "" + returnIndexName + "" exists"");
                        }
                        indexExists_iSeries = true;
                    } else if (com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.isLoggable(Level.FINE)) {
                        LoggingUtil.SESSION_LOGGER_WAS.logp(Level.FINE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""index: "" + returnIndexName + "" does not exist"");
                    }
                }
            } else {
                if (com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.isLoggable(Level.FINE)) {
                    LoggingUtil.SESSION_LOGGER_WAS.logp(Level.FINE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""ResultSet is null"");
                }
            }
        } catch (Throwable th) {
            LoggingUtil.SESSION_LOGGER_WAS.logp(Level.SEVERE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""CommonMessage.exception"", th);
        } finally {
            if (rs != null) {
                closeResultSet(rs);
            }
            if (ps != null) {
                closeStatement(ps);
            }
        }
        //If the session index exists, we will check if the index definition is
        //what the session manager would have created
        if (indexExists_iSeries) {
            try {
                ps1 = con.prepareStatement(sqlQueryCol);
                rs1 = ps1.executeQuery();
                while (rs1.next()) {
                    String extractedColumn = rs1.getString(1);
                    if (extractedColumn != null) {
                        if (com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.isLoggable(Level.FINE)) {
                            LoggingUtil.SESSION_LOGGER_WAS.logp(Level.FINE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""extractedColumn : "" + extractedColumn);
                        }
                        if ((extractedColumn.indexOf(idCol.toUpperCase()) != -1) ||
                                (extractedColumn.indexOf(propCol.toUpperCase()) != -1) ||
                                   (extractedColumn.indexOf(appCol.toUpperCase()) != -1)) {

                            if (com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.isLoggable(Level.FINE)) {
                                LoggingUtil.SESSION_LOGGER_WAS.logp(Level.FINE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""column is found : "" + extractedColumn);
                            }
                            counter++;
                        }// end if (extractedColumn......)
                    }// end if (extractedColumn != null)
                }//end while
                 //we issue the warning here as if the index exists and any
                 //index column is missing
                if (counter < 3) {
                    LoggingUtil.SESSION_LOGGER_WAS.logp(Level.WARNING, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""DatabaseHashMap.IndexIncorrect"");
                }
            } catch (Throwable th) {
                LoggingUtil.SESSION_LOGGER_WAS.logp(Level.SEVERE, methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], ""CommonMessage.exception"", th);
            } finally {
                if (rs1 != null) {
                    closeResultSet(rs1);
                }
                if (ps1 != null) {
                    closeStatement(ps1);
                }
            }
        }// end  if (indexExists_iSeries)
        if (com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.isLoggable(Level.FINE)) {
            LoggingUtil.SESSION_LOGGER_WAS.exiting(methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES], indexExists_iSeries);
        }
        return indexExists_iSeries;
    }",Checks if the index exists in the iSeries database
"private int getWidthOfWidestItem() {

        int maxWidth = 0;

        for (CmsContextMenuItemWidget item : m_menuItems) {
            item.getElement().getStyle().clearWidth();
            int itemWidth = measureWidth(item);
            if (itemWidth > maxWidth) {
                maxWidth = itemWidth;
            }
        }

        return maxWidth;
    }",Gets the width of the highest item.
"static boolean regionMatches(
			final CharSequence target,
			final boolean ignoreCase,
			final int toffset,
			final CharSequence other,
			final int ooffset,
			final int length) {
		boolean result;
		if (target instanceof String && other instanceof String) {
			result=delegateCheck((String)target,ignoreCase,toffset,ooffset,length,(String) other);
		} else {
			result=carryOutCheck(target, ignoreCase, toffset, other, ooffset, length);
		}
		return result;
	}",Checks if two CharSequences are in the same region.
"public double valueAt(double[] x, double xscale, int[] batch) {
    double prob = 0; // the log prob of the sequence given the model, which is the negation of value at this point
    double[] weights = x;
    int[][] wis = getWeightIndices();

    int[] given = new int[window - 1];
    int[][] docCliqueLabels = new int[window][];
    for (int j = 0; j < window; j++) {
      docCliqueLabels[j] = new int[j+1];
    }
    // iterate over all the documents
    for (int m = 0; m < batch.length; m++) {
      int ind = batch[m];
      int[][][] docData = data[ind];
      int[] docLabels = labels[ind];

      // make a clique tree for this document
      CRFCliqueTree cliqueTree = CRFCliqueTree.getCalibratedCliqueTree(weights, xscale, wis, docData,
              labelIndices, numClasses, classIndex, backgroundSymbol);

      // compute the log probability of the document given the model with the parameters x
      Arrays.fill(given, classIndex.indexOf(backgroundSymbol));
      if (docLabels.length>docData.length) { // only true for self-training
        // fill the given array with the extra docLabels
        System.arraycopy(docLabels, 0, given, 0, given.length);
        // shift the docLabels array left
        int[] newDocLabels = new int[docData.length];
        System.arraycopy(docLabels, docLabels.length-newDocLabels.length, newDocLabels, 0, newDocLabels.length);
        docLabels = newDocLabels;
      }
      // iterate over the positions in this document
      for (int i = 0; i < docData.length; i++) {
        int label = docLabels[i];
        double p = cliqueTree.condLogProbGivenPrevious(i, label, given);
        if (VERBOSE) {
          System.err.println(""P("" + label + ""|"" + ArrayMath.toString(given) + "")="" + p);
        }
        prob += p;

        // Shift window over
        System.arraycopy(given, 1, given, 0, given.length - 1);
        given[given.length - 1] = label;
      }

    }

    if (Double.isNaN(prob)) { // shouldn't be the case
      throw new RuntimeException(""Got NaN for prob in CRFLogConditionalObjectiveFunction.calculate()"");
    }

    value = -prob;
    return value;
  }",Gets the value at the specified point in the sequence given the model with the parameters x.
"public void receive(byte[] byteArray) throws IOException {
		//register the current application for this thread
		// in case a subsystem logs to the environment
		if (interpreter.isInSubProcessMode()) {
			if (!abortSubprocessModeIfNecessary(byteArray)) {
				/*			case CTRLC:
				   interpreter.abortSubprocessMode();
				   break;*/
				if (echoEnabled) {
					echoBytesToClient(byteArray);
				}
				//every byte is forwarded because the subprocess will interprete the input
				interpreter.processRawInput(byteArray);
			}
		} else {
			processInput(byteArray);
		}
	}",This method is called when a byte array is received from the client.
"public static long subSeconds(final Date date1, final Date date2) {

    return subTime(date1, date2, DatePeriod.SECOND);
  }",Get the sub - seconds.
"public static String implode(String[] arr, String delim)
   {
      StringBuilder buf = new StringBuilder();
      for (int i = 0; i < arr.length; i++)
      {
         if (i > 0)
         {
            buf.append(delim);
         }
         buf.append(arr[i]);
      }
      return buf.toString();
   }",implode a String array into a String
"public void output(Logger log)
    {
        Map<String, Entry> entries = config.getSortedEntries();
        
        if ( entries.isEmpty() )
        {
            return;
        }

        ColumnPrinter printer = build(entries);

        log.debug(""Configuration Details"");
        for ( String line : printer.generate() )
        {
            log.debug(line);
        }
    }",Output the configuration.
"public ObjectBank<List<IN>> makeObjectBankFromReader(BufferedReader in,
                                                       DocumentReaderAndWriter<IN> readerAndWriter) {
    if (flags.announceObjectBankEntries) {
      System.err.println(""Reading data using "" + readerAndWriter.getClass());
    }
    // TODO get rid of objectbankwrapper
    // return new ObjectBank<List<IN>>(new ResettableReaderIteratorFactory(in),
    // readerAndWriter);
    return new ObjectBankWrapper<IN>(flags, new ObjectBank<List<IN>>(new ResettableReaderIteratorFactory(in),
        readerAndWriter), knownLCWords);
  }",Create an ObjectBank from a buffered reader.
"public static Pojo createRun(PojoCallback callback) {
		return new NutPojo().setSqlType(SqlType.RUN).setAfter(callback);
	}",Creates a run pojo.
"public HThriftClient open() {
    if ( isOpen() ) {
      throw new IllegalStateException(""Open called on already open connection. You should not have gotten here."");
    }
    if ( log.isDebugEnabled() ) {
      log.debug(""Creating a new thrift connection to {}"", cassandraHost);
    }

    TSocket socket;    
    try {
        socket = params == null ? 
                                new TSocket(cassandraHost.getHost(), cassandraHost.getPort(), timeout)
                                : TSSLTransportFactory.getClientSocket(cassandraHost.getHost(), cassandraHost.getPort(), timeout, params);
    } catch (TTransportException e) {
        throw new HectorTransportException(""Could not get client socket: "", e);
    }
    
    if ( cassandraHost.getUseSocketKeepalive() ) {
      try {
        socket.getSocket().setKeepAlive(true);
      } catch (SocketException se) {
        throw new HectorTransportException(""Could not set SO_KEEPALIVE on socket: "", se);
      }
    }

    transport = maybeWrapWithTFramedTransport(socket);

    // If using SSL, the socket will already be connected, and TFramedTransport and
    // TSocket just wind up calling socket.isConnected(), so check this before calling
    // open() to avoid a ""Socket already connected"" error.
    if (!transport.isOpen()) {
      try {
        transport.open();
      } catch (TTransportException e) {
        // Thrift exceptions aren't very good in reporting, so we have to catch the exception here and
        // add details to it.
        log.debug(""Unable to open transport to "" + cassandraHost.getName());
        //clientMonitor.incCounter(Counter.CONNECT_ERROR);
        throw new HectorTransportException(""Unable to open transport to "" + cassandraHost.getName() +"" , "" +
            e.getLocalizedMessage(), e);
      }
    }
    return this;
  }",Open a new connection to the cassandra host.
"public static TextCorpusStored compose(String lang, TextCorpusLayerStoredAbstract... layers) {
        TextCorpusStored tc = new TextCorpusStored(lang);
        for (TextCorpusLayerStoredAbstract layer : layers) {
            tc.layersInOrder[TextCorpusLayerTag.getFromClass(layer.getClass()).ordinal()] = layer;
        }
        tc.connectLayers();
        return tc;
    }",Compose a set of text corpus layers into one.
"public boolean correct(GrowQueue_I8 input , GrowQueue_I8 ecc )
	{
		computeSyndromes(input,ecc,syndromes);
		findErrorLocatorPolynomialBM(syndromes,errorLocatorPoly);
		if( !findErrorLocations_BruteForce(errorLocatorPoly,input.size+ecc.size,errorLocations))
			return false;

		correctErrors(input,input.size+ecc.size,syndromes,errorLocatorPoly,errorLocations);
		return true;
	}",Computes the syndromes and errors from the input and ecc.
"public double valueAt( int col, int row ) {
        if (isInRaster(col, row)) {
            double value = iter.getSampleDouble(col, row, 0);
            return value;
        }
        return HMConstants.doubleNovalue;
    }",Get the value at the specified column and row.
"public void setStart(final double START) {
        if (null == start) {
            _start = START;
            fireSectionEvent(UPDATE_EVENT);
        } else {
            start.set(START);
        }
    }",Sets the start value of the calendar section.
"public Either<String, List<String>> dataSources(Map<String, String> reqHeaders) {
        Either<String, Either<JSONArray, JSONObject>> resp = fireCommand(""druid/coordinator/v1/metadata/datasources"", null, reqHeaders);
        if (resp.isLeft()) {
            return new Left<>(resp.left().get());
        }
        Either<JSONArray, JSONObject> goodResp = resp.right().get();
        if (goodResp.isLeft()) {
            JSONArray dataSources = goodResp.left().get();
            List<String> dataSourceList = new ArrayList<>();
            for (int i = 0; i < dataSources.length(); i++) {
                dataSourceList.add(dataSources.getString(i));
            }
            return new Right<>(dataSourceList);
        }
        return new Left<>(resp.left().get());
    }",Get a list of data sources from the coordinator
"public static <T extends MethodDescription> ElementMatcher.Junction<T> isGetter() {
        return takesArguments(0).and(not(returns(TypeDescription.VOID))).and(nameStartsWith(""get"").or(nameStartsWith(""is"").and(returnsGeneric(anyOf(boolean.class, Boolean.class)))));
    }",Matches a method s signature to determine if it is a getter.
"public final void setCheckedStateBackgroundColor(@ColorInt int backgroundColor) {
        if ((backgroundColor != mCheckedBackgroundColor) &&
            (null != mCheckedBackgroundPaint)) {
            mCheckedBackgroundPaint.setColor(backgroundColor);
            if (isChecked()) {
                invalidate();
            }
        }

        mCheckedBackgroundColor = backgroundColor;
    }",Sets the background color of the check area.
"public static void debug(JShell state, PrintStream err, Exception ex, String where) {
        if (isDebugEnabled(state, 0xFFFFFFFF)) {
            err.printf(""Fatal error: %s: %s\n"", where, ex.getMessage());
            ex.printStackTrace(err);
        }
    }",Debug method.
"private void initializeIfNeeded() throws BackendInitializationException,
            BackendNewInstanceException {
        if (isClosed()) {
            throw new IllegalStateException(""Knowledge source already closed!"");
        }
        if (this.inDataSourceGetter == null) {
            this.inDataSourceGetter
                    = new SubtreePropositionDefinitionGetterRegular(this, true);
        }
        if (this.collectSubtreeGetter == null) {
            this.collectSubtreeGetter
                    = new SubtreePropositionDefinitionGetterRegular(this, false);
        }
    }",Initialize the Knowledge Source if necessary.
"private ListenerToken addDocumentChangeListener(
        Executor executor,
        DocumentChangeListener listener,
        String docID) {
        // NOTE: caller method is synchronized.
        DocumentChangeNotifier docNotifier = docChangeNotifiers.get(docID);
        if (docNotifier == null) {
            docNotifier = new DocumentChangeNotifier((Database) this, docID);
            docChangeNotifiers.put(docID, docNotifier);
        }
        final ChangeListenerToken token = docNotifier.addChangeListener(executor, listener);
        token.setKey(docID);
        return token;
    }",Add a DocumentChangeListener to the database.
"public void setValues(Variable v, List<String> values) throws IllegalArgumentException {
    Array data = Array.makeArray(v.getDataType(), values);

    if (data.getSize() != v.getSize())
      throw new IllegalArgumentException(""Incorrect number of values specified for the Variable "" + v.getFullName() +
              "" needed= "" + v.getSize() + "" given="" + data.getSize());

    if (v.getRank() != 1) // dont have to reshape for rank 1
      data = data.reshape(v.getShape());

    v.setCachedData(data, true);
  }",Sets the values for the variable.
"public static Cookies newServerRequestHolder(HttpHeaders headers, ServerCookieDecoder decoder) {
		return new Cookies(headers, HttpHeaderNames.COOKIE, false, decoder);
	}",Creates a new CookieHolder instance from the given HTTP headers.
"public static long currentTimeMicros() {
        if (javaVersion() == 8) {
            return TimeUnit.MILLISECONDS.toMicros(System.currentTimeMillis());
        } else {
            // Java 9+ support higher precision wall time.
            final Instant now = Clock.systemUTC().instant();
            return TimeUnit.SECONDS.toMicros(now.getEpochSecond()) + TimeUnit.NANOSECONDS.toMicros(
                    now.getNano());
        }
    }",Get the current time in microseconds.
"private void evaluateExpressions() throws JspException {
        /* 
         * Note: we don't check for type mismatches here; we assume
         * the expression evaluator will return the expected type
         * (by virtue of knowledge we give it about what that type is).
         * A ClassCastException here is truly unexpected, so we let it
         * propagate up.
         */

        xml = ExpressionUtil.evalNotNull(
                ""transform"", ""xml"", xml_, Object.class, this, pageContext);
        xmlSystemId = (String) ExpressionUtil.evalNotNull(
                ""transform"", ""xmlSystemId"", xmlSystemId_, String.class,
                this, pageContext);
        xslt = ExpressionUtil.evalNotNull(
                ""transform"", ""xslt"", xslt_, Object.class, this,
                pageContext);
        xsltSystemId = (String) ExpressionUtil.evalNotNull(
                ""transform"", ""xsltSystemId"", xsltSystemId_, String.class,
                this, pageContext);
        result = (Result) ExpressionUtil.evalNotNull(
                ""transform"", ""result"", result_, Result.class, this, pageContext);

    }",Evaluate the expressions.
"public Agreement getAgreement(String agreementId) {
        return getJerseyClient().target(getEndpoint() + ""/agreements/"" + agreementId).request()
                .header(""Accept"", MediaType.APPLICATION_JSON)
                .header(""Content-Type"", MediaType.APPLICATION_JSON)
                .buildGet().invoke().readEntity(Agreement.class);
    }",Get a single agreement
"@Override
  public void setOwner(Path path, final String username, final String groupname)
      throws IOException {
    LOG.debug(""setOwner({},{},{})"", path, username, groupname);
    AlluxioURI uri = new AlluxioURI(HadoopUtils.getPathWithoutScheme(path));
    SetAttributePOptions.Builder optionsBuilder = SetAttributePOptions.newBuilder();
    boolean ownerOrGroupChanged = false;
    if (username != null && !username.isEmpty()) {
      optionsBuilder.setOwner(username).setRecursive(false);
      ownerOrGroupChanged = true;
    }
    if (groupname != null && !groupname.isEmpty()) {
      optionsBuilder.setGroup(groupname).setRecursive(false);
      ownerOrGroupChanged = true;
    }
    if (ownerOrGroupChanged) {
      try {
        mFileSystem.setAttribute(uri, optionsBuilder.build());
      } catch (AlluxioException e) {
        throw new IOException(e);
      }
    }
  }",Override the owner method.
"public static <C> Module configModule(final Class<C> configInterface, final Optional<Named> nameOpt)
    {
        checkNotNull(configInterface);
        checkNotNull(nameOpt);
        final Optional<String> nameStrOpt = nameOpt.map(Named::value);

        // Build config descriptors for the given config interface
        final List<ConfigDescriptor> configDescList = ConfigSystem.descriptorFactory.buildDescriptors(configInterface, nameStrOpt);

        return new AbstractModule()
        {
            @Override
            protected void configure()
            {
                // Create Implementation Builder
                DynamicType.Builder<C> typeBuilder = new ByteBuddy().subclass(configInterface);

                Multibinder<ConfigDescriptor> multiBinder = Multibinder.newSetBinder(binder(), ConfigDescriptor.class);

                // Define a field to keep a local reference to the list of propertyAccessorProviders on the dynamic
                // instance so the provideres dont get GCed. The providers are supplied to the InvocationHandlerImpl
                // using a WeakReference so the generated (static) code will not have a strong reference to the injector
                // which will cause a memory leak.
                final String propertyAccessorProvidersFieldName = ""propertyAccessorProviders$"" + ThreadLocalRandom.current().nextLong(Long.MAX_VALUE);
                typeBuilder = typeBuilder.defineField(propertyAccessorProvidersFieldName, Collection.class, Visibility.PRIVATE);
                ImmutableList.Builder<Provider<PropertyAccessor<?>>> propertyAccessorProvidersBuilder = ImmutableList.builder();

                for (ConfigDescriptor desc : configDescList) {
                    // Bind the propertyIdentifier
                    final PropertyIdentifier propertyId = ConfigSystem.getIdentifier(desc);
                    bind(PropertyIdentifier.class).annotatedWith(propertyId).toInstance(propertyId);

                    Provider<PropertyAccessor<?>> accessorProvider;
                    if (desc.isObservable()) {
                        // find associated method descriptor for observable
                        ConfigDescriptor otherDesc = findAssociatedDescForObservable(configDescList, desc);
                        final PropertyIdentifier otherPropertyId = ConfigSystem.getIdentifier(otherDesc);

                        // Get accessorProvider of the associated method for use in the configuration method implementation
                        accessorProvider = getAccessorProvider(otherDesc, otherPropertyId);
                    }
                    else {
                        // Bind the named ConfigDescriptor
                        bind(ConfigDescriptor.class).annotatedWith(Names.named(desc.getConfigName())).toInstance(desc);

                        // MultiBind ConfigDescriptor so we can later inject Set<ConfigDescriptor>
                        multiBinder.addBinding().toInstance(desc);

                        // Bind the static default value and propertyIdentifier
                        bind(ConstantValuePropertyAccessor.class).annotatedWith(propertyId).toInstance(ConstantValuePropertyAccessor.fromStringOpt(desc.getDefaultValue()));

                        // Bind the PropertyAccessor
                        install(PropertyAccessor.module(propertyId, desc));

                        // Get accessorProvider for use in the configuration method implementation
                        accessorProvider = getAccessorProvider(desc, propertyId);
                    }
                    propertyAccessorProvidersBuilder.add(accessorProvider);

                    // Register method implementation in the class builder
                    // Wrap the accessorProvider in a WeakReference before giving it to ByteBuddy to avoid a reference
                    // to the injector making its way into the class loader which results in a memory leak.
                    typeBuilder = typeBuilder.method(ElementMatchers.is(desc.getMethod())).intercept(InvocationHandlerAdapter.of(new InvocationHandlerImpl(desc, new WeakReference<>(accessorProvider))));
                }

                Class<? extends C> configImpl = typeBuilder.make()
                    .load(configInterface.getClassLoader(), ClassLoadingStrategy.Default.INJECTION)
                    .getLoaded();

                // Bind Config Interface to an instance of the newly created impl class
                try {
                    C instance = (C) configImpl.newInstance();

                    // To prevent the property accessor providers from getting GCed - see comments above:
                    Field propertyAccessorProvidersField = instance.getClass().getDeclaredField(propertyAccessorProvidersFieldName);
                    if (!propertyAccessorProvidersField.isAccessible()) {
                        propertyAccessorProvidersField.setAccessible(true);
                    }
                    propertyAccessorProvidersField.set(instance, propertyAccessorProvidersBuilder.build());

                    if (nameOpt.isPresent()) {
                        bind(configInterface).annotatedWith(nameOpt.get()).toInstance(instance);
                    }
                    else {
                        bind(configInterface).toInstance(instance);
                    }
                }
                catch (InstantiationException | IllegalAccessException | NoSuchFieldException | SecurityException ex) {
                    throw new ConfigException(""Failed to instantiate implementation of Config {}"",
                        configInterface.getName(), ex);
                }
            }

            private Provider<PropertyAccessor<?>> getAccessorProvider(ConfigDescriptor desc, PropertyIdentifier propertyId)
            {
                TypeLiteral<PropertyAccessor<?>> accessorKey =
                    (TypeLiteral<PropertyAccessor<?>>) TypeLiteral.get(
                        Types.newParameterizedType(PropertyAccessor.class, desc.getConfigType()));
                return getProvider(Key.get(accessorKey, propertyId));
            }
        };
    }",Create a module that can be used to configure the configuration class.
"@Override
    public Expression<Long> count(Expression<?> arg0)
    {
        // TODO Auto-generated method stub
        String arg1 = ""Count(""+arg0.getAlias()+"")"";
        return new AggregateExpression(arg0, arg1);
    }",Create an aggregate expression for a count of a single record set.
"public void addChildProperties(final NodeData parentData, final List<PropertyData> childItems)
   {
      if (enabled && parentData != null && childItems != null)
      {
         String logInfo = null;
         if (LOG.isDebugEnabled())
         {
            logInfo =
               ""parent:   "" + parentData.getQPath().getAsString() + ""    "" + parentData.getIdentifier() + "" ""
                  + childItems.size();
            LOG.debug(name + "", addChildProperties() >>> "" + logInfo);
         }

         String operName = """"; // for debug/trace only

         writeLock.lock();
         try
         {
            // remove parent (no childs)
            operName = ""removing parent"";
            removeItem(parentData);

            operName = ""caching parent"";
            putItem(parentData); // put parent in cache

            synchronized (childItems)
            {
               operName = ""caching child properties list"";
               propertiesCache.put(parentData.getIdentifier(), childItems); // put childs in cache CP

               operName = ""caching child properties"";
               // put childs in cache C
               for (ItemData p : childItems)
               {
                  if (LOG.isDebugEnabled())
                  {
                     LOG.debug(name + "", addChildProperties()    "" + p.getQPath().getAsString() + ""    ""
                        + p.getIdentifier() + ""  --  "" + p);
                  }

                  putItem(p);
               }
            }
         }
         catch (Exception e)
         {
            LOG.error(name + "", Error in addChildProperties() "" + operName + "": parent ""
               + (parentData != null ? parentData.getQPath().getAsString() : ""[null]""), e);
         }
         finally
         {
            writeLock.unlock();
         }

         if (LOG.isDebugEnabled())
         {
            LOG.debug(name + "", addChildProperties() <<< "" + logInfo);
         }
      }
   }",Add child properties.
"public static Query in(String field, Collection<?> values) {
        return new Query().in(field, values);
    }",Create a query that returns objects that are in the given field
"public Observable<ServiceResponse<GenericResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException(""Parameter resourceGroupName is required and cannot be null."");
        }
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException(""Parameter resourceProviderNamespace is required and cannot be null."");
        }
        if (parentResourcePath == null) {
            throw new IllegalArgumentException(""Parameter parentResourcePath is required and cannot be null."");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException(""Parameter resourceType is required and cannot be null."");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException(""Parameter resourceName is required and cannot be null."");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException(""Parameter this.client.subscriptionId() is required and cannot be null."");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException(""Parameter apiVersion is required and cannot be null."");
        }
        return service.get(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GenericResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GenericResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GenericResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }",Gets a specific image in an App Service Environment.
"public boolean await(T t, long timeout, TimeUnit unit) throws InterruptedException
    {
        synchronized (monitor)
        {
            // Holds the absolute time when the timeout expires.
            long expiryTimeNanos = System.nanoTime() + unit.toNanos(timeout);

            // Used to hold the estimated wait time until the condition may pass.
            long waitNanos = evaluateWithWaitTimeNanos(t);

            // Loop forever until all conditions pass, the timeout expires, or the thread is interrupted.
            while (waitNanos > 0)
            {
                // Check how much time remains until the timeout expires.
                long remainingTimeNanos = expiryTimeNanos - System.nanoTime();

                // Check if the timeout has expired.
                if (remainingTimeNanos <= 0)
                {
                    return false;
                }

                // If some conditions failed, then wait for the shortest of the wait time or the remaining time until the
                // timout expires, or until the thread is woken up by a signal, before re-evaluating conditions.
                long timeToPauseNanos = (waitNanos < remainingTimeNanos) ? waitNanos : remainingTimeNanos;

                long milliPause = timeToPauseNanos / 1000000;
                int nanoPause = (int) (timeToPauseNanos % 1000000);

                monitor.wait(milliPause, nanoPause);

                // Re-evelaute the condition and obtain a new estimate of how long until it may pass.
                waitNanos = evaluateWithWaitTimeNanos(t);
            }
        }

        // All conditions have passed when the above loop terminates.
        return true;
    }",Await for the condition.
"@Override
    public Response toResponse(WebApplicationException ex) {
        return Response.status(ex.getResponse().getStatus()).entity(new ErrorMessage(ex.getResponse().getStatus(), ex.getMessage())).type(
            MediaType.APPLICATION_JSON_TYPE).build();
    }","Override toResponse to return a response object for a
 banner exception."
"@Override
    public int doStartTag() throws JspException {

        ServletRequest req = pageContext.getRequest();

        // This will always be true if the page is called through OpenCms
        if (!CmsFlexController.isCmsRequest(req)) {
            return SKIP_BODY;
        }
        if (getJs() == null) {
            if (isDynamic()) {
                // in case we want to include the needed js functions
                try {
                    pageContext.getOut().print(""<script type='text/javascript' src='""
                        + CmsWorkplace.getSkinUri()
                        + VFS_PATH_LOAD_JS
                        + ""' ></script>"");
                } catch (Exception ex) {
                    if (LOG.isErrorEnabled()) {
                        LOG.error(Messages.get().getBundle().key(Messages.ERR_PROCESS_TAG_1, ""jquery""), ex);
                    }
                    throw new JspException(ex);
                }
            }
            return SKIP_BODY;
        }

        // get the server prefix
        CmsObject cms = CmsFlexController.getCmsObject(req);

        // first handle js file
        String path = VFS_PATH_JQUERY;
        if (cms.getRequestContext().getCurrentProject().isOnlineProject()) {
            // online
            path += VFS_PATH_PACKED;
        } else {
            // offline
            path += VFS_PATH_UNPACKED;
        }
        String file = path + getJs() + EXTENSION_JS;
        try {
            cms.readResource(CmsWorkplace.VFS_PATH_RESOURCES + file);
            if (isDynamic()) {
                pageContext.getOut().print(""<script type='text/javascript'>load_script('""
                    + CmsWorkplace.getSkinUri()
                    + file
                    + ""', 'js');</script>"");
            } else {
                pageContext.getOut().print(
                    ""<script type='text/javascript' src='"" + CmsWorkplace.getSkinUri() + file + ""' ></script>"");
            }
        } catch (Exception ex) {
            if (LOG.isErrorEnabled()) {
                LOG.error(Messages.get().getBundle().key(Messages.ERR_PROCESS_TAG_1, ""jquery""), ex);
            }
            throw new JspException(ex);
        }
        if (getCss() == null) {
            return SKIP_BODY;
        }

        // now handle css file
        path = VFS_PATH_CSS;
        file = path + getCss() + EXTENSION_CSS;
        try {
            cms.readResource(CmsWorkplace.VFS_PATH_RESOURCES + file);
            pageContext.getOut().println();
            if (isDynamic()) {
                pageContext.getOut().print(""<script type='text/javascript'>load_script('""
                    + CmsWorkplace.getSkinUri()
                    + file
                    + ""', 'css');</script>"");
            } else {
                pageContext.getOut().print(
                    ""<link href='"" + CmsWorkplace.getSkinUri() + file + ""' rel='stylesheet' type='text/css' >"");
            }
        } catch (Exception ex) {
            if (LOG.isErrorEnabled()) {
                LOG.error(Messages.get().getBundle().key(Messages.ERR_PROCESS_TAG_1, ""jquery""), ex);
            }
            throw new JspException(ex);
        }
        return SKIP_BODY;
    }",OverrideStartTag to provide the JS code for the cms calendar.
"protected OkHttpClient buildHttpClient() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder()
                .readTimeout(readTimeoutMs, TimeUnit.MILLISECONDS)
                .writeTimeout(writeTimeoutMs, TimeUnit.MILLISECONDS);
        OkHttpClient client = builder.build();
        return client;
    }",Build OkHttpClient
"@Override
    public void init(PageContext pc) throws IOException {
	if (init != null) {
	    try {
		init.invoke(monitor, new Object[] { pc });
	    }
	    catch (Exception e) {
		throw ExceptionUtil.toIOException(e);
	    }
	}
    }",Initializes the page context.
"@Override public JobSpecSchedule scheduleOnce(JobSpec jobSpec, Runnable jobRunnable) {
    _log.info(""Scheduling once JobSpec "" + jobSpec);
    Runnable runOnceRunnable = new RunOnceRunnable(jobSpec.getUri(), jobRunnable);
    return scheduleJob(jobSpec, runOnceRunnable);
  }",Schedules a Runnable to be run once.
"ByteBuffer getBuffer() throws IOException {
    /*
     * Once this is called, no more data can be added to the packet. setting
     * 'buf' to null ensures that. This is called only when the packet is ready
     * to be sent.
     */
    if (buffer != null) {
      return buffer;
    }

    int pktLen = DFSClient.SIZE_OF_INTEGER + (pos - dataStart);

    // normally dataStart == checksumPos, i.e., offset is zero.
    buffer = ByteBuffer.wrap(buf, 0, dfsOutputStream.getPacketHeaderLen()
        + pktLen);
    buf = null;
    buffer.mark();

    /*
     * write the header and data length. The format is described in comment
     * before DataNode.BlockSender
     */
    buffer.putInt(pktLen); // pktSize
    buffer.putInt(dfsOutputStream.getPacketVersion());
    buffer.putLong(offsetInBlock);
    buffer.putLong(seqno);

    byte booleanFieldValue = 0x00;

    if (lastPacketInBlock) {
      booleanFieldValue |= DataNode.isLastPacketInBlockMask;
    }
    if (dfsOutputStream.ifForceSync()) {
      booleanFieldValue |= DataNode.forceSyncMask;
    }
    buffer.put(booleanFieldValue);

    // end of pkt header
    buffer.putInt(dataLength); // actual data length, excluding checksum.
    buffer.reset();
    return buffer;
  }",Get the buffer to be used for the data.
"private static String annotationToString(
      Class<? extends Annotation> type, Map<String, Object> members) throws Exception {
    StringBuilder sb = new StringBuilder().append(""@"").append(type.getName()).append(""("");
    JOINER.appendTo(
        sb,
        Maps.transformValues(
            members,
            arg -> {
              String s = Arrays.deepToString(new Object[] {arg});
              return s.substring(1, s.length() - 1); // cut off brackets
            }));
    return sb.append("")"").toString();
  }",Convert an annotation to a string.
"public static LuceneDefaults fromAnnotation(Defaults defaults) {
        LuceneDefaults lid = new LuceneDefaults();
        boolean hasValues = false;

        if (!StringUtils.isBlank(defaults.field())) {
            lid.setField(defaults.field());
            hasValues = true;
        }
        if (!StringUtils.isBlank(defaults.type())) {
            lid.setType(defaults.type());
            hasValues = true;
        }
        if (!StringUtils.isBlank(defaults.store())) {
            lid.setStore(defaults.store());
            hasValues = true;
        }
        if (!StringUtils.isBlank(defaults.index())) {
            lid.setIndex(defaults.index());
            hasValues = true;
        }
        return hasValues ? lid : null;
    }",This method is used to create LuceneDefaults object from a Annotation object.
"public void marshall(DeleteUserRequest deleteUserRequest, ProtocolMarshaller protocolMarshaller) {

        if (deleteUserRequest == null) {
            throw new SdkClientException(""Invalid argument passed to marshall(...)"");
        }

        try {
            protocolMarshaller.marshall(deleteUserRequest.getUserName(), USERNAME_BINDING);
            protocolMarshaller.marshall(deleteUserRequest.getAwsAccountId(), AWSACCOUNTID_BINDING);
            protocolMarshaller.marshall(deleteUserRequest.getNamespace(), NAMESPACE_BINDING);
        } catch (Exception e) {
            throw new SdkClientException(""Unable to marshall request to JSON: "" + e.getMessage(), e);
        }
    }",marshalls the given DeleteUserRequest object to the JSON object.
"private static void 
        writeNeighborComparison(File neighborFile, 
                                MultiMap<Double,String> mostSimilar, 
                                SemanticSpace sspace) throws IOException {        

        PrintWriter pw = new PrintWriter(neighborFile);
        
        // print out the header so we know the comparison order
        StringBuffer sb = new StringBuffer(mostSimilar.size() * 10);
        for (Iterator<String> it = mostSimilar.values().iterator();
             it.hasNext();) {
            sb.append(it.next());
            if (it.hasNext()) 
                sb.append("" "");
        }
        pw.println(sb.toString());
        
        // create an N x N table of how similar all the words are to each
        // other.
        for (String word : mostSimilar.values()) {
            sb = new StringBuffer(mostSimilar.size() * 10);
            sb.append(word).append("" "");
            
            // loop through all of the words
            for (String other : mostSimilar.values()) {
                // determine how similar the two words are
                double similarity = Similarity.cosineSimilarity(
                        sspace.getVector(word),
                        sspace.getVector(other));
                sb.append(similarity).append("" "");
            }
            pw.println(sb.toString());
        }
        
        pw.close();
    }",Write the neighbor comparison table.
"private void create3WindowFeats(int i, String[] toks, String[] tags,
      String[] preds, List<String> feats) {

    // Words in a 5-word window
    String w_1, w0, w1;

    // Tags in a 5-word window
    String t_1, t0, t1;

    // Previous predictions
    String p_2, p_1;

    w0 = w1 = null;
    t_1 = t0 = t1 = null;
    p_1 = p_2 = null;

    if (i < 2) {
      p_2 = ""p_2=bos"";
    } else {
      p_2 = ""p_2"" + preds[i - 2];
    }

    if (i < 1) {
      w_1 = ""w_1=bos"";
      t_1 = ""t_1=bos"";
      p_1 = ""p_1=bos"";
    } else {
      w_1 = ""w_1="" + toks[i - 1];
      t_1 = ""t_1="" + tags[i - 1];
      p_1 = ""p_1="" + preds[i - 1];
    }

    w0 = ""w0="" + toks[i];
    t0 = ""t0="" + tags[i];

    if (i + 1 >= toks.length) {
      w1 = ""w1=eos"";
      t1 = ""t1=eos"";
    } else {
      w1 = ""w1="" + toks[i + 1];
      t1 = ""t1="" + tags[i + 1];
    }

    String[] features = new String[] {
        // add word features
        w_1, w0, w1,
        w_1 + w0,
        w0 + w1,

        // add tag features
        t_1, t0, t1, 
        t_1 + t0,
        t0 + t1,
        t_1 + t0 + t1,

        // add pred tags
        p_2,
        p_1,
        p_2 + p_1,

        // add pred and tag
        p_1 + t_1, p_1 + t0, p_1 + t1,
        p_1 + t_1 + t0, p_1 + t0 + t1,
        p_1 + t_1 + t0 + t1,

        // add pred and word
        p_1 + w_1, p_1 + w0, p_1 + w1, p_1 + w_1 + w0,
        p_1 + w0 + w1 };

    feats.addAll(Arrays.asList(features));
  }",Create 3 - window features.
"@Override
  public V putIfAbsentFailure(K key, V value, StoreAccessException e) {
    // FIXME: Should I care about useLoaderInAtomics?
    try {
      try {
        V loaded = loaderWriter.load(key);
        if (loaded != null) {
          return loaded;
        }
      } catch (Exception e1) {
        throw ExceptionFactory.newCacheLoadingException(e1, e);
      }
      try {
        loaderWriter.write(key, value);
      } catch (Exception e1) {
        throw ExceptionFactory.newCacheWritingException(e1, e);
      }
    } finally {
      cleanup(key, e);
    }
    return null;
  }",Override the putIfAbsentFailure method to handle the case where the cache is not empty.
"public static ArrayList<double[]> readBinary(String featuresFileName, int featureLength) throws Exception {
		ArrayList<double[]> features = new ArrayList<double[]>();
		DataInputStream in = new DataInputStream(new BufferedInputStream(
				new FileInputStream(featuresFileName)));

		int counter = 0;
		double[] desc = new double[featureLength];
		while (true) {
			try {
				desc[counter] = in.readDouble();
			} catch (EOFException e) {
				break;
			}
			counter++;
			if (counter == featureLength) {
				features.add(desc);
				counter = 0;
				desc = new double[featureLength];
			}
		}
		in.close();
		return features;
	}",Reads a binary file containing features from a file name and returns the features in a list of double arrays.
"public Map<Boolean, List<T>> partitioningBy(Predicate<? super T> predicate) {
        return collect(Collectors.partitioningBy(predicate));
    }",Partition the result set by the given predicate.
"public static PublicKey readPublicKey(final byte[] publicKeyBytes)
		throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException
	{
		return readPublicKey(publicKeyBytes, KeyPairGeneratorAlgorithm.RSA.getAlgorithm());
	}",Reads a public key from the given byte array.
"public static double cublasDasum(int n, Pointer x, int incx)
    {
        double result = cublasDasumNative(n, x, incx);
        checkResultBLAS();
        return result;
    }",Dasum for a Cublas segment.
"public String getColumnNameForProperty(final String propertyName)
   {
     return Optional.ofNullable(propertyToField.get(propertyName))
                    .map(fcInfo -> fcInfo.getDelimitedColumnName())
                    .orElse(null);
   }",Gets the column name for the property.
"public void setMoneyAmountOff(com.google.api.ads.adwords.axis.v201809.cm.MoneyWithCurrency moneyAmountOff) {
        this.moneyAmountOff = moneyAmountOff;
    }",Sets the moneyAmountOff value for this CMA.
"public Observable<VirtualNetworkInner> beginUpdateTagsAsync(String resourceGroupName, String virtualNetworkName, Map<String, String> tags) {
        return beginUpdateTagsWithServiceResponseAsync(resourceGroupName, virtualNetworkName, tags).map(new Func1<ServiceResponse<VirtualNetworkInner>, VirtualNetworkInner>() {
            @Override
            public VirtualNetworkInner call(ServiceResponse<VirtualNetworkInner> response) {
                return response.body();
            }
        });
    }",Updates the tags on a virtual network.
"static File getLogDirectory(Object newValue, File defaultDirectory) {

        File newDirectory = defaultDirectory;

        // If a value was specified, try creating a file with it
        if (newValue != null && newValue instanceof String) {
            newDirectory = new File((String) newValue);
        }

        if (newDirectory == null) {
            String value = ""."";
            try {
                value = AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<String>() {
                    @Override
                    public String run() throws Exception {
                        return System.getProperty(""user.dir"");
                    }
                });
            } catch (Exception ex) {
                // do nothing
            }
            newDirectory = new File(value);
        }

        return LoggingFileUtils.validateDirectory(newDirectory);
    }",Get the directory to use for the log file.
"private static boolean applySingletonSubstitution(Function functionalTerm, SingletonSubstitution substitution) {
        List<Term> innerTerms = functionalTerm.getTerms();
        boolean innerchanges = false;
        // TODO this ways of changing inner terms in functions is not
        // optimal, modify

        for (int i = 0; i < innerTerms.size(); i++) {
            Term innerTerm = innerTerms.get(i);

            if (innerTerm instanceof Function) {
                // Recursive call
                innerchanges = innerchanges || applySingletonSubstitution((Function)innerTerm, substitution);
            }
            else if (substitution.getVariable().equals(innerTerm)) { // ROMAN: no need in isEqual(innerTerm, s.getVariable())
                functionalTerm.getTerms().set(i, substitution.getTerm());
                innerchanges = true;
            }
        }
        return innerchanges;
    }",This method is used to apply a singleton substitution to a functional term.
"public static boolean containsOnly(String str, char[] valid) {
        // All these pre-checks are to maintain API with an older version
        if ((valid == null) || (str == null)) {
            return false;
        }
        if (str.length() == 0) {
            return true;
        }
        if (valid.length == 0) {
            return false;
        }
        return indexOfAnyBut(str, valid) == INDEX_NOT_FOUND;
    }",Checks if the string contains only the valid characters.
"public static CompletableFuture<IMessageReceiver> createMessageReceiverFromConnectionStringAsync(String amqpConnectionString, ReceiveMode receiveMode) {
        Utils.assertNonNull(""amqpConnectionString"", amqpConnectionString);
        return createMessageReceiverFromConnectionStringBuilderAsync(new ConnectionStringBuilder(amqpConnectionString), receiveMode);
    }",Create a message receiver asynchronously from a connection string.
"public static int elementWiseStride(DataBuffer buffer) {
        int length2 = shapeInfoLength(buffer.getInt(0));
        return buffer.getInt(length2 - 2);
    }",Get the element - wise stride of the image.
"public static void report(String testId, Throwable cause) {
        if (cause == null) {
            LOGGER.fatal(""Can't call report with a null exception"");
            return;
        }

        long exceptionCount = FAILURE_ID.incrementAndGet();

        if (exceptionCount > MAX_EXCEPTION_COUNT) {
            LOGGER.warn(""Exception #"" + exceptionCount + "" detected. The maximum number of exceptions has been exceeded, so it""
                    + "" won't be reported to the Agent."", cause);
            return;
        }

        LOGGER.warn(""Exception #"" + exceptionCount + "" detected"", cause);

        String targetFileName = exceptionCount + "".exception"";

        File dir = getUserDir();
        File tmpFile = new File(dir, targetFileName + "".tmp"");
        try {
            if (!tmpFile.createNewFile()) {
                throw new IOException(""Could not create tmp file: "" + tmpFile.getAbsolutePath());
            }
        } catch (IOException e) {
            LOGGER.fatal(""Could not report exception; this means that this exception is not visible to the coordinator"", e);
            return;
        }

        writeText(testId + NEW_LINE + throwableToString(cause), tmpFile);

        File file = new File(dir, targetFileName);
        LOGGER.info(file.getAbsolutePath());
        rename(tmpFile, file);
    }",Report an exception to the Agent.
"public Observable<Page<RouteFilterRuleInner>> listByRouteFilterNextAsync(final String nextPageLink) {
        return listByRouteFilterNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RouteFilterRuleInner>>, Page<RouteFilterRuleInner>>() {
                @Override
                public Page<RouteFilterRuleInner> call(ServiceResponse<Page<RouteFilterRuleInner>> response) {
                    return response.body();
                }
            });
    }",Gets a list of craveic acctic rules.
"public <T extends ICalProperty> List<T> removeProperties(Class<T> clazz) {
		List<ICalProperty> removed = properties.removeAll(clazz);
		return castList(removed, clazz);
	}",Removes all properties of the given class from this property list.
"public List<User> getAllUsers(AccessToken accessToken, String... attributes) {
        return getUserService().getAllUsers(accessToken, attributes);
    }",Get a list of all users.
"String getString(Object scope, String propertyPath) throws TemplateException
  {
    return getString(scope, propertyPath, null);
  }","Gets a string value from a
    property path."
"public void update(ModelConfig modelConfig) throws FOSException {
        checkNotNull(modelConfig);

        this.dirty = true;

        // The class index should be reset everytime a model config is updated.
        // TODO: Refactor the classIndex to be in ModelConfig.
        this.modelConfig.getProperties().remove(CLASS_INDEX);
        this.modelConfig.update(modelConfig);

        parseModelConfig();
    }",Updates the record with the given model config.
"void build() {
        RangeDescriptor rlRange;

        if (fRB.fDebugEnv!=null  && fRB.fDebugEnv.indexOf(""usets"")>=0) {printSets();}

        //  Initialize the process by creating a single range encompassing all characters
        //  that is in no sets.
        //
        fRangeList               = new RangeDescriptor(); 
        fRangeList.fStartChar    = 0;
        fRangeList.fEndChar      = 0x10ffff;

        //
        //  Find the set of non-overlapping ranges of characters
        //
        for (RBBINode usetNode : fRB.fUSetNodes) {
            UnicodeSet      inputSet             = usetNode.fInputSet;
            int            inputSetRangeCount   = inputSet.getRangeCount();
            int            inputSetRangeIndex   = 0;
            rlRange              = fRangeList;

            for (;;) {
                if (inputSetRangeIndex >= inputSetRangeCount) {
                    break;
                }
                int      inputSetRangeBegin  = inputSet.getRangeStart(inputSetRangeIndex);
                int      inputSetRangeEnd    = inputSet.getRangeEnd(inputSetRangeIndex);

                // skip over ranges from the range list that are completely
                //   below the current range from the input unicode set.
                while (rlRange.fEndChar < inputSetRangeBegin) {
                    rlRange = rlRange.fNext;
                }

                // If the start of the range from the range list is before with
                //   the start of the range from the unicode set, split the range list range
                //   in two, with one part being before (wholly outside of) the unicode set
                //   and the other containing the rest.
                //   Then continue the loop; the post-split current range will then be skipped
                //     over
                if (rlRange.fStartChar < inputSetRangeBegin) {
                    rlRange.split(inputSetRangeBegin);
                     continue;
                }

                // Same thing at the end of the ranges...
                // If the end of the range from the range list doesn't coincide with
                //   the end of the range from the unicode set, split the range list
                //   range in two.  The first part of the split range will be
                //   wholly inside the Unicode set.
                if (rlRange.fEndChar > inputSetRangeEnd) {
                    rlRange.split(inputSetRangeEnd+1);
                 }

                // The current rlRange is now entirely within the UnicodeSet range.
                // Add this unicode set to the list of sets for this rlRange
                if (rlRange.fIncludesSets.indexOf(usetNode) == -1) {
                    rlRange.fIncludesSets.add(usetNode);
                }

                // Advance over ranges that we are finished with.
                if (inputSetRangeEnd == rlRange.fEndChar) {
                    inputSetRangeIndex++;
                }
                rlRange = rlRange.fNext;
            }
        }

        if (fRB.fDebugEnv!=null && fRB.fDebugEnv.indexOf(""range"")>=0) { printRanges();}

        //
        //  Group the above ranges, with each group consisting of one or more
        //    ranges that are in exactly the same set of original UnicodeSets.
        //    The groups are numbered, and these group numbers are the set of
        //    input symbols recognized by the run-time state machine.
        //
        //    Numbering: # 0  (state table column 0) is unused.
        //               # 1  is reserved - table column 1 is for end-of-input
        //               # 2  is reserved - table column 2 is for beginning-in-input
        //               # 3  is the first range list.
        //
        RangeDescriptor rlSearchRange;
        for (rlRange = fRangeList; rlRange!=null; rlRange=rlRange.fNext) {
            for (rlSearchRange=fRangeList; rlSearchRange != rlRange; rlSearchRange=rlSearchRange.fNext) {
                if (rlRange.fIncludesSets.equals(rlSearchRange.fIncludesSets)) {
                    rlRange.fNum = rlSearchRange.fNum;
                    break;
                }
            }
            if (rlRange.fNum == 0) {
                fGroupCount ++;
                rlRange.fNum = fGroupCount+2; 
                rlRange.setDictionaryFlag();
                addValToSets(rlRange.fIncludesSets, fGroupCount+2);
            }
        }

        // Handle input sets that contain the special string {eof}.
        //   Column 1 of the state table is reserved for EOF on input.
        //   Column 2 is reserved for before-the-start-input.
        //            (This column can be optimized away later if there are no rule
        //             references to {bof}.)
        //   Add this column value (1 or 2) to the equivalent expression
        //     subtree for each UnicodeSet that contains the string {eof}
        //   Because {bof} and {eof} are not a characters in the normal sense,
        //   they doesn't affect the computation of ranges or TRIE.
        
        String eofString = ""eof"";
        String bofString = ""bof"";

        for (RBBINode usetNode : fRB.fUSetNodes) {
            UnicodeSet      inputSet = usetNode.fInputSet;
            if (inputSet.contains(eofString)) {
                addValToSet(usetNode, 1);
            }
            if (inputSet.contains(bofString)) {
                addValToSet(usetNode, 2);
                fSawBOF = true;
            }
        }


        if (fRB.fDebugEnv!=null  && fRB.fDebugEnv.indexOf(""rgroup"")>=0) {printRangeGroups();}
        if (fRB.fDebugEnv!=null  && fRB.fDebugEnv.indexOf(""esets"")>=0) {printSets();}


        //IntTrieBuilder(int aliasdata[], int maxdatalength, 
        //        int initialvalue, int leadunitvalue, 
        //        boolean latin1linear)
        
        fTrie = new IntTrieBuilder(null,   //   Data array  (utrie will allocate one)
                                   100000,  //   Max Data Length
                                   0,       //   Initial value for all code points
                                   0,       //   Lead Surrogate unit value,
                                   true);   //   Keep Latin 1 in separately.
        
        for (rlRange = fRangeList; rlRange!=null; rlRange=rlRange.fNext) {
            fTrie.setRange(rlRange.fStartChar, rlRange.fEndChar+1, rlRange.fNum, true);
        }
    }",Build the set of unicode sets.
"private ClassNode getClassNode(InputStream inputStream, int flags) {
        ClassNode cn = new ClassNode();
        try {
            ClassReader reader = new ClassReader(inputStream);
            reader.accept(cn, flags);
            inputStream.close();
        } catch (IOException e) {
            cn = null;
        }
        return cn;
    }",Get a ClassNode from an input stream.
"public final EObject ruleAndExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_NotExpression_0 = null;

        EObject lv_right_3_0 = null;


         enterRule(); 
            
        try {
            // InternalSimpleAntlr.g:1025:28: ( (this_NotExpression_0= ruleNotExpression ( () otherlv_2= '&&' ( (lv_right_3_0= ruleNotExpression ) ) )* ) )
            // InternalSimpleAntlr.g:1026:1: (this_NotExpression_0= ruleNotExpression ( () otherlv_2= '&&' ( (lv_right_3_0= ruleNotExpression ) ) )* )
            {
            // InternalSimpleAntlr.g:1026:1: (this_NotExpression_0= ruleNotExpression ( () otherlv_2= '&&' ( (lv_right_3_0= ruleNotExpression ) ) )* )
            // InternalSimpleAntlr.g:1027:2: this_NotExpression_0= ruleNotExpression ( () otherlv_2= '&&' ( (lv_right_3_0= ruleNotExpression ) ) )*
            {
            if ( state.backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( state.backtracking==0 ) {
               
                      newCompositeNode(grammarAccess.getAndExpressionAccess().getNotExpressionParserRuleCall_0()); 
                  
            }
            pushFollow(FOLLOW_26);
            this_NotExpression_0=ruleNotExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               
                      current = this_NotExpression_0; 
                      afterParserOrEnumRuleCall();
                  
            }
            // InternalSimpleAntlr.g:1038:1: ( () otherlv_2= '&&' ( (lv_right_3_0= ruleNotExpression ) ) )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==32) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // InternalSimpleAntlr.g:1038:2: () otherlv_2= '&&' ( (lv_right_3_0= ruleNotExpression ) )
            	    {
            	    // InternalSimpleAntlr.g:1038:2: ()
            	    // InternalSimpleAntlr.g:1039:2: 
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	  /* */ 
            	      	
            	    }
            	    if ( state.backtracking==0 ) {

            	              current = forceCreateModelElementAndSet(
            	                  grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
            	                  current);
            	          
            	    }

            	    }

            	    otherlv_2=(Token)match(input,32,FOLLOW_20); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	          	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAmpersandAmpersandKeyword_1_1());
            	          
            	    }
            	    // InternalSimpleAntlr.g:1051:1: ( (lv_right_3_0= ruleNotExpression ) )
            	    // InternalSimpleAntlr.g:1052:1: (lv_right_3_0= ruleNotExpression )
            	    {
            	    // InternalSimpleAntlr.g:1052:1: (lv_right_3_0= ruleNotExpression )
            	    // InternalSimpleAntlr.g:1053:3: lv_right_3_0= ruleNotExpression
            	    {
            	    if ( state.backtracking==0 ) {
            	       
            	      	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightNotExpressionParserRuleCall_1_2_0()); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_right_3_0=ruleNotExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = createModelElementForParent(grammarAccess.getAndExpressionRule());
            	      	        }
            	             		set(
            	             			current, 
            	             			""right"",
            	              		lv_right_3_0, 
            	              		""org.eclipse.xtext.generator.parser.antlr.debug.SimpleAntlr.NotExpression"");
            	      	        afterParserOrEnumRuleCall();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }",Use this method to enter the AndExpression
"@Override
    protected Class<?> loadClass(String name, boolean resolve)
            throws ClassNotFoundException {
        synchronized (LaunchedURLClassLoader.LOCK_PROVIDER.getLock(this, name)) {
            Class<?> loadedClass = findLoadedClass(name);
            if (loadedClass == null) {
                Handler.setUseFastConnectionExceptions(true);
                try {
                    loadedClass = doLoadClass(name);
                } finally {
                    Handler.setUseFastConnectionExceptions(false);
                }
            }
            if (resolve) {
                resolveClass(loadedClass);
            }
            return loadedClass;
        }
    }",Load a class from the URL classloader.
"@SafeVarargs
	public static <G extends Gene<?, G>, C extends Comparable<? super C>>
	ConcatEngine<G, C> of(final EvolutionStreamable<G, C>... engines) {
		return new ConcatEngine<>(Arrays.asList(engines));
	}",Creates a new concat engine from the given list of engines.
"public void onModuleLoad() {
    asyncGetJson(AGGREGATORS_URL, new GotJsonCallback() {
      public void got(final JSONValue json) {
        // Do we need more manual type checking?  Not sure what will happen
        // in the browser if something other than an array is returned.
        final JSONArray aggs = json.isArray();
        for (int i = 0; i < aggs.size(); i++) {
          aggregators.add(aggs.get(i).isString().stringValue());
        }
        ((MetricForm) metrics.getWidget(0)).setAggregators(aggregators);
        refreshFromQueryString();
        refreshGraph();
      }
    });

    // All UI elements need to regenerate the graph when changed.
    {
      final ValueChangeHandler<Date> vch = new ValueChangeHandler<Date>() {
        public void onValueChange(final ValueChangeEvent<Date> event) {
          refreshGraph();
        }
      };
      TextBox tb = start_datebox.getTextBox();
      tb.addBlurHandler(refreshgraph);
      tb.addKeyPressHandler(refreshgraph);
      start_datebox.addValueChangeHandler(vch);
      tb = end_datebox.getTextBox();
      tb.addBlurHandler(refreshgraph);
      tb.addKeyPressHandler(refreshgraph);
      end_datebox.addValueChangeHandler(vch);
    }
    autoreoload_interval.addBlurHandler(refreshgraph);
    autoreoload_interval.addKeyPressHandler(refreshgraph);
    yrange.addBlurHandler(refreshgraph);
    yrange.addKeyPressHandler(refreshgraph);
    y2range.addBlurHandler(refreshgraph);
    y2range.addKeyPressHandler(refreshgraph);
    ylog.addClickHandler(new AdjustYRangeCheckOnClick(ylog, yrange));
    y2log.addClickHandler(new AdjustYRangeCheckOnClick(y2log, y2range));
    ylog.addClickHandler(refreshgraph);
    y2log.addClickHandler(refreshgraph);
    ylabel.addBlurHandler(refreshgraph);
    ylabel.addKeyPressHandler(refreshgraph);
    y2label.addBlurHandler(refreshgraph);
    y2label.addKeyPressHandler(refreshgraph);
    yformat.addBlurHandler(refreshgraph);
    yformat.addKeyPressHandler(refreshgraph);
    y2format.addBlurHandler(refreshgraph);
    y2format.addKeyPressHandler(refreshgraph);
    wxh.addBlurHandler(refreshgraph);
    wxh.addKeyPressHandler(refreshgraph);
    global_annotations.addBlurHandler(refreshgraph);
    global_annotations.addKeyPressHandler(refreshgraph);
    horizontalkey.addClickHandler(refreshgraph);
    keybox.addClickHandler(refreshgraph);
    nokey.addClickHandler(refreshgraph);
    smooth.addClickHandler(refreshgraph);
    styles.addChangeHandler(refreshgraph);

    yrange.setValidationRegexp(""^(""                            // Nothing or
                               + ""|\\[([-+.0-9eE]+|\\*)?""      // ""[start
                               + "":([-+.0-9eE]+|\\*)?\\])$"");  //   :end]""
    yrange.setVisibleLength(5);
    yrange.setMaxLength(44);  // MAX=2^26=20 chars: ""[-$MAX:$MAX]""
    yrange.setText(""[0:]"");

    y2range.setValidationRegexp(""^(""                            // Nothing or
                                + ""|\\[([-+.0-9eE]+|\\*)?""      // ""[start
                                + "":([-+.0-9eE]+|\\*)?\\])$"");  //   :end]""
    y2range.setVisibleLength(5);
    y2range.setMaxLength(44);  // MAX=2^26=20 chars: ""[-$MAX:$MAX]""
    y2range.setText(""[0:]"");
    y2range.setEnabled(false);
    y2log.setEnabled(false);

    ylabel.setVisibleLength(10);
    ylabel.setMaxLength(50);  // Arbitrary limit.
    y2label.setVisibleLength(10);
    y2label.setMaxLength(50);  // Arbitrary limit.
    y2label.setEnabled(false);

    yformat.setValidationRegexp(""^(|.*%..*)$"");  // Nothing or at least one %?
    yformat.setVisibleLength(10);
    yformat.setMaxLength(16);  // Arbitrary limit.
    y2format.setValidationRegexp(""^(|.*%..*)$"");  // Nothing or at least one %?
    y2format.setVisibleLength(10);
    y2format.setMaxLength(16);  // Arbitrary limit.
    y2format.setEnabled(false);

    wxh.setValidationRegexp(""^[1-9][0-9]{2,}x[1-9][0-9]{2,}$"");  // 100x100
    wxh.setVisibleLength(9);
    wxh.setMaxLength(11);  // 99999x99999
    wxh.setText((Window.getClientWidth() - 20) + ""x""
                + (Window.getClientHeight() * 4 / 5));

    final FlexTable table = new FlexTable();
    table.setText(0, 0, ""From"");
    {
      final HorizontalPanel hbox = new HorizontalPanel();
      hbox.add(new InlineLabel(""To""));
      final Anchor now = new Anchor(""(now)"");
      now.addClickHandler(new ClickHandler() {
        public void onClick(final ClickEvent event) {
          end_datebox.setValue(new Date());
          refreshGraph();
        }
      });
      hbox.add(now);
      hbox.add(autoreload);
      hbox.setWidth(""100%"");
      table.setWidget(0, 1, hbox);
    }
    autoreload.addValueChangeHandler(new ValueChangeHandler<Boolean>() {
      @Override
      public void onValueChange(final ValueChangeEvent<Boolean> event) {
        if (autoreload.getValue()) {
          final HorizontalPanel hbox = new HorizontalPanel();
          hbox.setWidth(""100%"");
          hbox.add(new InlineLabel(""Every:""));
          hbox.add(autoreoload_interval);
          hbox.add(new InlineLabel(""seconds""));
          table.setWidget(1, 1, hbox);
          if (autoreoload_interval.getValue().isEmpty()) {
            autoreoload_interval.setValue(""15"");
          }
          autoreoload_interval.setFocus(true);
          lastgraphuri = """";  // Force refreshGraph.
          refreshGraph();     // Trigger the 1st auto-reload
        } else {
          table.setWidget(1, 1, end_datebox);
        }
      }
    });
    autoreoload_interval.setValidationRegexp(""^([5-9]|[1-9][0-9]+)$"");  // >=5s
    autoreoload_interval.setMaxLength(4);
    autoreoload_interval.setVisibleLength(8);

    table.setWidget(1, 0, start_datebox);
    table.setWidget(1, 1, end_datebox);
    {
      final HorizontalPanel hbox = new HorizontalPanel();
      hbox.add(new InlineLabel(""WxH:""));
      hbox.add(wxh);
      table.setWidget(0, 3, hbox);
    }
    {
      final HorizontalPanel hbox = new HorizontalPanel();
      hbox.add(global_annotations);
      table.setWidget(0, 4, hbox);
    }
    {
      addMetricForm(""metric 1"", 0);
      metrics.selectTab(0);
      metrics.add(new InlineLabel(""Loading...""), ""+"");
      metrics.addBeforeSelectionHandler(new BeforeSelectionHandler<Integer>() {
        public void onBeforeSelection(final BeforeSelectionEvent<Integer> event) {
          final int item = event.getItem();
          final int nitems = metrics.getWidgetCount();
          if (item == nitems - 1) {  // Last item: the ""+"" was clicked.
            event.cancel();
            final MetricForm metric = addMetricForm(""metric "" + nitems, item);
            metrics.selectTab(item);
            metric.setFocus(true);
          }
        }
      });
      table.setWidget(2, 0, metrics);
    }
    table.getFlexCellFormatter().setColSpan(2, 0, 2);
    table.getFlexCellFormatter().setRowSpan(1, 3, 2);
    final DecoratedTabPanel optpanel = new DecoratedTabPanel();
    optpanel.add(makeAxesPanel(), ""Axes"");
    optpanel.add(makeKeyPanel(), ""Key"");
    optpanel.add(makeStylePanel(), ""Style"");
    optpanel.selectTab(0);
    table.setWidget(1, 3, optpanel);
    table.getFlexCellFormatter().setColSpan(1, 3, 2);

    final DecoratorPanel decorator = new DecoratorPanel();
    decorator.setWidget(table);
    final VerticalPanel graphpanel = new VerticalPanel();
    graphpanel.add(decorator);
    {
      final VerticalPanel graphvbox = new VerticalPanel();
      graphvbox.add(graphstatus);

      graph.setVisible(false);

      // Put the graph image element and the zoombox elements inside the absolute panel
      graphbox.add(graph, 0, 0);
      zoom_box.setVisible(false);
      graphbox.add(zoom_box, 0, 0);
      graph.addMouseOverHandler(new MouseOverHandler() {
        public void onMouseOver(final MouseOverEvent event) {
          final Style style = graphbox.getElement().getStyle();
          style.setCursor(Cursor.CROSSHAIR);
        }
      });
      graph.addMouseOutHandler(new MouseOutHandler() {
        public void onMouseOut(final MouseOutEvent event) {
          final Style style = graphbox.getElement().getStyle();
          style.setCursor(Cursor.AUTO);
        }
      });

      graphvbox.add(graphbox);
      graph.addErrorHandler(new ErrorHandler() {
        public void onError(final ErrorEvent event) {
          graphstatus.setText(""Oops, failed to load the graph."");
        }
      });
      graph.addLoadHandler(new LoadHandler() {
        public void onLoad(final LoadEvent event) {
          graphbox.setWidth(graph.getWidth() + ""px"");
          graphbox.setHeight(graph.getHeight() + ""px"");
        }
      });

      graphpanel.add(graphvbox);
    }
    final DecoratedTabPanel mainpanel = new DecoratedTabPanel();
    mainpanel.setWidth(""100%"");
    mainpanel.add(graphpanel, ""Graph"");
    mainpanel.add(stats_table, ""Stats"");
    mainpanel.add(logs, ""Logs"");
    mainpanel.add(build_data, ""Version"");
    mainpanel.selectTab(0);
    mainpanel.addBeforeSelectionHandler(new BeforeSelectionHandler<Integer>() {
      public void onBeforeSelection(final BeforeSelectionEvent<Integer> event) {
        clearError();
        final int item = event.getItem();
        switch (item) {
          case 1: refreshStats(); return;
          case 2: refreshLogs(); return;
          case 3: refreshVersion(); return;
        }
      }
    });
    final VerticalPanel root = new VerticalPanel();
    root.setWidth(""100%"");
    root.add(current_error);
    current_error.setVisible(false);
    current_error.addStyleName(""dateBoxFormatError"");
    root.add(mainpanel);
    RootPanel.get(""queryuimain"").add(root);
    // Must be done at the end, once all the widgets are attached.
    ensureSameWidgetSize(optpanel);

    History.addHistoryListener(this);
  }",On module load.
"public static AssociativeArray normalDistributionGetParams(FlatDataCollection flatDataCollection) {
        AssociativeArray params = new AssociativeArray();
        params.put(""mean"", Descriptives.mean(flatDataCollection));
        params.put(""variance"", Descriptives.variance(flatDataCollection, true));
        return params;
    }",Get the parameters for a normal distribution
"public EjbRelationshipRoleType<EjbRelationType<T>> getOrCreateEjbRelationshipRole()
   {
      List<Node> nodeList = childNode.get(""ejb-relationship-role"");
      if (nodeList != null &&  nodeList.size() > 0)
      {
         return new EjbRelationshipRoleTypeImpl<EjbRelationType<T>>(this, ""ejb-relationship-role"", childNode, nodeList.get(0));
      }
      return createEjbRelationshipRole();
   }",Gets the ejb - relationship - role.
"@Nullable
    @Override
    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, ""Query: "" + uri);
        final File file = getFileForUri(uri);
        if (file == null) {
            return null;
        }
        if (projection == null) {
            projection = COLUMNS;
        }
        final Map<String, Object> columnValueMap = new LinkedHashMap<>();
        for (String column : projection) {
            if (column.equals(OpenableColumns.DISPLAY_NAME)) {
                columnValueMap.put(OpenableColumns.DISPLAY_NAME, file.getName());
            } else if (column.equals(OpenableColumns.SIZE)) {
                columnValueMap.put(OpenableColumns.SIZE, file.length());
            }
        }
        final MatrixCursor cursor = new MatrixCursor(columnValueMap.keySet().toArray(new String[columnValueMap.size()]), 1);
        cursor.addRow(columnValueMap.values());
        return cursor;
    }",Query for a single entity in a database.
"private ZealotKhala doNormal(String prefix, String field, Object value, String suffix, boolean match) {
        if (match) {
            SqlInfoBuilder.newInstace(this.source.setPrefix(prefix)).buildNormalSql(field, value, suffix);
            this.source.resetPrefix();
        }
        return this;
    }",Zealot khala doNormal.
"public DocumentPath parent() {
    if (pathElements.size() <= 1) {
      return null;
    }
    return new DocumentPath(this.pathElements.subList(0, pathElements.size() - 1));
  }",Gets the parent of this path.
"@Override
    public Date parseRFC1123Time(String input) throws ParseException {
        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            Tr.debug(tc, ""rfc1123 parsing ["" + input + ""]"");
        }
        Date d = attemptParse(getFormat().get1123Parse(), input);
        if (null == d) {
            throw new ParseException(""Unparseable ["" + input + ""]"", 0);
        }
        return d;
    }",This method is used to parse the input string as an RFC1123 time.
"public String readStaticExportPublishedResourceParameters(CmsRequestContext context, String rfsName)
    throws CmsException {

        CmsDbContext dbc = m_dbContextFactory.getDbContext(context);
        String result = null;
        try {
            result = m_driverManager.readStaticExportPublishedResourceParameters(dbc, rfsName);
        } catch (Exception e) {
            dbc.report(
                null,
                Messages.get().container(Messages.ERR_READ_STATEXP_PUBLISHED_RESOURCE_PARAMS_1, rfsName),
                e);
        } finally {
            dbc.clear();
        }
        return result;
    }",Reads the static export published resource parameters.
"public Parser<?> phrase(String... tokenNames) {
    Parser<?>[] wordParsers = new Parser<?>[tokenNames.length];
    for (int i = 0; i < tokenNames.length; i++) {
      wordParsers[i] = token(tokenNames[i]);
    }
    String phrase = Strings.join("" "", tokenNames);
    return Parsers.sequence(wordParsers).atomic().retn(phrase).label(phrase);
  }",Create a phrase from a list of tokens
"public final EObject ruleConditionalBranch() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_UnorderedGroup_0 = null;

        EObject lv_guardCondition_3_0 = null;

        EObject lv_elements_5_0 = null;



        	enterRule();

        try {
            // InternalXtext.g:1048:2: ( (this_UnorderedGroup_0= ruleUnorderedGroup | ( () otherlv_2= '<' ( (lv_guardCondition_3_0= ruleDisjunction ) ) otherlv_4= '>' ( (lv_elements_5_0= ruleAbstractToken ) )+ ) ) )
            // InternalXtext.g:1049:2: (this_UnorderedGroup_0= ruleUnorderedGroup | ( () otherlv_2= '<' ( (lv_guardCondition_3_0= ruleDisjunction ) ) otherlv_4= '>' ( (lv_elements_5_0= ruleAbstractToken ) )+ ) )
            {
            // InternalXtext.g:1049:2: (this_UnorderedGroup_0= ruleUnorderedGroup | ( () otherlv_2= '<' ( (lv_guardCondition_3_0= ruleDisjunction ) ) otherlv_4= '>' ( (lv_elements_5_0= ruleAbstractToken ) )+ ) )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( ((LA28_0>=RULE_STRING && LA28_0<=RULE_ID)||LA28_0==15||LA28_0==34||(LA28_0>=39 && LA28_0<=40)||(LA28_0>=42 && LA28_0<=43)) ) {
                alt28=1;
            }
            else if ( (LA28_0==27) ) {
                alt28=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("""", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // InternalXtext.g:1050:3: this_UnorderedGroup_0= ruleUnorderedGroup
                    {

                    			newCompositeNode(grammarAccess.getConditionalBranchAccess().getUnorderedGroupParserRuleCall_0());
                    		
                    pushFollow(FollowSets000.FOLLOW_2);
                    this_UnorderedGroup_0=ruleUnorderedGroup();

                    state._fsp--;


                    			current = this_UnorderedGroup_0;
                    			afterParserOrEnumRuleCall();
                    		

                    }
                    break;
                case 2 :
                    // InternalXtext.g:1059:3: ( () otherlv_2= '<' ( (lv_guardCondition_3_0= ruleDisjunction ) ) otherlv_4= '>' ( (lv_elements_5_0= ruleAbstractToken ) )+ )
                    {
                    // InternalXtext.g:1059:3: ( () otherlv_2= '<' ( (lv_guardCondition_3_0= ruleDisjunction ) ) otherlv_4= '>' ( (lv_elements_5_0= ruleAbstractToken ) )+ )
                    // InternalXtext.g:1060:4: () otherlv_2= '<' ( (lv_guardCondition_3_0= ruleDisjunction ) ) otherlv_4= '>' ( (lv_elements_5_0= ruleAbstractToken ) )+
                    {
                    // InternalXtext.g:1060:4: ()
                    // InternalXtext.g:1061:5: 
                    {

                    					current = forceCreateModelElement(
                    						grammarAccess.getConditionalBranchAccess().getGroupAction_1_0(),
                    						current);
                    				

                    }

                    otherlv_2=(Token)match(input,27,FollowSets000.FOLLOW_26); 

                    				newLeafNode(otherlv_2, grammarAccess.getConditionalBranchAccess().getLessThanSignKeyword_1_1());
                    			
                    // InternalXtext.g:1071:4: ( (lv_guardCondition_3_0= ruleDisjunction ) )
                    // InternalXtext.g:1072:5: (lv_guardCondition_3_0= ruleDisjunction )
                    {
                    // InternalXtext.g:1072:5: (lv_guardCondition_3_0= ruleDisjunction )
                    // InternalXtext.g:1073:6: lv_guardCondition_3_0= ruleDisjunction
                    {

                    						newCompositeNode(grammarAccess.getConditionalBranchAccess().getGuardConditionDisjunctionParserRuleCall_1_2_0());
                    					
                    pushFollow(FollowSets000.FOLLOW_27);
                    lv_guardCondition_3_0=ruleDisjunction();

                    state._fsp--;


                    						if (current==null) {
                    							current = createModelElementForParent(grammarAccess.getConditionalBranchRule());
                    						}
                    						set(
                    							current,
                    							""guardCondition"",
                    							lv_guardCondition_3_0,
                    							""org.eclipse.xtext.Xtext.Disjunction"");
                    						afterParserOrEnumRuleCall();
                    					

                    }


                    }

                    otherlv_4=(Token)match(input,28,FollowSets000.FOLLOW_28); 

                    				newLeafNode(otherlv_4, grammarAccess.getConditionalBranchAccess().getGreaterThanSignKeyword_1_3());
                    			
                    // InternalXtext.g:1094:4: ( (lv_elements_5_0= ruleAbstractToken ) )+
                    int cnt27=0;
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( ((LA27_0>=RULE_STRING && LA27_0<=RULE_ID)||LA27_0==15||LA27_0==34||(LA27_0>=39 && LA27_0<=40)||(LA27_0>=42 && LA27_0<=43)) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // InternalXtext.g:1095:5: (lv_elements_5_0= ruleAbstractToken )
                    	    {
                    	    // InternalXtext.g:1095:5: (lv_elements_5_0= ruleAbstractToken )
                    	    // InternalXtext.g:1096:6: lv_elements_5_0= ruleAbstractToken
                    	    {

                    	    						newCompositeNode(grammarAccess.getConditionalBranchAccess().getElementsAbstractTokenParserRuleCall_1_4_0());
                    	    					
                    	    pushFollow(FollowSets000.FOLLOW_29);
                    	    lv_elements_5_0=ruleAbstractToken();

                    	    state._fsp--;


                    	    						if (current==null) {
                    	    							current = createModelElementForParent(grammarAccess.getConditionalBranchRule());
                    	    						}
                    	    						add(
                    	    							current,
                    	    							""elements"",
                    	    							lv_elements_5_0,
                    	    							""org.eclipse.xtext.Xtext.AbstractToken"");
                    	    						afterParserOrEnumRuleCall();
                    	    					

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt27 >= 1 ) break loop27;
                                EarlyExitException eee =
                                    new EarlyExitException(27, input);
                                throw eee;
                        }
                        cnt27++;
                    } while (true);


                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }",Generates a ConditionalBranch exception
"public static LocalDate adjustToFirstDayOfWeek(LocalDate date, DayOfWeek firstDayOfWeek) {
        LocalDate newDate = date.with(DAY_OF_WEEK, firstDayOfWeek.getValue());
        if (newDate.isAfter(date)) {
            newDate = newDate.minusWeeks(1);
        }

        return newDate;
    }",Adjust to first day of week.
"public TableDescription createTable(ProvisionedThroughput throughput) {
        final CreateTableRequest request = mapper.generateCreateTableRequest(model.targetType());
        request.setProvisionedThroughput(throughput);
        if (request.getGlobalSecondaryIndexes() != null) {
            for (final GlobalSecondaryIndex gsi : request.getGlobalSecondaryIndexes()) {
                gsi.setProvisionedThroughput(throughput);
            }
        }
        return db.createTable(request).getTableDescription();
    }",Create a table.
"private void addColumn(String label, int width, Column<CmsHistoryResourceBean, ?> col) {

        addColumn(col, label);
        setColumnWidth(col, width, Unit.PX);
    }",Add a column to the table.
"public boolean accept(ItemData item)
   {
      QPathEntry itemEntry = item.getQPath().getEntries()[item.getQPath().getDepth()];
      return entry.equals(itemEntry);
   }",Checks if the item is a duplicate of the existing one.
"public void readImage() {
    if (ifd.containsTagId(TiffTags.getTagId(""StripOffsets""))
        || ifd.containsTagId(TiffTags.getTagId(""StripBYTECount""))) {
      readStrips();
    }
    if (ifd.containsTagId(TiffTags.getTagId(""TileOffsets""))
        || ifd.containsTagId(TiffTags.getTagId(""TileBYTECounts""))) {
      readTiles();
    }
  }",Read image.
"@Override
  public OperationFuture<CASResponse>
  asyncCAS(String key, long casId, Object value) {
    return asyncCAS(key, casId, value, transcoder);
  }",Asyn CAS operation.
"@Override
	protected String applyLink( String text, String linkId ) {

		String link;
		if( this.options.containsKey( DocConstants.OPTION_HTML_EXPLODED ))
			link = ""components/"" + linkId + "".html"".replace( "" "", ""%20"" );
		else
			link = ""#"" + createId( linkId );

		return text.replaceAll( Pattern.quote( text ), ""<a href=\"""" + link + ""\"">"" + text + ""</a>"" );
	}",Override the link method to apply the link.
"private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {
		if (candidateMethods.isEmpty()) {
			return null;
		}
		Map<TypeVariable, Type> typeParameterMap = GenericTypeResolver.getTypeVariableMap(bridgeMethod.getDeclaringClass());
		Method previousMethod = null;
		boolean sameSig = true;
		for (Method candidateMethod : candidateMethods) {
			if (isBridgeMethodFor(bridgeMethod, candidateMethod, typeParameterMap)) {
				return candidateMethod;
			}
			else if (previousMethod != null) {
				sameSig = sameSig &&
						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes());
			}
			previousMethod = candidateMethod;
		}
		return (sameSig ? candidateMethods.get(0) : null);
	}",Search candidates for bridge method.
"@Override
    public VirtualResource expand( final Resource resource )
        throws TransferException
    {
        List<Location> locations;
        if ( resource instanceof VirtualResource )
        {
            final List<ConcreteResource> concrete = ( (VirtualResource) resource ).toConcreteResources();
            final List<ConcreteResource> result = new ArrayList<ConcreteResource>();
            for ( final ConcreteResource cr : concrete )
            {
                final List<Location> expanded = expand( cr.getLocation() );
                for ( final Location location : expanded )
                {
                    result.add( new ConcreteResource( location, cr.getPath() ) );
                }
            }

            return new VirtualResource( result );
        }
        else
        {
            final ConcreteResource cr = (ConcreteResource) resource;
            locations = expand( cr.getLocation() );

            return new VirtualResource( locations, cr.getPath() );
        }
    }",Expand a VirtualResource.
"public void registerFlushDelay (Class<?> objclass, long delay)
    {
        _delays.put(objclass, Long.valueOf(delay));
    }",Registers a flush delay for a class.
"public Signature appendArg(String name, Class<?> type) {
        String[] newArgNames = new String[argNames.length + 1];
        System.arraycopy(argNames, 0, newArgNames, 0, argNames.length);
        newArgNames[argNames.length] = name;
        MethodType newMethodType = methodType.appendParameterTypes(type);
        return new Signature(newMethodType, newArgNames);
    }",Append an argument to the signature.
"@XmlElementDecl(namespace = ""http://www.opengis.net/gml"", name = ""File"")
    public JAXBElement<FileType> createFile(FileType value) {
        return new JAXBElement<FileType>(_File_QNAME, FileType.class, null, value);
    }",Create an instance of a File specification.
"public Task poll() {
    	Task result=null;
    	if(activeIndex==0)
    	{
    		result=taskList[0].poll();
    		if(result!=null)
    			result.removeFromQueue0();    		
    	}
    	else
    	{
    		result=taskList[1].poll();
    		if(result!=null)
    			result.removeFromQueue1();
    	}
    	
    	return result;     		    
    }",Poll the queue.
"public void play(int position) {
        checkState();
        ArrayList<SoundCloudTrack> tracks = mPlayerPlaylist.getPlaylist().getTracks();
        if (position >= 0 && position < tracks.size()) {
            SoundCloudTrack trackToPlay = tracks.get(position);
            mPlayerPlaylist.setPlayingTrack(position);
            PlaybackService.play(getContext(), mClientKey, trackToPlay);
        }

    }",Play the specified sound.
"public com.google.api.ads.adwords.axis.v201809.cm.SharedSetType getType() {
        return type;
    }",Gets the type value for this CdnSharedSet.
"public static current_hostname modify(nitro_service client, current_hostname resource) throws Exception
	{
		resource.validate(""modify"");
		return ((current_hostname[]) resource.update_resource(client))[0];
	}",Use this API to modify current_hostname.
"@Override
	public void read(DataInputView in) throws IOException {
		final boolean isNotNull = in.readBoolean();
		if (isNotNull) {
			final String scheme = StringUtils.readNullableString(in);
			final String userInfo = StringUtils.readNullableString(in);
			final String host = StringUtils.readNullableString(in);
			final int port = in.readInt();
			final String path = StringUtils.readNullableString(in);
			final String query = StringUtils.readNullableString(in);
			final String fragment = StringUtils.readNullableString(in);

			try {
				uri = new URI(scheme, userInfo, host, port, path, query, fragment);
			} catch (URISyntaxException e) {
				throw new IOException(""Error reconstructing URI"", e);
			}
		}
	}",Read the content of the CIDENTENTENTENT XML.
"@RequestMapping(method = RequestMethod.POST, params = ""action=removeByFName"")
    public ModelAndView removeByFName(
            HttpServletRequest request,
            HttpServletResponse response,
            @RequestParam(value = ""fname"") String fname)
            throws IOException {

        IUserInstance ui = userInstanceManager.getUserInstance(request);

        UserPreferencesManager upm = (UserPreferencesManager) ui.getPreferencesManager();
        IUserLayoutManager ulm = upm.getUserLayoutManager();

        try {
            String elementId =
                    ulm.getUserLayout().findNodeId(new PortletSubscribeIdResolver(fname));
            if (elementId != null) {
                // Delete the requested element node.  This code is the same for
                // all node types, so we can just have a generic action.
                if (!ulm.deleteNode(elementId)) {
                    logger.info(
                            ""Failed to remove element ID {} from layout root folder ID {}, delete node returned false"",
                            elementId,
                            ulm.getRootFolderId());
                    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                    return new ModelAndView(
                            ""jsonView"",
                            Collections.singletonMap(
                                    ""error"",
                                    getMessage(
                                            ""error.element.update"",
                                            ""Unable to update element"",
                                            RequestContextUtils.getLocale(request))));
                }
            } else {
                response.sendError(HttpServletResponse.SC_BAD_REQUEST);
                return null;
            }

            ulm.saveUserLayout();

            return new ModelAndView(""jsonView"", Collections.emptyMap());

        } catch (PortalException e) {
            return handlePersistError(request, response, e);
        }
    }",Remove an element from the user s layout by fname.
"@Override
	public void caseILexLocation(ILexLocation node) throws AnalysisException
	{
		AstLocation location = new AstLocation(current, node);
		if (reference.contains(node.getStartOffset(), node.getEndOffset(), node.getFile()))// we need to do set some
																							// upper limit on the
																							// precision here. e.g. an
																							// operation may match but
																							// it has a body that may
																							// contain a better match
		{
			throw new LocationFound(location);
		} else if(reference.canMatch(node.getFile()))
		{
			closest = getClosest(reference, location);
		}
	}",implement the default implementation of the ILexLocation interface.
"public static ServerWebExchangeMatcher pathMatchers(HttpMethod method, String... patterns) {
		List<ServerWebExchangeMatcher> matchers = new ArrayList<>(patterns.length);
		for (String pattern : patterns) {
			matchers.add(new PathPatternParserServerWebExchangeMatcher(pattern, method));
		}
		return new OrServerWebExchangeMatcher(matchers);
	}",Create a path matcher from a list of pattern strings.
"public Matrix4x3d rotation(double angle, Vector3dc axis) {
        return rotation(angle, axis.x(), axis.y(), axis.z());
    }",Create a rotation matrix that rotates the given axis.
"public KeyAreaInfo setKeyArea(String strKeyName)
    {
        KeyAreaInfo keyArea = null;
        if (strKeyName == null)
            strKeyName = Constants.PRIMARY_KEY;
        for (m_iDefaultOrder = Constants.MAIN_KEY_AREA; m_iDefaultOrder < this.getKeyAreaCount() - Constants.MAIN_KEY_AREA; m_iDefaultOrder++)
        {
            keyArea = this.getKeyArea(m_iDefaultOrder);
            if (keyArea.getKeyName().equals(strKeyName))
                return keyArea;     // Found key area
        }
        if (Constants.PRIMARY_KEY.equals(strKeyName))
        {
            m_iDefaultOrder = Constants.MAIN_KEY_AREA;  // Set to default.
            return this.getKeyArea(m_iDefaultOrder);
        }
        m_iDefaultOrder = Constants.MAIN_KEY_AREA;  // Not found!!! Set to default.
        return null;
    }",Set the key area.
"public void marshall(GetDeploymentStatusRequest getDeploymentStatusRequest, ProtocolMarshaller protocolMarshaller) {

        if (getDeploymentStatusRequest == null) {
            throw new SdkClientException(""Invalid argument passed to marshall(...)"");
        }

        try {
            protocolMarshaller.marshall(getDeploymentStatusRequest.getDeploymentId(), DEPLOYMENTID_BINDING);
            protocolMarshaller.marshall(getDeploymentStatusRequest.getGroupId(), GROUPID_BINDING);
        } catch (Exception e) {
            throw new SdkClientException(""Unable to marshall request to JSON: "" + e.getMessage(), e);
        }
    }",marshalls the given GetDeploymentStatusRequest to the JSON object.
"public String pipelineWrite(String key, DataGenerator dataGenerator, int max_pipe_keys, int min_pipe_keys)
            throws Exception {
        // Create a random key between [0,MAX_PIPE_KEYS]
        int pipe_keys = randomGenerator.nextInt(max_pipe_keys);

        // Make sure that the number of keys in the pipeline are at least
        // MIN_PIPE_KEYS
        pipe_keys = Math.max(min_pipe_keys, pipe_keys);

        DynoJedisPipeline pipeline = this.jedisClient.get().pipelined();
        Map<String, Response<String>> responses = new HashMap<>();

        /**
         * writeSingle returns a single string, so we want to create a
         * StringBuilder to append all the keys in the form ""key_n"". This is
         * just used to return a single string
         */
        StringBuilder sb = new StringBuilder();
        // Iterate across the number of keys in the pipeline and set
        for (int n = 0; n < pipe_keys; ++n) {
            String nth_key = key + ""_"" + n;
            sb.append(nth_key);
            Response<String> resp = pipeline.set(key, key + dataGenerator.getRandomValue() + key);
            responses.put(nth_key, resp);
        }
        pipeline.sync();

        return sb.toString();
    }",This method is a pipeline write method.
"private String getUserAccessId(String userName) {

        try {
            SecurityService securityService = securityServiceRef.getService();
            UserRegistryService userRegistryService = securityService.getUserRegistryService();
            UserRegistry userRegistry = userRegistryService.getUserRegistry();
            String realm = userRegistry.getRealm();
            String uniqueId = userRegistry.getUniqueUserId(userName);
            return AccessIdUtil.createAccessId(AccessIdUtil.TYPE_USER, realm, uniqueId);
        } catch (EntryNotFoundException e) {
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
                Tr.debug(tc, ""Caught exception getting the access id for ""
                             + userName + "": "" + e);
            }
        } catch (RegistryException e) {
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
                Tr.debug(tc, ""Caught exception getting the access id for ""
                             + userName + "": "" + e);
            }
        }
        return null;
    }",Gets the access id for a user.
"public void print(String s) throws IOException
  {
    if (_startLine)
      printIndent();

    if (s == null) {
      _lastCr = false;
      _os.print(""null"");

      return;
    }

    int len = s.length();
    for (int i = 0; i < len; i++) {
      int ch = s.charAt(i);

      if (ch == '\n' && !_lastCr)
        _destLine++;
      else if (ch == '\r')
        _destLine++;

      _lastCr = ch == '\r';

      _os.print((char) ch);
    }
  }",Print a string to the output stream.
"public static <T> Map<Key<T>, Class<? extends T>> associateInterfaceToImplementations(Class<T> anInterface,
            Collection<Class<? extends T>> implementations, boolean overridingMode) {
        return BindingUtils.resolveBindingDefinitions(anInterface, implementations.stream()
                .filter(overridingMode ? isOverridingImplementation() : isOverridingImplementation().negate())
                .collect(Collectors.toList()));
    }",Associate the given interface with the given implementation classes.
"public static WeldContainer current() {
        List<String> ids = WeldContainer.getRunningContainerIds();
        if (ids.size() == 1) {
            return WeldContainer.instance(ids.get(0));
        } else {
            // if there is either no container or multiple containers we want to throw exception
            // in this case Weld cannot determine which container is ""current""
            throw WeldSELogger.LOG.zeroOrMoreThanOneContainerRunning();
        }
    }",Get the current container
"@NonNull
    public Expression notEqualTo(@NonNull Expression expression) {
        if (expression == null) {
            throw new IllegalArgumentException(""expression cannot be null."");
        }
        return new BinaryExpression(this, expression, BinaryExpression.OpType.NotEqualTo);
    }",Method to construct the Not Equal To expression for a Sequence Class.
"public void cleanTemp() {
    CommandLine dumpcommand = adbCommand(""shell"", ""rm"", ""-r"",
        ""/data/local/tmp/local/tmp/dump.xml"");
    executeCommandQuietly(dumpcommand);
    try {
      // give it a second to recover from the activity start
      Thread.sleep(1000);
    } catch (InterruptedException ie) {
      throw new RuntimeException(ie);
    }

    CommandLine qiancommand = adbCommand(""shell"", ""rm"", ""-r"",
        ""/data/local/tmp/local/tmp/qian.xml"");
    String output = executeCommandQuietly(qiancommand);
    log.debug(""Delete file qian.xml: {}"", output);
    try {
      // give it a second to recover from the activity start
      Thread.sleep(1000);
    } catch (InterruptedException ie) {
      throw new RuntimeException(ie);
    }

    CommandLine command = adbCommand(""shell"", ""rm"", ""-r"",
        ""/data/local/tmp/uidump.xml"");
    executeCommandQuietly(command);
    try {
      // give it a second to recover from the activity start
      Thread.sleep(1000);
    } catch (InterruptedException ie) {
      throw new RuntimeException(ie);
    }
  }",Clean up the temp files
"@ConditionalOnClass(name = {""io.grpc.netty.shaded.io.netty.channel.Channel"",
            ""io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder""})
    @Bean
    public ShadedNettyGrpcServerFactory shadedNettyGrpcServerFactory(final GrpcServerProperties properties,
            final GrpcServiceDiscoverer serviceDiscoverer, final List<GrpcServerConfigurer> serverConfigurers) {
        final ShadedNettyGrpcServerFactory factory = new ShadedNettyGrpcServerFactory(properties, serverConfigurers);
        for (final GrpcServiceDefinition service : serviceDiscoverer.findGrpcServices()) {
            factory.addService(service);
        }
        return factory;
    }",Shaded Netty Grpc Server Factory.
"final byte[] decodeChecked(CharSequence chars)
      throws DecodingException {
    chars = trimTrailingPadding(chars);
    byte[] tmp = new byte[maxDecodedSize(chars.length())];
    int len = decodeTo(tmp, chars);
    return extract(tmp, len);
  }",Decode a UTF - 8 encoded sequence of bytes.
"public String userActionItem(String action, String uid, String iid,
      Map<String, Object> properties, DateTime eventTime)
      throws ExecutionException, InterruptedException, IOException {
    return createEvent(userActionItemAsFuture(action, uid, iid, properties, eventTime));
  }",UserActionItem Method.
"public void slcount(final String keyspace, final String uid) {
        slcount(SafeEncoder.encode(keyspace), SafeEncoder.encode(uid));
    }",Count the number of nodes in a keyspace.
"@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case AfplibPackage.FNNRG2__TSID_LEN:
				return TSID_LEN_EDEFAULT == null ? tsidLen != null : !TSID_LEN_EDEFAULT.equals(tsidLen);
			case AfplibPackage.FNNRG2__TSID:
				return TSID_EDEFAULT == null ? tsid != null : !TSID_EDEFAULT.equals(tsid);
		}
		return super.eIsSet(featureID);
	}",Replies if the featureID is set to a value.
"protected int getColor(Context ctx) {
        int color;
        if (this.isEnabled()) {
            color = ColorHolder.color(getTextColor(), ctx, R.attr.material_drawer_primary_text, R.color.material_drawer_primary_text);
        } else {
            color = ColorHolder.color(getDisabledTextColor(), ctx, R.attr.material_drawer_hint_text, R.color.material_drawer_hint_text);
        }
        return color;
    }",Get the color of the image.
"protected ByteBuffer inputStreamToByteBuffer() throws IOException {
        return byteBuffer == null ? byteBuffer = ByteBuffer.wrap(inputStreamToByteArray()) : byteBuffer;
    }",This method is used to convert the input stream to a ByteBuffer.
"protected void sendClientResponse(PendingOpsRequest request) {
        byte statusCode = ClientResponse.SUCCESS;
        String statusString = null;
        /*
         * It is possible not to receive a table response if a feature is not enabled
         */
        // All of the null/empty table handling/detecting/generation sucks.  Just making it
        // work for now, not making it pretty. --izzy
        VoltTable responseTables[] = request.aggregateTables;
        if (responseTables == null || responseTables.length == 0) {
            responseTables = new VoltTable[0];
            statusCode = ClientResponse.GRACEFUL_FAILURE;
            statusString =
                ""Requested info \"""" + request.subselector +
                ""\"" is not yet available or not supported in the current configuration."";
        }

        ClientResponseImpl response =
            new ClientResponseImpl(statusCode, ClientResponse.UNINITIALIZED_APP_STATUS_CODE, null,
                    responseTables, statusString);
        response.setClientHandle(request.clientData);
        ByteBuffer buf = ByteBuffer.allocate(response.getSerializedSize() + 4);
        buf.putInt(buf.capacity() - 4);
        response.flattenToBuffer(buf).flip();
        request.c.writeStream().enqueue(buf);
    }",Send a client response to the client.
"static boolean matchValue(FacesContext ctx,
                              UIComponent component,
                              Object value,
                              Iterator<SelectItem> items,
                              Converter converter) {

        while (items.hasNext()) {
            SelectItem item = items.next();
            if (item instanceof SelectItemGroup) {
                SelectItem subitems[] =
                      ((SelectItemGroup) item).getSelectItems();
                if ((subitems != null) && (subitems.length > 0)) {
                    if (matchValue(ctx, component, value, new ArrayIterator(subitems), converter)) {
                        return (true);
                    }
                }
            } else {
                Object compareValue = null;
                
                try {
                    compareValue = doConversion(ctx, component, item, value,
                        converter);
                } catch (IllegalStateException ise) {
                    continue;
                }
                
                if (null == compareValue && null == value) {
                    return true;
                }

                if (value.equals(compareValue)) {
                    return (true);
                }
            }
        }
        return (false);

    }",Match value.
"private Node getNode(Node nodeStart, String key, CreateMode createMode, boolean bReturnTextNode)
    {
        if (key.indexOf('/') != -1)
        {
            String strKeyParent = key.substring(0, key.indexOf('/'));
            CreateMode createModeParent = createMode;
            if (createModeParent == CreateMode.CREATE_NEW_NODE)
                createModeParent = CreateMode.CREATE_IF_NOT_FOUND;  // Only create a duplicate node at the leaf level.
            nodeStart = this.getNode(nodeStart, strKeyParent, createModeParent, false);
            if (nodeStart == null)
                return null;
            key = key.substring(key.indexOf('/') + 1);
            return this.getNode(nodeStart, key, createMode, bReturnTextNode);
        }
        if (nodeStart == null)
            nodeStart = this.getNode(true);

        int iIndex = Integer.MAX_VALUE;
        if (key.indexOf('[') != -1)
        {
            iIndex = Integer.parseInt(key.substring(key.indexOf('[') + 1, key.indexOf(']')));
            key = key.substring(0, key.indexOf('['));
        }
        key = Util.fixDOMElementName(key);
        Node node = null;
        NodeList nodeList = ((Element)nodeStart).getElementsByTagName(key);
        if (nodeList != null)
        {
            for (int i = 0; i < nodeList.getLength(); i++)
            {
                if (nodeList.item(i).getParentNode() == nodeStart)
                {
                    node = nodeList.item(i);    // Get the last child.
                    if (iIndex != Integer.MAX_VALUE)
                    {
                        if (--iIndex == 0)
                            break;  // This is the correct node
                        node = null;    // If you are looking for a specific node, and it doesn't exist, return null.
                    }
                }
            }
        }
        if (((node == null) && (createMode != CreateMode.DONT_CREATE))
                || (createMode == CreateMode.CREATE_NEW_NODE))
        {
        	Document doc = null;
        	if (m_data instanceof Document)
        		doc = (Document)m_data;
        	if (doc == null)
        		doc = ((Node)m_data).getOwnerDocument();
            node = doc.createElement(key);
            if (bReturnTextNode)
            {
                if (createMode != CreateMode.CREATE_CDATA_NODE)
                    node.appendChild(doc.createTextNode(Constant.BLANK));
                else
                    node.appendChild(doc.createCDATASection(Constant.BLANK));
            }
            nodeStart.appendChild(node);
        }
        if (node != null)
            if (bReturnTextNode)
                node = node.getFirstChild();
        return node;    // Return new node or null.
    }",Get the node with the specified key.
"@When(""^I double click on the element on index '(\\d+?)'$"")
    public void seleniumDoubleClick(Integer index) throws InterruptedException {
        Actions action = new Actions(commonspec.getDriver());
        try {
            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(""There are less found elements than required"")
                    .hasAtLeast(index);
            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();

        } catch (AssertionError e) {
            Thread.sleep(1000);
            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(""There are less found elements than required"")
                    .hasAtLeast(index);
            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();
        }
    }",Selenium double click action.
"public static DateTime toDateAdvanced(Object o, TimeZone timeZone, DateTime defaultValue) {
	if (o instanceof DateTime) return (DateTime) o;
	else if (o instanceof Date) return new DateTimeImpl((Date) o);
	else if (o instanceof Castable) {
	    return ((Castable) o).castToDateTime(defaultValue);
	}
	else if (o instanceof String) return toDateAdvanced(o.toString(), timeZone, defaultValue);
	else if (o instanceof Number) return util.toDateTime(((Number) o).doubleValue());
	else if (o instanceof Calendar) {
	    return new DateTimeImpl((Calendar) o);
	}
	else if (o instanceof ObjectWrap) return toDateAdvanced(((ObjectWrap) o).getEmbededObject(defaultValue), timeZone, defaultValue);
	return defaultValue;
    }",Convert an object to a DateTime using the default value.
"public void setStreams(java.util.Collection<StreamSummary> streams) {
        if (streams == null) {
            this.streams = null;
            return;
        }

        this.streams = new java.util.ArrayList<StreamSummary>(streams);
    }",Sets the value of the streams property.
"@NotNull
    public static String computeSessionId(@NotNull final String aString) {
        final byte[] byteData = DigestUtils.sha256(aString.getBytes());
        final StringBuilder sb = new StringBuilder(""SQLQuery:"");

        for (final byte aByteData : byteData) {
            final String hex = Integer.toHexString(0xFF & aByteData);
            if (hex.length() == 1) {
                sb.append('0');
            }
            sb.append(hex);
        }
        return sb.toString();
    }",Compute the session id from a string.
"public void setCookies(List<HttpCookie> cookies) {
        if (cookies.isEmpty()) {
            setHeader(HttpHeader.COOKIE, null);
        }

        StringBuilder sbData = new StringBuilder();

        for (HttpCookie c : cookies) {
            sbData.append(c.getName());
            sbData.append('=');
            sbData.append(c.getValue());
            sbData.append(""; "");
        }

        if (sbData.length() <= 3) {
            setHeader(HttpHeader.COOKIE, null);
            return;
        }

        final String data = sbData.substring(0, sbData.length() - 2);
        setHeader(HttpHeader.COOKIE, data);
    }",Sets the HTTP cookies.
"private static void assertXpathEquality(String controlXpath,
                                            Document controlDocument,
                                            String testXpath,
                                            Document testDocument,
                                            boolean equal)
        throws XpathException {
        XpathEngine xpath = XMLUnit.newXpathEngine();
        Diff diff = new Diff(asXpathResultDocument(XMLUnit.newControlParser(),
                                                   xpath.getMatchingNodes(controlXpath,
                                                                          controlDocument)),
                             asXpathResultDocument(XMLUnit.newTestParser(),
                                                   xpath.getMatchingNodes(testXpath,
                                                                          testDocument)));
        assertXMLEqual(diff, equal);
    }",Assert that two XML documents are equal.
"@Override
    public void play(final String uri) {
        Log.d(TAG, ""Start playing ""+uri);
        notifyVideoUnavailable(REASON_BUFFERING);
        isWeb = false;
        TvInputPlayer.Callback callback = new TvInputPlayer.Callback() {
            @Override
            public void onPrepared() {
                notifyVideoAvailable();
                setOverlayEnabled(false);
            }

            @Override
            public void onPlayerStateChanged(boolean playWhenReady, int state) {

            }

            @Override
            public void onPlayWhenReadyCommitted() {

            }

            @Override
            public void onPlayerError(ExoPlaybackException e) {
                Log.e(TAG, e.getMessage()+"""");
                if(e.getMessage().contains(""Extractor"")) {
                    Log.d(TAG, ""Cannot play the stream, try loading it as a website"");
                    Log.d(TAG, ""Open ""+uri);
                    //Pretend this is a website
                    loadUrl(uri);
                    isWeb = true;
                    setOverlayEnabled(false);
                    notifyVideoAvailable();
                    isWeb = true;
                    setOverlayEnabled(false);
                    setOverlayEnabled(true);
                    isWeb = true;
                }
            }

            @Override
            public void onDrawnToSurface(Surface surface) {

            }

            @Override
            public void onText(String text) {

            }
        };
        try {
            tvInputPlayer.removeCallback(callback);
        } catch(NullPointerException e) {
            Log.w(TAG, ""exoplayer.removeCallback error ""+e.getMessage());
        }
        tvInputPlayer.addCallback(callback);
        tvInputPlayer.setSurface(mSurface);
        Log.d(TAG, ""Play ""+uri+""; ""+uri.indexOf(""file:///""));
        if(uri.contains(""file:///"")) {
            Log.i(TAG, ""Is a local file"");
            //Find appropriate extractor

            DataSource dataSource=new DefaultUriDataSource(getApplicationContext(), TvInputPlayer.getUserAgent(getApplicationContext()));
            ExtractorSampleSource extractorSampleSource=new ExtractorSampleSource(Uri.parse(uri),dataSource,
                    new DefaultAllocator(TvInputPlayer.BUFFER_SEGMENT_SIZE), TvInputPlayer.BUFFER_SEGMENTS * TvInputPlayer.BUFFER_SEGMENT_SIZE,
                    new Mp4Extractor(), new Mp3Extractor());
            TrackRenderer audio=new MediaCodecAudioTrackRenderer(extractorSampleSource, MediaCodecSelector.DEFAULT);
            TrackRenderer video=new MediaCodecVideoTrackRenderer(getApplicationContext(),extractorSampleSource, MediaCodecSelector.DEFAULT, MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING);
            tvInputPlayer.prepare(audio, video, new DummyTrackRenderer());
        } else {
            try {
                tvInputPlayer.prepare(getApplicationContext(), Uri.parse(uri), TvInputPlayer.SOURCE_TYPE_HLS);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        tvInputPlayer.setPlayWhenReady(true);
    }",Play the specified image.
"public static File compress(File sourceFile, String algorithm, boolean deleteSourceFileAfterCompressed) throws FileAlreadyExistsException, IOException {
        return compress(sourceFile, sourceFile.getParentFile(), algorithm, deleteSourceFileAfterCompressed);
    }",Compress a source file using the specified algorithm.
"protected void processField(Row row, String fieldIDColumn, String entityIDColumn, Object value)
   {
      processField(row, fieldIDColumn, row.getInteger(entityIDColumn), value);
   }",Process a single field of the data.
"public Observable<ServerTableAuditingPolicyInner> createOrUpdateAsync(String resourceGroupName, String serverName, ServerTableAuditingPolicyInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serverName, parameters).map(new Func1<ServiceResponse<ServerTableAuditingPolicyInner>, ServerTableAuditingPolicyInner>() {
            @Override
            public ServerTableAuditingPolicyInner call(ServiceResponse<ServerTableAuditingPolicyInner> response) {
                return response.body();
            }
        });
    }",Creates or updates a server s table auditing policy. Table auditing is deprecated use blob auditing instead.
"public Range<T> reset() {
		lock.lock();
		try {
			this.current = this.start;
			this.index = 0;
		} finally {
			lock.unlock();
		}
		return this;
	}",Resets the range to the beginning of this range.
"protected boolean isCore(Dependency left, Dependency right) {
        final String leftName = left.getFileName().toLowerCase();
        final String rightName = right.getFileName().toLowerCase();

        final boolean returnVal;
        //TODO - should we get rid of this merging? It removes a true BOM...

        if (left.isVirtual() && !right.isVirtual()) {
            returnVal = true;
        } else if (!left.isVirtual() && right.isVirtual()) {
            returnVal = false;
        } else if ((!rightName.matches("".*\\.(tar|tgz|gz|zip|ear|war).+"") && leftName.matches("".*\\.(tar|tgz|gz|zip|ear|war).+""))
                || (rightName.contains(""core"") && !leftName.contains(""core""))
                || (rightName.contains(""kernel"") && !leftName.contains(""kernel""))
                || (rightName.contains(""akka-stream"") && !leftName.contains(""akka-stream""))
                || (rightName.contains(""netty-transport"") && !leftName.contains(""netty-transport""))) {
            returnVal = false;
        } else if ((rightName.matches("".*\\.(tar|tgz|gz|zip|ear|war).+"") && !leftName.matches("".*\\.(tar|tgz|gz|zip|ear|war).+""))
                || (!rightName.contains(""core"") && leftName.contains(""core""))
                || (!rightName.contains(""kernel"") && leftName.contains(""kernel""))
                || (!rightName.contains(""akka-stream"") && leftName.contains(""akka-stream""))
                || (!rightName.contains(""netty-transport"") && leftName.contains(""netty-transport""))) {
            returnVal = true;
        } else {
            /*
             * considered splitting the names up and comparing the components,
             * but decided that the file name length should be sufficient as the
             * ""core"" component, if this follows a normal naming protocol should
             * be shorter:
             * axis2-saaj-1.4.1.jar
             * axis2-1.4.1.jar       <-----
             * axis2-kernel-1.4.1.jar
             */
            returnVal = leftName.length() <= rightName.length();
        }
        LOGGER.debug(""IsCore={} ({}, {})"", returnVal, left.getFileName(), right.getFileName());
        return returnVal;
    }",Checks if the two dependencies are core.
"public static <K, V> AbstractGroupExpression<Pair<K, V>, SortedMap<K, V>> sortedMap(Expression<K> key,
                                                                                        Expression<V> value,
                                                                                        Comparator<? super K> comparator) {
        return GMap.createSorted(QPair.create(key, value), comparator);
    }",Create an AbstractGroupExpression that represents a SortedMap of the specified key - value pairs.
"public synchronized short getCommandCompletionCode(int expectedSegmentType)
   {
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, ""getCommandCompletionCode"",
                                           new Object[] {""""+expectedSegmentType});

      checkReleased();

      short result = -1;
      if (receivedData != null)
      {
         // First see what the segment returned was
         int receivedDataSegmentType = getReceivedDataSegmentType();

         // If it matches what we expect, the there was no exception
         if (receivedDataSegmentType == expectedSegmentType)
         {
            result = CommsConstants.SI_NO_EXCEPTION;
         }
         else if (receivedDataSegmentType == JFapChannelConstants.SEG_EXCEPTION)
         {
            getShort();                     // Skip over the exception count
            result = getShort();

            // Ensure we rewind the buffer (as we are only peeking a look here)
            receivedBuffer.rewind();
         }
         else
         {
            // Get the segment types in decimal and hex for ease of use
            String expected = expectedSegmentType + "" (0x"" + Integer.toHexString(expectedSegmentType).toUpperCase() + "")"";
            String actual = receivedDataSegmentType + "" (0x"" + Integer.toHexString(receivedDataSegmentType).toUpperCase() + "")"";

            throw new SIErrorException(
               TraceNLS.getFormattedMessage(CommsConstants.MSG_BUNDLE,
                                            ""JFAP_SEG_MISMATCH_EXCEPTION_SICO1006"",
                                            new Object[] {expected, actual}, null)
            );
         }
      }

      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, ""getCommandCompletionCode"", """"+result);
      return result;
   }",Gets the command completion code.
"@SuppressWarnings(""unchecked"")
    private static <D extends Number> D getJavaMaxInclusive(Class < D > clazz,
            int totalDigits, int fractionDigits) {
        int dec = totalDigits - fractionDigits;
        char[] decPart = new char[dec];
        Arrays.fill(decPart, '9');
        StringBuilder sb = new StringBuilder();
        sb.append(decPart);
        if (clazz.equals(Short.class)) {
            return (D) (dec > 4 ? Short.valueOf(Short.MAX_VALUE) : Short
                    .valueOf(sb.toString()));
        } else if (clazz.equals(Integer.class)) {
            return (D) (dec > 9 ? Integer.valueOf(Integer.MAX_VALUE) : Integer
                    .valueOf(sb.toString()));
        } else if (clazz.equals(Long.class)) {
            return (D) (dec > 18 ? Long.valueOf(Long.MAX_VALUE) : Long
                    .valueOf(sb.toString()));
        } else if (clazz.equals(BigInteger.class)) {
            return (D) new BigInteger(sb.toString());
        } else if (clazz.equals(BigDecimal.class)) {
            if (fractionDigits > 0) {
                sb.append(JAVA_DECIMAL_POINT);
                char[] fracPart = new char[fractionDigits];
                Arrays.fill(fracPart, '9');
                sb.append(fracPart);
            }
            return (D) new BigDecimal(sb.toString());

        } else {
            throw new IllegalArgumentException(""Unsupported java type "" + clazz);
        }

    }",Gets the java maxInclusive.
"public static com.liferay.commerce.model.CommerceOrderNote createCommerceOrderNote(
		long commerceOrderNoteId) {
		return getService().createCommerceOrderNote(commerceOrderNoteId);
	}",Creates a commerce order note with the primary key.
"public Observable<Page<RegistryInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<RegistryInner>>, Page<RegistryInner>>() {
                @Override
                public Page<RegistryInner> call(ServiceResponse<Page<RegistryInner>> response) {
                    return response.body();
                }
            });
    }",List all the CDNA registry.
"public com.google.api.ads.adwords.axis.v201809.cm.Money getRequiredBudget() {
        return requiredBudget;
    }",Gets the requiredBudget value for this CIDCTYPE.
"public B addHttpHeader(CharSequence name, Object value) {
        requireNonNull(name, ""name"");
        requireNonNull(value, ""value"");
        httpHeaders.addObject(HttpHeaderNames.of(name), value);
        return self();
    }",Add a header to the request.
"public int getRequestCount() {
        synchronized (mapPluginStats) {
            int count = requestCount + getAnalyser().getRequestCount();
            for (PluginStats stats : mapPluginStats.values()) {
                count += stats.getMessageCount();
            }
            return count;
        }
    }",Gets the request count.
"private void writeObject(java.io.ObjectOutputStream out)
                    throws IOException
    {
        out.defaultWriteObject();
        out.write(frciEyecatcher);
        out.writeShort(frciPlatform);
        out.writeShort(frciVersionID);
    }",Write the object in the sequence of bytes.
"@SuppressWarnings(""unchecked"")
	public EList<String> getPrefixTitles() {
		return (EList<String>) eGet(Ifc2x3tc1Package.Literals.IFC_PERSON__PREFIX_TITLES, true);
	}",Gets the value of the PrefixTitles property.
"private void addPostParams(final Request request) {
        if (friendlyName != null) {
            request.addPostParam(""FriendlyName"", friendlyName);
        }

        if (certificate != null) {
            request.addPostParam(""Certificate"", certificate);
        }

        if (privateKey != null) {
            request.addPostParam(""PrivateKey"", privateKey);
        }

        if (sandbox != null) {
            request.addPostParam(""Sandbox"", sandbox.toString());
        }

        if (apiKey != null) {
            request.addPostParam(""ApiKey"", apiKey);
        }

        if (secret != null) {
            request.addPostParam(""Secret"", secret);
        }
    }",Add the post parameters to the request.
"static public String getServiceSpecial(String path) {
    String ss = null;
    if (path.startsWith(""/dqcServlet""))
      ss = ""dqcServlet"";
    else if (path.startsWith(""/cdmvalidator""))
      ss = ""cdmvalidator"";
    return ss;
  }",Get the service special name from the path
"public boolean getBit(int index)
    {
        assertValidIndex(index);
        int word = index / WORD_LENGTH;
        int offset = index % WORD_LENGTH;
        return (data[word] & (1 << offset)) != 0;
    }",Gets the bit at the specified index.
"public void setPriority(SessionPriority prio) throws IOException {
    if (failException != null) {
      throw failException;
    }

    sessionInfo.priority = prio;

    SessionInfo newInfo = new SessionInfo(sessionInfo);
    cmNotifier.addCall(
        new ClusterManagerService.sessionUpdateInfo_args(sessionId, newInfo));
  }",Sets the priority of the session.
"public void insert(Widget widget, String tabText, int beforeIndex) {
        insert(widget, tabText, false, beforeIndex);
    }",Insert a widget into the container.
"public static Response options(String path, Map<String, ?> pathParams) {
        return given().options(path, pathParams);
    }",Options HTTP request with path and path parameters.
"@XmlElementDecl(namespace = ""http://www.opengis.net/gml"", name = ""minutes"")
    public JAXBElement<Integer> createMinutes(Integer value) {
        return new JAXBElement<Integer>(_Minutes_QNAME, Integer.class, null, value);
    }",Create an instance of a minutes specification.
"public void checkCanSetDeleteOption(String option) {
    if (isOptColor() || isOptNoColor() || isOptA() || isOptVerbose() || isOptMerged() || 
        isOptNoMerged() || (null != getOptContains()) || isOptTrack() || isOptNoTrack() || 
        isOptL() || isOptF() || isOptMLower() || isOptMUpper()) {
      throw new IllegalArgumentException(ExceptionMessageMap.getMessage(""000120"") + option + 
      "" should be used with branch(es), to delete the branch(es)."");
    }
  }",Check if the command can be set to delete the branch.
"public void setSql(String sql) {
		if (StringUtils.isNotEmpty(sql)) {
			this.sql = sql.trim();
			this.comment = parseComment(sql);
			this.digest = MessageDigestUtils.MD5(sql);
			
			String sqlStatement = this.sql.toLowerCase();
			if (sqlStatement != null) {
				this.select = sqlStatement.startsWith(""select"");
				this.procedure = sqlStatement.startsWith(""call"");
			}
		}
	}",Sets the sql statement.
"void open() {

        initParams();

        int state = properties.getDBModified();

        switch (state) {

            case HsqlDatabaseProperties.FILES_MODIFIED :
                deleteNewAndOldFiles();
                restoreBackup();
                processScript();
                processDataFile();
                processLog();
                close(false);

                if (cache != null) {
                    cache.open(filesReadOnly);
                }

                reopenAllTextCaches();
                break;

            case HsqlDatabaseProperties.FILES_NEW :
                try {
                    deleteBackup();
                    backupData();
                    renameNewBackup();
                    renameNewScript();
                    deleteLog();
                    properties.setDBModified(
                        HsqlDatabaseProperties.FILES_NOT_MODIFIED);
                } catch (IOException e) {
                    database.logger.appLog.logContext(e, null);
                }

            // continue as non-modified files
            // $FALL-THROUGH$
            case HsqlDatabaseProperties.FILES_NOT_MODIFIED :

                /**
                 * if startup is after a SHUTDOWN SCRIPT and there are CACHED
                 * or TEXT tables, perform a checkpoint so that the .script
                 * file no longer contains CACHED or TEXT table rows.
                 */
                processScript();

                if (isAnyCacheModified()) {
                    properties.setDBModified(
                        HsqlDatabaseProperties.FILES_MODIFIED);
                    close(false);

                    if (cache != null) {
                        cache.open(filesReadOnly);
                    }

                    reopenAllTextCaches();
                }
                break;
        }

        openLog();

        if (!filesReadOnly) {
            properties.setDBModified(HsqlDatabaseProperties.FILES_MODIFIED);
        }
    }",Open the database.
"public static void writePharmacophoreDefinition(PharmacophoreQuery[] queries, OutputStream out) throws IOException {
        Element root = new Element(""pharmacophoreContainer"");
        root.addAttribute(new Attribute(""version"", ""1.0""));
        for (PharmacophoreQuery query : queries) {
            Element pcore = new Element(""pharmacophore"");

            Object description = query.getProperty(""description"");
            if (description != null) pcore.addAttribute(new Attribute(""description"", (String) description));

            Object name = query.getTitle();
            if (name != null) pcore.addAttribute(new Attribute(""name"", (String) name));

            // we add the pcore groups for this query as local to the group
            for (IAtom atom : query.atoms()) {
                Element group = new Element(""group"");
                group.addAttribute(new Attribute(""id"", atom.getSymbol()));
                group.appendChild(((PharmacophoreQueryAtom) atom).getSmarts());
                pcore.appendChild(group);
            }

            // now add the constraints
            for (IBond bond : query.bonds()) {
                Element elem = null;
                if (bond instanceof PharmacophoreQueryBond) {
                    PharmacophoreQueryBond dbond = (PharmacophoreQueryBond) bond;
                    elem = new Element(""distanceConstraint"");
                    elem.addAttribute(new Attribute(""lower"", String.valueOf(dbond.getLower())));
                    elem.addAttribute(new Attribute(""upper"", String.valueOf(dbond.getUpper())));
                    elem.addAttribute(new Attribute(""units"", ""A""));
                } else if (bond instanceof PharmacophoreQueryAngleBond) {
                    PharmacophoreQueryAngleBond dbond = (PharmacophoreQueryAngleBond) bond;
                    elem = new Element(""angleConstraint"");
                    elem.addAttribute(new Attribute(""lower"", String.valueOf(dbond.getLower())));
                    elem.addAttribute(new Attribute(""upper"", String.valueOf(dbond.getUpper())));
                    elem.addAttribute(new Attribute(""units"", ""degrees""));
                }

                // now add the group associated with this constraint
                for (IAtom iAtom : bond.atoms()) {
                    PharmacophoreQueryAtom atom = (PharmacophoreQueryAtom) iAtom;
                    Element gelem = new Element(""groupRef"");
                    gelem.addAttribute(new Attribute(""id"", atom.getSymbol()));
                    if (elem != null) {
                        elem.appendChild(gelem);
                    }
                }
                pcore.appendChild(elem);
            }
            root.appendChild(pcore);
        }
        Document doc = new Document(root);
        Serializer serializer = new Serializer(out, ""ISO-8859-1"");
        serializer.setIndent(4);
        serializer.setMaxLength(128);
        serializer.write(doc);
    }",Write the PharmacophoreDefinition XML file.
"public void propagateActions( InternalWorkingMemory workingMemory ) {
        final PropagationQueueingNodeMemory memory = workingMemory.getNodeMemory( this );

        // first we clear up the action queued flag
        memory.isQueued().compareAndSet( true,
                                         false );

        // we limit the propagation to avoid a hang when this queue is never empty
        Action next;
        for ( int counter = 0; counter < PROPAGATION_SLICE_LIMIT; counter++ ) {
            next = memory.getNextAction();
            if ( next != null ) {
                next.execute( this.sink,
                        workingMemory );
            } else {
                break;
            }
        }

        if ( memory.hasNextAction() && memory.isQueued().compareAndSet( false,
                                                                        true ) ) {
            // add action to the queue again.
            workingMemory.queueWorkingMemoryAction( this.action );
        }
    }",Propagate the actions to the sink.
"@Override
    public FastStr toUpperCase(Locale locale) {
        String s = toString();
        return unsafeOf(s.toUpperCase(locale));
    }",Returns a FastStr in the specified locale uppercase.
"@Override
	public Action getAction(String name, String nodeID) {
		Strategy<ActionEndpoint> strategy = null;
		long stamp = lock.tryOptimisticRead();
		if (stamp != 0) {
			try {
				strategy = strategies.get(name);
			} catch (Exception modified) {
				stamp = 0;
			}
		}
		if (!lock.validate(stamp) || stamp == 0) {
			stamp = lock.readLock();
			try {
				strategy = strategies.get(name);
			} finally {
				lock.unlockRead(stamp);
			}
		}
		if (strategy == null) {
			throw new ServiceNotFoundError(nodeID, name);
		}
		ActionEndpoint endpoint = strategy.getEndpoint(nodeID);
		if (endpoint == null) {
			throw new ServiceNotAvailableError(nodeID, name);
		}
		return endpoint;
	}",Get an action by name and nodeID.
"public Metric updateMetric(String metricName) {
    // [START updateMetric]
    MetricInfo metricInfo =
        MetricInfo.newBuilder(metricName, ""severity>=ERROR"")
            .setDescription(""new description"")
            .build();
    Metric metric = logging.update(metricInfo);
    // [END updateMetric]
    return metric;
  }",Update a metric in the log.
"public STATUS getStatus() {
		if (featureContent.isLoaded()) {
			return STATUS.LOADED;
		}
		if (deferred == null) {
			return STATUS.EMPTY;
		}
		return STATUS.LOADING;
	}",Returns the status of the feature content.
"public Node findOrCreateChild( Node parent,
                                   String name,
                                   String nodeType ) throws RepositoryException {
        return findOrCreateNode(parent, name, nodeType, nodeType);
    }",Find or create a node with the specified name and type.
"public SslContextBuilder keyManager(KeyManagerFactory keyManagerFactory) {
        if (forServer) {
            checkNotNull(keyManagerFactory, ""keyManagerFactory required for servers"");
        }
        keyCertChain = null;
        key = null;
        keyPassword = null;
        this.keyManagerFactory = keyManagerFactory;
        return this;
    }",Sets the key manager to use for this context.
"public Map getMapFromReference(final Reference ref, final Map defaults) {

        if (TraceComponent.isAnyTracingEnabled() && TRACE.isEntryEnabled()) {
            SibTr.entry(this, TRACE, ""getMapFromReference"", new Object[] {ref,defaults});
        }

        Map extractedProps = null;

        // Extract a Map of the properties from the Reference
        synchronized (ref) {

            Enumeration propsList = ref.getAll();

            // This will be set up to contain a map representing all the
            // information that was previously stored in the Reference.
            final Map<String,String> encodedMap = new HashMap<String,String>();

            // Look at each property in turn.
            while (propsList.hasMoreElements()) {

                // Get the coded version of the name. This will start with one
                // of the prefix values. The codedName must have been non-null.
                StringRefAddr refAddr = (StringRefAddr) propsList.nextElement();
                String codedName = refAddr.getType();
                String val = (String) refAddr.getContent();

                // Store the coded information in the map.
                encodedMap.put(codedName, val);

            }//while

            // Decode the encoded map.
            extractedProps = getStringDecodedMap(encodedMap, defaults);

        }//sync

        if (TraceComponent.isAnyTracingEnabled() && TRACE.isEntryEnabled()) {
            SibTr.exit(this, TRACE, ""getMapFromReference"", extractedProps);
        }
        return extractedProps;

    }",This method extracts a Map from a Reference.
"public synchronized void remove(SocketBox sb) {

        int status = ((ManagedSocketBox) sb).getStatus();

        if (!allSockets.containsKey(sb)) {
            throw new IllegalArgumentException(""This socket does not seem to exist in the socket pool."");
        }

        allSockets.remove(sb);

        if (status == ManagedSocketBox.FREE) {
            if (!freeSockets.containsKey(sb)) {
                throw new IllegalArgumentException(""This socket is marked free, but does not exist in the pool of free sockets."");
            }
            freeSockets.remove(sb);

        } else {
            if (!busySockets.containsKey(sb)) {
                throw new IllegalArgumentException(""This socket is marked busy, but does not exist in the pool of busy sockets."");
            }
            busySockets.remove(sb);
        }
    }",Removes a socket from the socket pool.
"public int[] getTags() {
        int[] tags = new int[fieldIndex.size()];
        Enumeration e = fieldIndex.keys();
        int i = 0;
        
        while (e.hasMoreElements()) {
            tags[i++] = ((Integer)e.nextElement()).intValue();
        }
        
        return tags;
    }",Gets the tags.
"public void registerHanders(String packageString) {
		List<String> list = AnnotationDetector.scanAsList(ExceptionHandler.class, packageString);
		for (String handler : list) {
//			System.out.println(handler);						
			JKExceptionHandler<? extends Throwable> newInstance = JKObjectUtil.newInstance(handler);
			Class<? extends Throwable> clas = JKObjectUtil.getGenericParamter(handler);
			setHandler(clas, newInstance);
		}
	}",Registers all the exception handlers in the given package.
"public final List<SequenceLabel> getSequencesFromSpans(final String[] tokens,
      final Span[] seqSpans) {
    final List<SequenceLabel> sequences = new ArrayList<SequenceLabel>();
    for (final Span seqSpan : seqSpans) {
      final String seqString = seqSpan.getCoveredText(tokens);
      final String seqType = seqSpan.getType();
      final SequenceLabel sequence = this.sequenceFactory
          .createSequence(seqString, seqType, seqSpan);
      sequences.add(sequence);
    }
    return sequences;
  }",Get the sequence from the sequence spans.
"public static String remove(final String string, final char ch) {
		int stringLen = string.length();
		char[] result = new char[stringLen];
		int offset = 0;

		for (int i = 0; i < stringLen; i++) {
			char c = string.charAt(i);

			if (c == ch) {
				continue;
			}

			result[offset] = c;
			offset++;
		}

		if (offset == stringLen) {
			return string;	// no changes
		}

		return new String(result, 0, offset);
	}",Removes the specified character from the specified string.
"protected synchronized void createAgent (int agentId)
    {
        Subscriber<AgentObject> delegator = new Subscriber<AgentObject>() {
            public void objectAvailable (AgentObject agentObject) {
                BureauDirector.this.objectAvailable(agentObject);
            }
            public void requestFailed (int oid, ObjectAccessException cause) {
                BureauDirector.this.requestFailed(oid, cause);
            }
        };

        log.info(""Subscribing to object "" + agentId);

        SafeSubscriber<AgentObject> subscriber =
            new SafeSubscriber<AgentObject>(agentId, delegator);
        _subscribers.put(agentId, subscriber);
        subscriber.subscribe(_ctx.getDObjectManager());
    }",Creates a new agent object.
"private void applyMax(Dimension dim) {
	if (getMaxHeight() > 0) {
	  dim.height = Math.min(dim.height, getMaxHeight());
	}
	if (getMaxWidth() > 0) {
	  dim.width = Math.min(dim.width, getMaxWidth());
	}
  }",Apply the maximum dimensions to the dimension.
"public int compare(final ParentStep p1, final ParentStep p2) {
        return p1.getParent().getLine().compareTo(p2.getParent().getLine());
    }",Compare two parents.
"public Locomotive waitForWindow(String regex) {
        Set<String> windows = driver.getWindowHandles();

        for (String window : windows) {
            try {
                driver.switchTo().window(window);

                p = Pattern.compile(regex);
                m = p.matcher(driver.getCurrentUrl());

                if (m.find()) {
                    attempts = 0;
                    return switchToWindow(regex);
                }
                else {
                    // try for title
                    m = p.matcher(driver.getTitle());

                    if (m.find()) {
                        attempts = 0;
                        return switchToWindow(regex);
                    }
                }
            } catch(NoSuchWindowException e) {
                if (attempts <= MAX_ATTEMPTS) {
                    attempts++;

                    try {Thread.sleep(1000);}catch(Exception x) { x.printStackTrace(); }

                    return waitForWindow(regex);
                } else {
                    fail(""Window with url|title: "" + regex + "" did not appear after "" + MAX_ATTEMPTS + "" tries. Exiting."");
                }
            }
        }

        // when we reach this point, that means no window exists with that title..
        if (attempts == MAX_ATTEMPTS) {
            fail(""Window with title: "" + regex + "" did not appear after "" + MAX_ATTEMPTS + "" tries. Exiting."");
            return this;
        } else {
            System.out.println(""#waitForWindow() : Window doesn't exist yet. ["" + regex + ""] Trying again. "" + (attempts+1) + ""/"" + MAX_ATTEMPTS);
            attempts++;
            try {Thread.sleep(1000);}catch(Exception x) { x.printStackTrace(); }
            return waitForWindow(regex);
        }
    }",Wait for a window to appear.
"private Channel getConnection()
    {
        stateCheck(State.RUNNING, State.HEALTH_CHECKING);
        boolean acquired = false;
        if (blockOnMaxConnections)
        {
            try
            {
                logger.debug(""Attempting to acquire channel permit"");

                if (!permits.tryAcquire())
                {
                    logger.info(""All connections in use for {}; had to wait for one."",
                                remoteAddress);
                    permits.acquire();
                }
                acquired = true;
            }
            catch (InterruptedException ex)
            {
                // no-op, don't care
            }
            catch (BlockingOperationException ex)
            {
                logger.error(""Netty interrupted waiting for connection permit to be available; {}"",
                             remoteAddress);
            }
        }
        else
        {
            logger.debug(""Attempting to acquire channel permit"");
            acquired = permits.tryAcquire();
        }

        Channel channel = null;
        if (acquired)
        {
            try
            {
                channel = doGetConnection(true);
                channel.closeFuture().removeListener(inAvailableCloseListener);
            }
            catch (ConnectionFailedException ex)
            {
                permits.release();
            }
            catch (UnknownHostException ex)
            {
                permits.release();
                logger.error(""Unknown host encountered while trying to open connection; {}"", ex);
            }
        }
        return channel;
    }",Get a connection to the server.
"public static boolean areMappedObjects(Class<?> dClass,Class<?> sClass,XML xml){
		return isMapped(dClass,xml) || isMapped(sClass,xml);
	}",Checks if the two classes are mapped.
"public DescribeSpotPriceHistoryRequest withProductDescriptions(String... productDescriptions) {
        if (this.productDescriptions == null) {
            setProductDescriptions(new com.amazonaws.internal.SdkInternalList<String>(productDescriptions.length));
        }
        for (String ele : productDescriptions) {
            this.productDescriptions.add(ele);
        }
        return this;
    }",Sets the productDescriptions value for the SpotPriceHistory request.
"public DecimalFormatProperties getDecimalFormat(QName name)
  {

    if (null == m_DecimalFormatDeclarations)
      return null;

    int n = getDecimalFormatCount();

    for (int i = (n - 1); i >= 0; i++)
    {
      DecimalFormatProperties dfp = getDecimalFormat(i);

      if (dfp.getName().equals(name))
        return dfp;
    }

    return null;
  }",Get the DecimalFormatProperties for the given name.
"public boolean isSingleton(String exceptionName) {
        if (size != 1) {
            return false;
        }
        ObjectType e = iterator().next();
        return e.toString().equals(exceptionName);

    }",Check if the exception is singleton.
"public <T> boolean isDependentScopedStrict(final Class<T> type) {
        Bean<T> bean = resolveStrict(manager, type);
        if (bean != null) {
            return Dependent.class.equals(bean.getScope());
        }
        return false;
    }",Checks if the type is dependent scoped.
"public void marshall(CreateRemoteAccessSessionRequest createRemoteAccessSessionRequest, ProtocolMarshaller protocolMarshaller) {

        if (createRemoteAccessSessionRequest == null) {
            throw new SdkClientException(""Invalid argument passed to marshall(...)"");
        }

        try {
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getProjectArn(), PROJECTARN_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getDeviceArn(), DEVICEARN_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getInstanceArn(), INSTANCEARN_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getSshPublicKey(), SSHPUBLICKEY_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getRemoteDebugEnabled(), REMOTEDEBUGENABLED_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getRemoteRecordEnabled(), REMOTERECORDENABLED_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getRemoteRecordAppArn(), REMOTERECORDAPPARN_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getName(), NAME_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getClientId(), CLIENTID_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getConfiguration(), CONFIGURATION_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getInteractionMode(), INTERACTIONMODE_BINDING);
            protocolMarshaller.marshall(createRemoteAccessSessionRequest.getSkipAppResign(), SKIPAPPRESIGN_BINDING);
        } catch (Exception e) {
            throw new SdkClientException(""Unable to marshall request to JSON: "" + e.getMessage(), e);
        }
    }",Creates the given parameter object.
"protected UserDetails loadUserByAssertion(final Assertion assertion) {
		final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken(
				assertion, """");
		return this.authenticationUserDetailsService.loadUserDetails(token);
	}",Load user details from assertion.
"public void setAsDefault(SetAsDefaultRequest request) {
    call(
      new PostRequest(path(""set_as_default""))
        .setParam(""id"", request.getId())
        .setParam(""organization"", request.getOrganization())
        .setMediaType(MediaTypes.JSON)
    ).content();
  }",Set the ID as the default.
"public static String generateRandomId() {

        StringBuffer buffer = new StringBuffer();
        int base = 36;
        for (int i = 0; i < 16; i++) {
            buffer.append(Integer.toString(RANDOM.nextInt(base), base));
        }
        return buffer.toString();
    }",Generate random id.
"void deferBoundaryCallbacks(final boolean deferEmpty,
            final boolean deferBegin, final boolean deferEnd) {
        if (mBoundaryCallback == null) {
            throw new IllegalStateException(""Can't defer BoundaryCallback, no instance"");
        }

        /*
         * If lowest/highest haven't been initialized, set them to storage size,
         * since placeholders must already be computed by this point.
         *
         * This is just a minor optimization so that BoundaryCallback callbacks are sent immediately
         * if the initial load size is smaller than the prefetch window (see
         * TiledPagedListTest#boundaryCallback_immediate())
         */
        if (mLowestIndexAccessed == Integer.MAX_VALUE) {
            mLowestIndexAccessed = mStorage.size();
        }
        if (mHighestIndexAccessed == Integer.MIN_VALUE) {
            mHighestIndexAccessed = 0;
        }

        if (deferEmpty || deferBegin || deferEnd) {
            // Post to the main thread, since we may be on creation thread currently
            mMainThreadExecutor.execute(new Runnable() {
                @Override
                public void run() {
                    // on is dispatched immediately, since items won't be accessed
                    //noinspection ConstantConditions
                    if (deferEmpty) {
                        mBoundaryCallback.onZeroItemsLoaded();
                    }

                    // for other callbacks, mark deferred, and only dispatch if loadAround
                    // has been called near to the position
                    if (deferBegin) {
                        mBoundaryCallbackBeginDeferred = true;
                    }
                    if (deferEnd) {
                        mBoundaryCallbackEndDeferred = true;
                    }
                    tryDispatchBoundaryCallbacks(false);
                }
            });
        }
    }",Defer boundary callbacks.
"@Override
    public GetRelationalDatabasesResult getRelationalDatabases(GetRelationalDatabasesRequest request) {
        request = beforeClientExecution(request);
        return executeGetRelationalDatabases(request);
    }",Retrieves information about an Relational Database.
"public List<NumericColumn<?>> numericColumns(String ... columnNames) {
        List<NumericColumn<?>> cols = new ArrayList<>();
        for (String name : columnNames) {
            cols.add(numberColumn(name));
        }

        return cols;
    }",Gets a list of numeric columns.
"public java.util.List<RoleDetail> getRoleDetailList() {
        if (roleDetailList == null) {
            roleDetailList = new com.amazonaws.internal.SdkInternalList<RoleDetail>();
        }
        return roleDetailList;
    }",Gets the value of the roleDetailList property.
"static <T> PojoSerializerSnapshotData<T> createFrom(
			Class<T> pojoClass,
			Field[] fields,
			TypeSerializerSnapshot<?>[] existingFieldSerializerSnapshots,
			LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> existingRegisteredSubclassSerializerSnapshots,
			Map<Class<?>, TypeSerializerSnapshot<?>> existingNonRegisteredSubclassSerializerSnapshots) {

		final LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots = new LinkedOptionalMap<>(fields.length);
		for (int i = 0; i < fields.length; i++) {
			Field field = fields[i];
			String fieldName = (field == null) ? getDummyNameForMissingField(i) : field.getName();
			fieldSerializerSnapshots.put(fieldName, field, existingFieldSerializerSnapshots[i]);
		}

		return new PojoSerializerSnapshotData<>(
			pojoClass,
			fieldSerializerSnapshots,
			optionalMapOf(existingRegisteredSubclassSerializerSnapshots, Class::getName),
			optionalMapOf(existingNonRegisteredSubclassSerializerSnapshots, Class::getName));
	}",Creates a new instance of the PojoSerializerSnapshotData class.
"private SortedSet<Date> calculateDates() {

        if (null == m_allDates) {
            SortedSet<Date> result = new TreeSet<>();
            if (isAnyDatePossible()) {
                Calendar date = getFirstDate();
                int previousOccurrences = 0;
                while (showMoreEntries(date, previousOccurrences)) {
                    result.add(date.getTime());
                    toNextDate(date);
                    previousOccurrences++;
                }
            }
            m_allDates = result;
        }
        return m_allDates;
    }",Calculate the dates of all dates.
"private boolean setupEphemeralRSAKeys(boolean export) {
        KeyPair kp = sslContext.getEphemeralKeyManager().
                        getRSAKeyPair(export, sslContext.getSecureRandom());
        if (kp == null) {
            return false;
        } else {
            tempPublicKey = kp.getPublic();
            tempPrivateKey = kp.getPrivate();
            return true;
        }
    }",Setup the public and private key of the certificate.
"public String format(Object qty, int minDecimals, int... fractionGroups) {
        return format(qty, new StringBuffer(), new FieldPosition(0), minDecimals, boxAsList(fractionGroups)).toString();
    }",Format a quantity to be used in a log file.
"public synchronized static JMX reconnect()
	{
		try
		{

				ClientCache cache = null;
				
				cache = ClientCacheFactory.getAnyInstance();
					
				if(cache != null && !cache.isClosed())
				{
						cache.close();
				}
		}
		catch (Exception e)
		{
				System.out.println(""Cache was closed"");
		}
		
		if(jmx != null)
		{
			
			jmx.dispose();
			jmx = null;
		}
					
		return getJmx();
	}",Reconnect to the JMX server.
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
    public void deserialize(Input input) throws IOException {
        log.debug(""deserialize"");
        name = Deserializer.deserialize(input, String.class);
        log.trace(""Name: {}"", name);
        persistent = true;
        Map<String, Object> map = Deserializer.<Map> deserialize(input, Map.class);
        if (log.isTraceEnabled()) {
            log.trace(""Attributes: {}"", map);
        }
        super.setAttributes(map);
        ownerMessage.setName(name);
        ownerMessage.setPersistent(persistent);
    }","Deserializes the
Taxonomy object from the given input."
"@Override
    public final void exceptionCaught(NextFilter nextFilter, IoSession session,
            Throwable cause) {
        if (eventTypes.contains(IoEventType.EXCEPTION_CAUGHT)) {
            IoFilterEvent event = new IoFilterEvent(nextFilter,
                IoEventType.EXCEPTION_CAUGHT, session, cause); 
            fireEvent(event);
        } else {
            nextFilter.exceptionCaught(session, cause);
        }
    }",Method exceptionCaught.
"public void set(final T paramOrigin, final T paramDestination, final boolean paramBool) {
        assert paramOrigin != null;
        assert paramDestination != null;
        if (!mMap.containsKey(paramOrigin)) {
            mMap.put(paramOrigin, new IdentityHashMap<T, Boolean>());
        }

        mMap.get(paramOrigin).put(paramDestination, paramBool);
    }",Set the value of a single attribute.
"public static final String createXPATHWarning(String msgKey, Object args[])  //throws Exception
  {
      // BEGIN android-changed
      //     don't localize exception messages
      return createXPATHMsg(XPATHBundle, msgKey, args);
      // END android-changed
  }",Create a warning message for an exception.
"@Nullable
  private static <T> TreePath findEnclosingMethodOrLambdaOrInitializer(TreePath path) {
    while (path != null) {
      if (path.getLeaf() instanceof MethodTree) {
        return path;
      }
      TreePath parent = path.getParentPath();
      if (parent != null) {
        if (parent.getLeaf() instanceof ClassTree) {
          if (path.getLeaf() instanceof BlockTree) {
            // this is a class or instance initializer block
            return path;
          }
          if (path.getLeaf() instanceof VariableTree
              && ((VariableTree) path.getLeaf()).getInitializer() != null) {
            // this is a field with an inline initializer
            return path;
          }
        }
        if (parent.getLeaf() instanceof LambdaExpressionTree) {
          return parent;
        }
      }
      path = parent;
    }
    return null;
  }",Find the enclosing method or lambda or initializer tree.
"@ManagedOperation(description = ""Sets the maximum allowed number of threads."")
	@ManagedOperationParameters({ @ManagedOperationParameter(name = ""maximumPoolSize"", description = ""the new maximum"") })
	@Override
	public void setMaximumPoolSize(final int maximumPoolSize) {
		super.setMaximumPoolSize(maximumPoolSize);
	}",Sets the maximum allowed number of threads.
"private boolean isANeighboorsInAnAtomContainer(List<IAtom> neighs, IAtomContainer ac) {
        boolean isIn = false;
        int count = 0;
        for (IAtom neigh : neighs) {
            if (ac.contains(neigh)) {
                count += 1;
            }
        }
        if (count > 0) {
            isIn = true;
        }
        return isIn;
    }",isANeighboorsInAnAtomContainer This method checks if a list of AminoAcidNeigh objects is contained in an AtomContainer.
"public Subclass withIAMMaxRetry(int retryCount) {
        this.iamMaxRetry = retryCount;

        if ((retryCount > 0) &&
        		(this.credentials.getCredentials() instanceof IBMOAuthCredentials) &&
        		((IBMOAuthCredentials)this.credentials.getCredentials()).getTokenManager() instanceof DefaultTokenManager){
        			((DefaultTokenManager)((IBMOAuthCredentials)this.credentials.getCredentials()).getTokenManager()).setIamMaxRetry(iamMaxRetry);
        }
        return getSubclass();
    }",Sets the max retry count for the current user.
"@SuppressWarnings(""resource"")
	public static InputStream getZipContentsRecursive(final String file) throws IOException {
		// return local file directly
		int pos = file.indexOf('!');
		if (pos == -1) {
			if (!new File(file).exists()) {
				throw new IOException(""File "" + file + "" does not exist"");
			}

			try {
				return new FileInputStream(file);
			} catch (IOException e) {
				// filter out locked errors
				if (e.getMessage().contains(""because another process has locked"")) {
					logger.warning(""Could not read file: "" + file + "" because it is locked."");

					return new ByteArrayInputStream(new byte[] {});
				}

				throw e;
			}
		}

		String zip = file.substring(0, pos);
		String subfile = file.substring(pos + 1);
		if (logger.isLoggable(Level.FINE)) {
			logger.fine(""Trying to read zipfile: "" + zip + "" subfile: "" + subfile);
		}

		// open original zip
		if (!new File(zip).exists() || !new File(zip).isFile() || !new File(zip).canRead() || new File(zip).length() == 0) {
			throw new IOException(""ZIP file: "" + zip + "" does not exist or is empty or not a readable file."");
		}

		ZipFile zipfile = new ZipFile(zip);
		// is the target file in yet another ZIP file?
		pos = subfile.indexOf('!');
		if (pos != -1) {
			// find out first ZIP file and remainder
			String remainder = subfile.substring(pos + 1);

			File subzipfile = File.createTempFile(""ZipUtils"", "".zip"");
			try {
				readToTemporaryFile(pos, zip, subfile, zipfile, subzipfile);

				// start another recursion with the temporary file and the remainder
				return new DeleteOnCloseInputStream(
						new ZipFileCloseInputStream(getZipContentsRecursive(subzipfile.getAbsolutePath() + ZIP_DELIMITER + remainder), zipfile),
						subzipfile);
			} catch (IOException e) {
				// need to close the zipfile here as we do not put it into a ZipFileCloseInputStream
				zipfile.close();

				throw e;
			} finally {
				if (!subzipfile.delete()) {
					logger.warning(""Could not delete file "" + subzipfile);
				}
			}
		}

		ZipEntry entry = zipfile.getEntry(subfile);
		return new ZipFileCloseInputStream(zipfile.getInputStream(entry), zipfile);
	}",Gets the contents of a ZIP file recursively.
"@Override
	public EClass getIfcSwitchingDevice() {
		if (ifcSwitchingDeviceEClass == null) {
			ifcSwitchingDeviceEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI)
					.getEClassifiers().get(689);
		}
		return ifcSwitchingDeviceEClass;
	}",Get the IfcSwitchingDeviceEClass attribute of the class.
"public static <T> List<T> unmodifiableList(List<? extends T> list) {
        return (list instanceof RandomAccess ?
                new UnmodifiableRandomAccessList<>(list) :
                new UnmodifiableList<>(list));
    }",Returns an unmodifiable list of the specified list.
"public void setTlsCertificateSummaries(java.util.Collection<LoadBalancerTlsCertificateSummary> tlsCertificateSummaries) {
        if (tlsCertificateSummaries == null) {
            this.tlsCertificateSummaries = null;
            return;
        }

        this.tlsCertificateSummaries = new java.util.ArrayList<LoadBalancerTlsCertificateSummary>(tlsCertificateSummaries);
    }",Sets the value of the tlsCertificateSummaries property.
"public StringType addPrefixElement() {//2 
      StringType t = new StringType();
      if (this.prefix == null)
        this.prefix = new ArrayList<StringType>();
      this.prefix.add(t);
      return t;
    }",Add this element to the prefix list.
"@Override
    public Request<CancelCapacityReservationRequest> getDryRunRequest() {
        Request<CancelCapacityReservationRequest> request = new CancelCapacityReservationRequestMarshaller().marshall(this);
        request.addParameter(""DryRun"", Boolean.toString(true));
        return request;
    }",Returns a request configured to cancel the reservation of a resource in the Service.
"public int setString(String strSource, boolean bDisplayOption, int iMoveMode)               // init this field override for other value
    {
        int iErrorReturn = FirstMLastConverter.nameToParts(strSource, bDisplayOption, iMoveMode, m_recThis, m_iNamePrefix, m_iNameFirst, m_iNameMiddle, m_iNameSur, m_iNameSuffix, m_iNameTitle);
        if (iErrorReturn == DBConstants.NORMAL_RETURN)
            if (this.getNextConverter() != null)
                iErrorReturn = super.setString(strSource, bDisplayOption, iMoveMode);
        return iErrorReturn;
    }",Convert this string to this field.
"public HtmlPolicyBuilder allowElements(
      ElementPolicy policy, String... elementNames) {
    invalidateCompiledState();
    for (String elementName : elementNames) {
      elementName = HtmlLexer.canonicalName(elementName);
      ElementPolicy newPolicy = ElementPolicy.Util.join(
          elPolicies.get(elementName), policy);
      // Don't remove if newPolicy is the always reject policy since we want
      // that to infect later allowElement calls for this particular element
      // name.  rejects should have higher priority than allows.
      elPolicies.put(elementName, newPolicy);
      if (!textContainers.containsKey(elementName)) {
        if (METADATA.canContainPlainText(METADATA.indexForName(elementName))) {
          textContainers.put(elementName, true);
        }
      }
    }
    return this;
  }",Allow the specified elements.
"public String getItemValue(String id) {
        Item item = getItem(id);
        if (item != null)
            return item.getValue();
        return null;
    }",Gets the value of a single item.
"private static void generateParseOnXmlAttributes(BindTypeContext context, MethodSpec.Builder methodBuilder,
			BindEntity entity) {
		BindTransform bindTransform;

		int count = 0;
		// count property to manage
		{
			// for each elements
			for (BindProperty property : entity.getCollection()) {
				if (property.xmlInfo.xmlType != XmlType.ATTRIBUTE)
					continue;

				count++;
			}
		}

		if (count > 0) {
			// @formatter:off
			methodBuilder.addCode(""\n// attributes \n"");
			methodBuilder.addStatement(""String attributeName = null"");
			// methodBuilder.addStatement(""String attributeValue = null"");

			methodBuilder.addStatement(""int attributesCount = xmlParser.getAttributeCount();"");
			methodBuilder.beginControlFlow(
					""for (int attributeIndex = 0; attributeIndex < attributesCount; attributeIndex++)"");
			methodBuilder.addStatement(""attributeName = xmlParser.getAttributeName(attributeIndex)"");
			// methodBuilder.addStatement(""attributeValue =
			// $T.unescapeXml(xmlParser.getAttributeValue(attributeIndex))"",
			// StringEscapeUtils.class);
			methodBuilder.beginControlFlow(""switch(attributeName)$>"");

			for (BindProperty property : entity.getCollection()) {
				if (property.xmlInfo.xmlType != XmlType.ATTRIBUTE)
					continue;

				methodBuilder.addCode(""case $S:\n$>"", BindProperty.xmlName(property));

				bindTransform = BindTransformer.lookup(property);
				methodBuilder.addCode(""// field $L (mapped by $S)\n"", property.getName(),
						BindProperty.xmlName(property));
				bindTransform.generateParseOnXml(context, methodBuilder, ""xmlParser"",
						property.getPropertyType().getTypeName(), ""instance"", property);

				methodBuilder.addStatement(""$<break"");
			}

			methodBuilder.addCode(""default:\n$>"");
			methodBuilder.addStatement(""$<break$<"");
			methodBuilder.endControlFlow();

			methodBuilder.endControlFlow();
			// @formatter:on
		} else {
			methodBuilder.addCode(""// No attributes found\n"");
		}
	}",Generate parse on xml attributes.
"public int insertOrUpdate(Entity record, String... keys) throws SQLException {
		Connection conn = null;
		try {
			conn = this.getConnection();
			return runner.insertOrUpdate(conn, record, keys);
		} catch (SQLException e) {
			throw e;
		} finally {
			this.closeConnection(conn);
		}
	}",Inserts or updates an entity in the database or updates the existing record in the database.
"public void stop()
			throws MojoExecutionException, IOException, InstanceNotFoundException {
		try {
			this.connection.invoke(this.objectName, ""shutdown"", null, null);
		}
		catch (ReflectionException ex) {
			throw new MojoExecutionException(""Shutdown failed"", ex.getCause());
		}
		catch (MBeanException ex) {
			throw new MojoExecutionException(""Could not invoke shutdown operation"", ex);
		}
	}",Stop the managed object.
"public static <IN, OUT> CompletableFuture<OUT> thenApplyAsyncIfNotDone(
		CompletableFuture<IN> completableFuture,
		Executor executor,
		Function<? super IN, ? extends OUT> applyFun) {
		return completableFuture.isDone() ?
			completableFuture.thenApply(applyFun) :
			completableFuture.thenApplyAsync(applyFun, executor);
	}",Apply a function to a CompletableFuture if the CompletableFuture is done otherwise apply the function to the CompletableFuture.
"static void putTarget(final int targetTypeAndInfo, final ByteVector output) {
    switch (targetTypeAndInfo >>> 24) {
      case CLASS_TYPE_PARAMETER:
      case METHOD_TYPE_PARAMETER:
      case METHOD_FORMAL_PARAMETER:
        output.putShort(targetTypeAndInfo >>> 16);
        break;
      case FIELD:
      case METHOD_RETURN:
      case METHOD_RECEIVER:
        output.putByte(targetTypeAndInfo >>> 24);
        break;
      case CAST:
      case CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:
      case METHOD_INVOCATION_TYPE_ARGUMENT:
      case CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:
      case METHOD_REFERENCE_TYPE_ARGUMENT:
        output.putInt(targetTypeAndInfo);
        break;
      case CLASS_EXTENDS:
      case CLASS_TYPE_PARAMETER_BOUND:
      case METHOD_TYPE_PARAMETER_BOUND:
      case THROWS:
      case EXCEPTION_PARAMETER:
      case INSTANCEOF:
      case NEW:
      case CONSTRUCTOR_REFERENCE:
      case METHOD_REFERENCE:
        output.put12(targetTypeAndInfo >>> 24, (targetTypeAndInfo & 0xFFFF00) >> 8);
        break;
      default:
        throw new IllegalArgumentException();
    }
  }",Put target into the byte vector.
"public void connect(ConnectionProperties cp, ClientComponentHandshake cch)
      throws SIResourceException, SIAuthenticationException
   {
      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, ""connect"", new Object[] {cp, cch});

      ClientConnectionManager conMan = null;

      if (cp == null)
      {
         // The caller of this method passed in a null for the connection properties. This is
         // bad as we kinda need those so we know where to connect to.
         SIErrorException e = new SIErrorException(
            nls.getFormattedMessage(""NULL_CONNECTION_PROPERTIES_SICO1039"", null, null)
         );

         FFDCFilter.processException(e, CLASS_NAME + "".connect"",
                                     CommsConstants.CLIENTSIDECONNECTION_CONNECT_04, this);

         throw e;
      }

      if (cch == null)
      {
         // The caller of this method passed in null for the client component handshake. We need
         // this so we can call back to them to inform them to handshake.
         SIErrorException e = new SIErrorException(
            nls.getFormattedMessage(""NULL_CCH_SICO1040"", null, null)
         );

         FFDCFilter.processException(e, CLASS_NAME + "".connect"",
                                     CommsConstants.CLIENTSIDECONNECTION_CONNECT_05, this);

         throw e;
      }

      // Use the JFAP Channel to connect to the server
      Conversation con = null;
      boolean handshakeCompletedOk = false;

      try
      {
         ClientConnectionManager.initialise();
         conMan = ClientConnectionManager.getRef();

         // Establish a connection using details passed in via TRM.
         // These details can either be a hostname / port or a WLM
         // end point.
         if (cp.getMode() == ConnectionProperties.PropertiesType.HOST_PORT)
         {
            final String host = cp.getEndPoint().getHost();
            final int port = cp.getEndPoint().getPort().intValue();
            final String chainName = cp.getChainName();

            connectionInfo = host + "":"" + port + "" - "" + chainName;
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""Connecting to: "" + connectionInfo);

            final InetSocketAddress addr = AccessController.doPrivileged(new PrivilegedAction<InetSocketAddress>() {
               @Override
               public InetSocketAddress run() {
                  return new InetSocketAddress(host, port);
               }
            });
            con = conMan.connect(addr, new ProxyReceiveListener(), chainName);
         }
         else if (cp.getMode() == ConnectionProperties.PropertiesType.WLM_EP)
         {
            Object wlmEndpointData = cp.getWLMEndPointData();

            connectionInfo = wlmEndpointData.toString();
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""Connecting to: "" + connectionInfo);

            con = conMan.connect(wlmEndpointData,
                                 new ProxyReceiveListener());
         }
         else // cp.getMode() == ConnectionProperties.Z_TCP_PROXY
         {
            connectionInfo = ""tcp bridge service"";
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""Connecting via: ""+connectionInfo);
            con = conMan.connect(new ProxyReceiveListener(), ConversationUsageType.JFAP);
         }

         // Store the Conversation reference
         setConversation(con);
         // We need to store Conversation state for each conversation so now
         // seems a good time to create the state storage object
         createConversationState();

         // Store away the ClientSideConnection associated with this conversation
         this.setCommsConnection(this);

         // Start F247845
         // Check and see the multicast parameters passed into us by TRM
         Map trmProperties = cp.getClientConnectionPropertyMap();
         if (trmProperties != null)
         {
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""Client properties: "", trmProperties);

            // Work out if Multicast is infact enabled
            String subProtocol = (String) trmProperties.get(SibTrmConstants.SUBSCRIPTION_PROTOCOL);
            if (subProtocol != null)
            {
               if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""Subscription protocol:"", subProtocol);

               if (subProtocol.equals(SibTrmConstants.SUBSCRIPTION_PROTOCOL_MULTICAST))
               {
                  // TODO: fix this up!
                  throw new SIErrorException(""This shouldn't happen!"");
               }
            }
         }

         // We only need to do Comms and MFP handshaking if the connection was made
         // using a brand new socket
         if (con.isFirst())
         {
            // Set the connection closed listener
            con.addConnectionClosedListener(this, ConversationUsageType.JFAP);

            initiateCommsHandshaking();

            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""Comms handshake completed successfully"");
            
            // Get hold of product version
            int productVersion = getConversation().getHandshakeProperties().getMajorVersion();

            try
            {
               // Get hold of MFP and drive it to handshake
               CompHandshake ch = (CompHandshake) CompHandshakeFactory.getInstance();
               ch.compStartHandshake(this,productVersion);
            }
            catch (Exception e1)
            {
               FFDCFilter.processException(e1, CLASS_NAME + "".connect"",
                                          CommsConstants.CLIENTSIDECONNECTION_CONNECT_03, this);

               if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""MFP unable to create CompHandshake Singleton"", e1);

               String message = nls.getFormattedMessage(
                  ""MFP_HANDSHAKE_FAILED_SICO1005"", new Object[] { e1 }, null
               );

               SIResourceException ce = new SIResourceException(message, e1);
               throw ce;
            }
         }

         // Now call TRM to do its handshaking
         if (!cch.connect(this))
         {
            // If TRM returned false here, we need to throw an exception
            // to cancel the proceedings. This may be a TRM failure or more
            // likely an authorisation problem. No matter what though, we
            // just indicate this to TRM and let them figure out why
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""TRM connection returned false - connection will be aborted"");  //d179741

            // The caller of this method passed in null for the client component handshake. We need
            // this so we can call back to them to inform them to handshake.
            SIResourceException e = new SIResourceException(
               nls.getFormattedMessage(""TRM_HANDSHAKE_FAILED_SICO1037"", null, null)
            );

            FFDCFilter.processException(e, CLASS_NAME + "".connect"",
                                        CommsConstants.CLIENTSIDECONNECTION_CONNECT_06, this);

            throw e;
         }
         
         if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""TRM handshake completed successfully""); // D223615
         handshakeCompletedOk = true;
      }
      catch (SIException e)
      {
         // No FFDC code needed

         // We don't FFDC here as being unable to connect is not necessarily a problem. In the case of bootstraping clients
         // each bootstrap triplet will be tried since being unable to connect to some targets is to be expected - particularly
         // in fail over scenarios. We have also discovered that a FFDC during a fail over can slow the fail over process. Instead
         // we just throw the exception back to our caller and let the layers above which know the bigger picture decide whether
         // to FFDC or not.

         if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""Unable to make initial connection"", e);

         SIResourceException ce = new SIResourceException(
            nls.getFormattedMessage(""CONNECT_FAILED_SICO1001"", new Object[] { e }, null)
         );

         ce.initCause(e);
         if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, ""connect"", ce);
         throw ce;
      }
      finally
      {
         // Ensure we always call this - as even if we fail we don't want to block everyone
         // else out from starting a conversation
         if (con != null)
         {
            if (handshakeCompletedOk)
            {
               con.handshakeComplete();
            }
            else
            {
            	// release any handshake waiters  
                if (con != null)
                   con.handshakeFailed();
                
                // Start D273578
                // Ensure we close the conversation down ignoring any exceptions
                try 
                {
                   if (con != null)
                      con.close();
                }
                catch (SIException e2)
                {
                   // No FFDC Code Needed
                   if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.debug(this, tc, ""Failed to close connection: "" + e2);
                }
                // End D273578
                
                con = null;
            }
         }
      }

      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, ""connect"");
   }",This method is called by the client side connection code to establish a connection to a server.
"public static OutputStream getOutputStream(Socket socket, long timeout) 
      throws IOException {
    return (socket.getChannel() == null) ? 
        socket.getOutputStream() : new SocketOutputStream(socket, timeout);            
  }",Get an output stream for the given socket.
"public BuildRecord removeBuildRecord(BuildRecord buildRecord) {
        getBuildRecords().remove(buildRecord);
        buildRecord.setUser(null);
        return buildRecord;
    }",Removes a build record from the build record list.
"public void enter(@NonNull View from, boolean withAnimation) {
        if (GestureDebug.isDebugAnimator()) {
            Log.d(TAG, ""Entering from view, with animation = "" + withAnimation);
        }

        enterInternal(withAnimation);
        updateInternal(from);
    }",Enter a view.
"public Specificity computeSpecificity() {
		
		Specificity spec = new SpecificityImpl();
		
		for(Selector s: list) 
			s.computeSpecificity(spec);
			
		return spec;
		
	}",Compute specificity.
"private void addHeaders(HttpRequest request, Map<String, String> headers) {
		for (Map.Entry<String, String> key : headers.entrySet()) {
			request.addHeader(key.getKey(), key.getValue());
		}
	}",Add headers to the request
"public boolean signatureCoversWholeDocument(String name) {
        getSignatureNames();
        name = getTranslatedFieldName(name);
        if (!sigNames.containsKey(name))
            return false;
        return ((int[])sigNames.get(name))[0] == reader.getFileLength();
    }",Check if the signature contains a single document.
"public Observable<Void> recognizeTextAsync(String url, TextRecognitionMode mode) {
        return recognizeTextWithServiceResponseAsync(url, mode).map(new Func1<ServiceResponseWithHeaders<Void, RecognizeTextHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RecognizeTextHeaders> response) {
                return response.body();
            }
        });
    }",Recognize text from the specified URL.
"protected <X> Specification<ENTITY> buildSpecification(Filter<X> filter, SingularAttribute<? super ENTITY, X>
        field) {
        if (filter.getEquals() != null) {
            return equalsSpecification(field, filter.getEquals());
        } else if (filter.getIn() != null) {
            return valueIn(field, filter.getIn());
        } else if (filter.getSpecified() != null) {
            return byFieldSpecified(field, filter.getSpecified());
        }
        return null;
    }",Build a Specification from a filter.
"private void _appendCharacterEscape(char esc, char ch)
            throws IOException, JsonGenerationException
    {
        if ((_outputTail + 1) >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = esc;
        _outputBuffer[_outputTail++] = ch;
    }",Append a character escape.
"@Override
  public void write (@Nonnull final String sStr, final int nOfs, final int nLen)
  {
    m_aSB.append (sStr.substring (nOfs, nOfs + nLen));
  }",Write the content of the IDE phrase.
"protected boolean processTopicSourceUrls(final TopicSourceURLProvider topicSourceURLProvider, final SpecTopic specTopic,
            final TopicWrapper topic) {
        LOG.debug(""Processing topic source urls"");

        boolean changed = false;
        // Save the new Source Urls
        final List<String> urls = specTopic.getSourceUrls(true);

        if (urls != null && !urls.isEmpty()) {
            final UpdateableCollectionWrapper<TopicSourceURLWrapper> sourceUrls = topic.getSourceURLs() == null ? topicSourceURLProvider
                    .newTopicSourceURLCollection(topic) : topic.getSourceURLs();

            // Iterate over the spec topic urls and add them
            for (final String url : urls) {
                final TopicSourceURLWrapper sourceUrl = topicSourceURLProvider.newTopicSourceURL(topic);
                sourceUrl.setUrl(url);

                sourceUrls.addNewItem(sourceUrl);
            }

            topic.setSourceURLs(sourceUrls);
            changed = true;
        }

        return changed;
    }",Process the topic source urls.
"private String[] augmentCommand(String[] args, Class<? extends Command> cmd,
			boolean acceptsInputFile) {
		OptionGroup<ID> options;
		try {
			if (acceptsInputFile) {
				options = OptionIntrospector.introspect(cmd, InputFileCommand.class);
			} else {
				options = OptionIntrospector.introspect(cmd);
			}
		} catch (IntrospectionException e) {
			//should never happen
			throw new RuntimeException(e);
		}
		
		ShellContext sc = ShellContext.current();
		for (Option<ID> o : options.getOptions()) {
			if (o.getLongName().equals(""style"")) {
				args = ArrayUtils.add(args, ""--style"");
				args = ArrayUtils.add(args, sc.getStyle());
			} else if (o.getLongName().equals(""locale"")) {
				args = ArrayUtils.add(args, ""--locale"");
				args = ArrayUtils.add(args, sc.getLocale());
			} else if (o.getLongName().equals(""format"")) {
				args = ArrayUtils.add(args, ""--format"");
				args = ArrayUtils.add(args, sc.getFormat());
			} else if (o.getLongName().equals(""input"") &&
					sc.getInputFile() != null && !sc.getInputFile().isEmpty()) {
				args = ArrayUtils.add(args, ""--input"");
				args = ArrayUtils.add(args, sc.getInputFile());
			}
		}
		
		return args;
	}",Augment command with command options.
"public static void isNotEmpty( Iterator<?> argument,
                                   String name ) {
        isNotNull(argument, name);
        if (!argument.hasNext()) {
            throw new IllegalArgumentException(CommonI18n.argumentMayNotBeEmpty.text(name));
        }
    }",Check if the iterator is not empty
"public static CommerceTierPriceEntry findByUuid_First(String uuid,
		OrderByComparator<CommerceTierPriceEntry> orderByComparator)
		throws com.liferay.commerce.price.list.exception.NoSuchTierPriceEntryException {
		return getPersistence().findByUuid_First(uuid, orderByComparator);
	}",Returns the first commerce tier price entry matching the UUID and sorts the ordered set.
"public CompositeHandler withQueryHandler(final QueryHandler handler) {
        if (handler == null) {
            throw new IllegalArgumentException();
        } // end of if

        // ---

        return new CompositeHandler(this.queryDetection,
                                    handler,
                                    this.updateHandler);
        
    }",Creates a new composite handler with the specified query handler.
"public static int getYAsOppositeTileFormat(int zoom, int y) {
		int tilesPerSide = tilesPerSide(zoom);
		int oppositeY = tilesPerSide - y - 1;
		return oppositeY;
	}",Get the y coordinate of the tile in the zoom level as the opposite tile format.
"private void initReader(Object obj) {
		if (obj instanceof WorkingDirectoryLocationAware) {
			((WorkingDirectoryLocationAware) obj).setWorkingDirectory(workingDirectory);
		}
		if (obj instanceof ServletContextAware) {
			((ServletContextAware) obj).setServletContext(servletContext);
		}

		if (obj instanceof ResourceBrowser) {
			resourceInfoProviders.add(0, (ResourceBrowser) obj);
		}
	}",Initialize the reader.
"public final void reset(boolean resetChunkSize)
    {
        firstChunk = null;
        lastChunk = null;
        totalCharsInList = 0;
        totalCharsInDynamicChunks = -1;
        sizeAtLeast = -1;
        if (resetChunkSize)
        {
            chunkSize = firstChunkSize;
            totalChunkSize = 0;
        }
        allocBuffer = new AllocatedBuffer(chunkSize);
        dynamicChunkMap = new HashMap<StreamCharBufferKey, StreamCharBufferSubChunk>();
    }",Resets the internal state of the internal state.
"public static void addFile(State state, String file) {
    state.setProp(ADD_FILES, state.getProp(ADD_FILES, """") + "","" + file);
  }",Add a file to the state.
"public static String chop(String target) {
		if (isEmpty(target)) { return EMPTY; }
		int len = target.length(), lastIdx = -1;
		if (len >= 2 && target.charAt(len - 1) == LF && target.charAt(len - 2) == CR) {
			if (len == 2) { return EMPTY; } lastIdx = -2; 
		}
		return replace(target).afters(lastIdx).byNone().last();
	}",Chop off the last character of the target string.
"private Entry<V> computeIfAbsent(K key) {
    Entry<V> v = map.get(key);
    if (v == null) {
      Entry<V> tmp = entryGetter.apply(key);
      v = map.putIfAbsent(key, tmp);
      if (v == null) {
        v = tmp;
      }
    }
    return v;
  }",Compute the entry for the given key.
"protected void generateTitleBand() {
		log.debug(""Generating title band..."");
		JRDesignBand band = (JRDesignBand) getDesign().getPageHeader();
		int yOffset = 0;

		//If title is not present then subtitle will be ignored
		if (getReport().getTitle() == null)
			return;

		if (band != null && !getDesign().isTitleNewPage()){
			//Title and subtitle comes afer the page header
			yOffset = band.getHeight();

		} else {
			band = (JRDesignBand) getDesign().getTitle();
			if (band == null){
				band = new JRDesignBand();
				getDesign().setTitle(band);
			}
		}

		JRDesignExpression printWhenExpression = new JRDesignExpression();
		printWhenExpression.setValueClass(Boolean.class);
		printWhenExpression.setText(EXPRESSION_TRUE_WHEN_FIRST_PAGE);

		JRDesignTextField title = new JRDesignTextField();
		JRDesignExpression exp = new JRDesignExpression();
		if (getReport().isTitleIsJrExpression()){
			exp.setText(getReport().getTitle());
		}else {
			exp.setText(""\"""" + Utils.escapeTextForExpression( getReport().getTitle()) + ""\"""");
		}
		exp.setValueClass(String.class);
		title.setExpression(exp);
		title.setWidth(getReport().getOptions().getPrintableWidth());
		title.setHeight(getReport().getOptions().getTitleHeight());
		title.setY(yOffset);
		title.setPrintWhenExpression(printWhenExpression);
		title.setRemoveLineWhenBlank(true);
		applyStyleToElement(getReport().getTitleStyle(), title);
		title.setStretchType( StretchTypeEnum.NO_STRETCH );
		band.addElement(title);

		JRDesignTextField subtitle = new JRDesignTextField();
		if (getReport().getSubtitle() != null) {
			JRDesignExpression exp2 = new JRDesignExpression();
			exp2.setText(""\"""" + getReport().getSubtitle() + ""\"""");
			exp2.setValueClass(String.class);
			subtitle.setExpression(exp2);
			subtitle.setWidth(getReport().getOptions().getPrintableWidth());
			subtitle.setHeight(getReport().getOptions().getSubtitleHeight());
			subtitle.setY(title.getY() + title.getHeight());
			subtitle.setPrintWhenExpression(printWhenExpression);
			subtitle.setRemoveLineWhenBlank(true);
			applyStyleToElement(getReport().getSubtitleStyle(), subtitle);
			title.setStretchType( StretchTypeEnum.NO_STRETCH );
			band.addElement(subtitle);
		}


	}",Generate title band
"protected boolean isArrayJsonStenoEvent(@Nullable final Marker marker) {
        return marker != null && marker.contains(StenoMarker.ARRAY_JSON_MARKER);
    }",Check if the given marker is an array json event.
"protected void addRequestHeaders(final HttpServletRequest httpServletRequest, final Map<String, List<Object>> attributes) {
        for (final Map.Entry<String, Set<String>> headerAttributeEntry : this.headerAttributeMapping.entrySet()) {
            final String headerName = headerAttributeEntry.getKey();
            final String value = httpServletRequest.getHeader(headerName);

            if (value != null) {
                for (final String attributeName : headerAttributeEntry.getValue()) {
                    attributes.put(attributeName,
                            headersToIgnoreSemicolons.contains(headerName) ?
                                    list(value)
                                    : splitOnSemiColonHandlingBackslashEscaping(value));
                }
            }
        }
    }",Add request headers.
"public static lbvserver get(nitro_service service, String name) throws Exception{
		lbvserver obj = new lbvserver();
		obj.set_name(name);
		lbvserver response = (lbvserver) obj.get_resource(service);
		return response;
	}",Use this API to fetch lbvserver resource of given name.
"private static AlluxioFuseOptions parseOptions(String[] args, AlluxioConfiguration alluxioConf) {
    final Options opts = new Options();
    final Option mntPoint = Option.builder(""m"")
        .hasArg()
        .required(true)
        .longOpt(""mount-point"")
        .desc(""Desired local mount point for alluxio-fuse."")
        .build();

    final Option alluxioRoot = Option.builder(""r"")
        .hasArg()
        .required(true)
        .longOpt(""alluxio-root"")
        .desc(""Path within alluxio that will be used as the root of the FUSE mount ""
            + ""(e.g., /users/foo; defaults to /)"")
        .build();

    final Option help = Option.builder(""h"")
        .required(false)
        .desc(""Print this help"")
        .build();

    final Option fuseOption = Option.builder(""o"")
        .valueSeparator(',')
        .required(false)
        .hasArgs()
        .desc(""FUSE mount options"")
        .build();

    opts.addOption(mntPoint);
    opts.addOption(alluxioRoot);
    opts.addOption(help);
    opts.addOption(fuseOption);

    final CommandLineParser parser = new DefaultParser();
    try {
      CommandLine cli = parser.parse(opts, args);

      if (cli.hasOption(""h"")) {
        final HelpFormatter fmt = new HelpFormatter();
        fmt.printHelp(AlluxioFuse.class.getName(), opts);
        return null;
      }

      String mntPointValue = cli.getOptionValue(""m"");
      String alluxioRootValue = cli.getOptionValue(""r"");

      List<String> fuseOpts = new ArrayList<>();
      boolean noUserMaxWrite = true;
      if (cli.hasOption(""o"")) {
        String[] fopts = cli.getOptionValues(""o"");
        // keep the -o
        for (final String fopt: fopts) {
          fuseOpts.add(""-o"" + fopt);
          if (noUserMaxWrite && fopt.startsWith(""max_write"")) {
            noUserMaxWrite = false;
          }
        }
      }
      // check if the user has specified his own max_write, otherwise get it
      // from conf
      if (noUserMaxWrite) {
        final long maxWrite = alluxioConf.getBytes(PropertyKey.FUSE_MAXWRITE_BYTES);
        fuseOpts.add(String.format(""-omax_write=%d"", maxWrite));
      }

      final boolean fuseDebug = alluxioConf.getBoolean(PropertyKey.FUSE_DEBUG_ENABLED);

      return new AlluxioFuseOptions(mntPointValue, alluxioRootValue, fuseDebug, fuseOpts);
    } catch (ParseException e) {
      System.err.println(""Error while parsing CLI: "" + e.getMessage());
      final HelpFormatter fmt = new HelpFormatter();
      fmt.printHelp(AlluxioFuse.class.getName(), opts);
      return null;
    }
  }",Parses the command line options.
"@NotNull
    public Map<Object, Object> getPoolConfiguration() {
        return ConfigurationConverter.getMap(configuration.subset(GenericObjectPoolConfig.class.getName()));
    }",Get the configuration of the object pool.
"@Override
    public SimplePath[] interconnect(KamNode[] sources) {
        if (sources == null || sources.length < 2) {
            throw new InvalidArgument(
                    ""Source kam nodes cannot be null and must contain at least two source nodes."");
        }

        // build out target set, check that each node is in the KAM
        final Set<KamNode> targetSet = new HashSet<KamNode>(sources.length);
        for (int i = 0; i < sources.length; i++) {
            final KamNode source = sources[i];

            if (!kam.contains(source)) {
                throw new InvalidArgument(""Source does not exist in KAM."");
            }

            targetSet.add(source);
        }

        final List<SimplePath> pathsFound = new ArrayList<SimplePath>();
        for (final KamNode source : sources) {
            // remove source from target before search to prevent search the same
            // paths twice in the bidirectional search
            targetSet.remove(source);
            pathsFound.addAll(runDepthFirstSearch(kam, source, targetSet));
        }
        return pathsFound.toArray(new SimplePath[pathsFound.size()]);
    }",Interconnect method.
"List<I_CmsSimpleContextMenuEntry<Set<String>>> getMenuEntries() {

        if (m_menuEntries == null) {
            m_menuEntries = new ArrayList<I_CmsSimpleContextMenuEntry<Set<String>>>();
            m_menuEntries.add(new EntryResources());
            m_menuEntries.add(new EntryDelete());
        }
        return m_menuEntries;
    }",Gets the menu entries.
"public LineString toLineString(List<LatLng> latLngs, boolean hasZ,
                                   boolean hasM) {

        LineString lineString = new LineString(hasZ, hasM);

        populateLineString(lineString, latLngs);

        return lineString;
    }",Converts a list of latLngs to a LineString.
"public TransactionInfo queryTransactionByID(Peer peer, String txID) throws ProposalException, InvalidArgumentException {
        return queryTransactionByID(Collections.singleton(peer), txID, client.getUserContext());
    }",Query a transaction by ID
"public String get(String key) {
    if (properties.get(key) != null) {
      return properties.get(key);
    } else {
      return getConfigurationValue(key);
    }
  }",Get the value of the specified key.
"public static DoubleToLongFunction doubleToLongFunction(CheckedDoubleToLongFunction function, Consumer<Throwable> handler) {
        return t -> {
            try {
                return function.applyAsLong(t);
            }
            catch (Throwable e) {
                handler.accept(e);

                throw new IllegalStateException(""Exception handler must throw a RuntimeException"", e);
            }
        };
    }",Double to long function.
"public static Searcher get(String variant) {
        final Searcher searcher = instances.get(variant);
        if (searcher == null) {
            throw new IllegalStateException(Errors.SEARCHER_GET_BEFORE_CREATE);
        }
        return searcher;
    }",Get a Searcher for the specified variant.
"@SuppressWarnings(""unchecked"")
	@Override
	public EList<IfcTimePeriod> getTimePeriods() {
		return (EList<IfcTimePeriod>) eGet(Ifc4Package.Literals.IFC_RECURRENCE_PATTERN__TIME_PERIODS, true);
	}",Gets the list of time periods in this RecurringPattern.
"protected void threadStart() {

        // Has the background thread already been started?
        if (thread != null) {
            return;
        }

        // Start the background thread
        threadDone = false;
        thread = new Thread(this, threadName);
        thread.setDaemon(true);
        thread.start();

    }",Start the background thread.
"public final AnalyzeEntitySentimentResponse analyzeEntitySentiment(
      Document document, EncodingType encodingType) {

    AnalyzeEntitySentimentRequest request =
        AnalyzeEntitySentimentRequest.newBuilder()
            .setDocument(document)
            .setEncodingType(encodingType)
            .build();
    return analyzeEntitySentiment(request);
  }",Analyze an entity sentiment document.
"@RobeService(group = ""User"", description = ""Updates a single User matches with the given id."")
    @PATCH
    @UnitOfWork
    @Path(""{id}"")
    public User merge(@RobeAuth Credentials credentials, @PathParam(""id"") String id, User model) {
        if (!id.equals(model.getOid()))
            throw new WebApplicationException(Response.status(412).build());
        User dest = userDao.findById(id);
        if (dest == null) {
            throw new WebApplicationException(Response.status(404).build());
        }
        Fields.mergeRight(model, dest);
        return userDao.update(dest);
    }",Updates a single User in the database.
"@Override
    public InetAddress getLocalAddress() {
        InetAddress address = null;

        if (udpNetworkLayer != null) {
            address = udpNetworkLayer.getDatagramSocket().getLocalAddress();
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
                if (address == null) {
                    Tr.debug(tc, ""getLocalAddress == null"");
                }
            }
        } else {
            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
                Tr.debug(tc, ""getLocalAddress; udpNetworkLayer == null"");
            }
        }
        return address;
    }",This method is used to get the local address of the local socket.
"protected String encodeCookie(SerializableHttpCookie cookie) {
        if (cookie == null)
            return null;
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try {
            ObjectOutputStream outputStream = new ObjectOutputStream(os);
            outputStream.writeObject(cookie);
        } catch (IOException e) {
            Util.log(""IOException in encodeCookie"", e);
            return null;
        }

        return byteArrayToHexString(os.toByteArray());
    }",Encode a SerializableHttpCookie object into a String.
"public String getMenuName(HttpServletRequest request, String overrideName) {
		if (!StringUtils.isEmpty(overrideName)) {
			return overrideName;
		}
		String name = request.getRequestURI().replaceFirst(AdminTool.ROOTCONTEXT, """");
		if (!StringUtils.isEmpty(request.getContextPath())) {
			name = name.replaceFirst(request.getContextPath(), """");
		}
		if (name.startsWith(""/"")) {
			name = name.substring(1, name.length());
		}
		return name;
	}",Get the menu name from the request.
"@Override
    protected Long callInternal() throws Exception {
        return portletRenderer.doServeResource(
                portletWindowId, request, response, new ResourcePortletOutputHandler(response));
    }",Override internal method to call the base implementation of the method.
"public JobScheduleGetOptions withIfUnmodifiedSince(DateTime ifUnmodifiedSince) {
        if (ifUnmodifiedSince == null) {
            this.ifUnmodifiedSince = null;
        } else {
            this.ifUnmodifiedSince = new DateTimeRfc1123(ifUnmodifiedSince);
        }
        return this;
    }",Sets the ifUnmodifiedSince value.
"protected String matchAxisTypeAndDimension(NetcdfDataset ds, AxisType type, final Dimension outer, final Dimension inner) {
    Variable var = CoordSysEvaluator.findCoordByType(ds, type, new CoordSysEvaluator.Predicate() {
      @Override
      public boolean match(CoordinateAxis axis) {
        return ((axis.getRank() == 2) && outer.equals(axis.getDimension(0)) && inner.equals(axis.getDimension(1)));
      }
    });
    if (var == null) return null;
    return var.getShortName();
  }",Returns the name of the first coordinate axis with the specified type and dimension.
"public IfcLampTypeEnum createIfcLampTypeEnumFromString(EDataType eDataType, String initialValue) {
		IfcLampTypeEnum result = IfcLampTypeEnum.get(initialValue);
		if (result == null)
			throw new IllegalArgumentException(
					""The value '"" + initialValue + ""' is not a valid enumerator of '"" + eDataType.getName() + ""'"");
		return result;
	}",Create an IfcLampTypeEnum from a String value.
"public void withFollowings(boolean followings) {
    if (followings) {
      addQueryParameter(Constants.WITH_PARAM, Constants.WITH_FOLLOWINGS);
    } else {
      removeQueryParameter(Constants.WITH_PARAM);
    }
  }",Add followings to the query parameter.
"@Override
    public void setMaxFieldSize(int max) throws SQLException {
        if (statement != null) {
            statement.setMaxFieldSize(max);
        } else {
            tag.setMaxFieldSize(true);
            prop.setMaxFieldSize(max);
        }
    }",Sets the maximum field size for a single SELECTION.
"protected void process(HttpServletRequest request, HttpServletResponse response, String fileName)
            throws IOException {
        // TODO put this html code in a template
        response.setContentType(""text/html"");
        response.setCharacterEncoding(""UTF-8"");
        response.setStatus(200);
        FileBackedStringBuffer buffer = new FileBackedStringBuffer();

        buffer.append(""<html><head><title>"");
        buffer.append(request.getRemoteHost());
        buffer.append(""</title><script type=text/javascript>"");
        buffer.append(""function submitform() { document.myform.submit(); } </script>"");
        buffer.append(""</head><body><H1>View Logs on - "");
        buffer.append(request.getRemoteHost()).append(""</H1>"");

        if (isLogsDirectoryEmpty()) {
            buffer.append(""<br>No Logs available.</br></body></html>"");
            dumpStringToStream(buffer, response.getOutputStream());
            return;
        }
        buffer.append(appendMoreLogsLink(fileName, request.getRequestURL().toString()));
        buffer.append(renderLogFileContents(fileName));
        buffer.append(""</body></html>"");
        dumpStringToStream(buffer, response.getOutputStream());
    }",Process the request.
"private String parseAttributeValue(String watch) throws JasperException {
	Mark start = reader.mark();
	Mark stop = reader.skipUntilIgnoreEsc(watch);
	if (stop == null) {
	    err.jspError(start, ""jsp.error.attribute.unterminated"", watch);
	}

	String ret = parseQuoted(reader.getText(start, stop));
	if (watch.length() == 1)	// quote
	    return ret;

	// putback delimiter '<%=' and '%>', since they are needed if the
	// attribute does not allow RTexpression.
	return ""<%="" + ret + ""%>"";
    }",Parse an attribute value.
"private void auditStatusWhenQualityGateDetailsFound(Map condition, CodeQualityAuditResponse codeQualityAuditResponse) {
        if (StringUtils.equalsIgnoreCase(condition.get(""metric"").toString(), CodeQualityMetricType.BLOCKER_VIOLATIONS.getType())) {
            codeQualityAuditResponse.addAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_BLOCKER_FOUND);
            if (!StringUtils.equalsIgnoreCase(condition.get(""level"").toString(), ""ERROR"")) {
                codeQualityAuditResponse.addAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_BLOCKER_MET);
            }
        } else if (StringUtils.equalsIgnoreCase(condition.get(""metric"").toString(), CodeQualityMetricType.CRITICAL_VIOLATIONS.getType())) {
            codeQualityAuditResponse.addAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_CRITICAL_FOUND);
            if (!StringUtils.equalsIgnoreCase(condition.get(""level"").toString(), ""ERROR"")) {
                codeQualityAuditResponse.addAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_CRITICAL_MET);
            }
        } else if (StringUtils.equalsIgnoreCase(condition.get(""metric"").toString(), CodeQualityMetricType.UNIT_TEST.getType())) {
            codeQualityAuditResponse.addAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_UNIT_TEST_FOUND);
            if (!StringUtils.equalsIgnoreCase(condition.get(""level"").toString(), ""ERROR"")) {
                codeQualityAuditResponse.addAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_UNIT_TEST_MET);
            }
        } else if (StringUtils.equalsIgnoreCase(condition.get(""metric"").toString(), CodeQualityMetricType.NEW_COVERAGE.getType())
                || StringUtils.equalsIgnoreCase(condition.get(""metric"").toString(), CodeQualityMetricType.COVERAGE.getType())) {
            codeQualityAuditResponse.addAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_CODE_COVERAGE_FOUND);
            if (!StringUtils.equalsIgnoreCase(condition.get(""level"").toString(), ""ERROR"")) {
                codeQualityAuditResponse.addAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_CODE_COVERAGE_MET);
            }
        }
    }",Audit status when quality gate details found.
"public void callback(final Callback callback)
    {
        Runnable runnable = new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    callback.result(queryId, awaitResult());
                }
                catch (Exception e)
                {
                    callback.error(queryId, e);
                }
            }
        };
        EXECUTOR_SERVICE.submit(runnable);
    }",Await result and callback for a single appid
"@Override
	public List<CommerceCurrency> getCommerceCurrenciesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<CommerceCurrency> orderByComparator) {
		return commerceCurrencyPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}",Returns a range of commerce currencies matching the UUID and company.
"public CacheConfigurationBuilder<K, V> withLoaderWriter(Class<CacheLoaderWriter<K, V>> loaderWriterClass, Object... arguments) {
    return addOrReplaceConfiguration(new DefaultCacheLoaderWriterConfiguration(requireNonNull(loaderWriterClass, ""Null loaderWriterClass""), arguments));
  }",Add a loader writer configuration.
"@Override
	public void cacheResult(
		CommerceTaxFixedRateAddressRel commerceTaxFixedRateAddressRel) {
		entityCache.putResult(CommerceTaxFixedRateAddressRelModelImpl.ENTITY_CACHE_ENABLED,
			CommerceTaxFixedRateAddressRelImpl.class,
			commerceTaxFixedRateAddressRel.getPrimaryKey(),
			commerceTaxFixedRateAddressRel);

		commerceTaxFixedRateAddressRel.resetOriginalValues();
	}",Caches the commerce tax fixed rate address rel in the entity cache if it is enabled.
"public static Date getLastNDay(Date d, int n, int unitType) {
    	Calendar cal = Calendar.getInstance();
        cal.setTime(d); 
        cal.add(unitType, -n);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        return cal.getTime();
    }",Get the last n days of the date.
"public DescribeSecretResult withVersionIdsToStages(java.util.Map<String, java.util.List<String>> versionIdsToStages) {
        setVersionIdsToStages(versionIdsToStages);
        return this;
    }",A map of version IDs to stages.
"public Boolean assignRoleToUser(long id, List<Long> roleIds) throws OAuthSystemException, OAuthProblemException, URISyntaxException {
		cleanError();
		prepareToken();

		OneloginURLConnectionClient httpClient = new OneloginURLConnectionClient();
		OAuthClient oAuthClient = new OAuthClient(httpClient);

		URIBuilder url = new URIBuilder(settings.getURL(Constants.ADD_ROLE_TO_USER_URL, Long.toString(id)));
		OAuthClientRequest bearerRequest = new OAuthBearerClientRequest(url.toString())
			.buildHeaderMessage();

		Map<String, String> headers = getAuthorizedHeader();
		bearerRequest.setHeaders(headers);

		HashMap<String, Object> params = new HashMap<String, Object>();
		params.put(""role_id_array"", roleIds);

		String body = JSONUtils.buildJSON(params);
		bearerRequest.setBody(body);

		Boolean success = true;
		OneloginOAuthJSONResourceResponse oAuthResponse = oAuthClient.resource(bearerRequest, OAuth.HttpMethod.PUT, OneloginOAuthJSONResourceResponse.class);
		if (oAuthResponse.getResponseCode() != 200) {
			success = false;
			error = oAuthResponse.getError();
			errorDescription = oAuthResponse.getErrorDescription();
			errorAttribute = oAuthResponse.getErrorAttribute();
		}

		return success;
	}",Assigns a list of roles to a user.
"public final void putCharLittleEndian(int index, char value) {
		if (LITTLE_ENDIAN) {
			putChar(index, value);
		} else {
			putChar(index, Character.reverseBytes(value));
		}
	}",Puts a char value into the buffer at the given index in little - endian order.
"public static byte[] decode(InputStream in) {
        try {
            return IOUtils.toByteArray(decodeToStream(in));
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }",Decode a byte array from an input stream.
"@Beta
  public final Predicate<T> equivalentTo(@Nullable T target) {
    return new EquivalentToPredicate<T>(this, target);
  }",Returns a predicate that returns true if the given target object is equivalent to this object.
"public static String getPackageName(Elements elementUtils, Types typeUtils, TypeMirror type) {
		TypeVisitor<DeclaredType, Object> tv = new SimpleTypeVisitor6<DeclaredType, Object>() {

			@Override
			public DeclaredType visitDeclared(DeclaredType t, Object p) {
				return t;
			}
		};
		DeclaredType dt = type.accept(tv, null);
		if (dt != null) {
			ElementVisitor<TypeElement, Object> ev =
					new SimpleElementVisitor6<TypeElement, Object>() {

						@Override
						public TypeElement visitType(TypeElement e, Object p) {
							return e;
						}
					};
			TypeElement el = typeUtils.asElement(dt).accept(ev, null);
			if (el != null && el.getNestingKind() != NestingKind.TOP_LEVEL) {
				return AptUtil.getPackageName(elementUtils, el);
			}
		}
		return AptUtil.getPackageNameSub(type);
	}",Get the package name of a type.
"private static boolean validateTermWithStartValue(BytesRef term,
      ComponentTermVector termVector) {
    if (termVector.startValue == null) {
      return true;
    } else if (termVector.subComponentFunction.sortType
        .equals(CodecUtil.SORT_TERM)) {
      if (term.length > termVector.startValue.length) {
        byte[] zeroBytes = (new BytesRef(""\u0000"")).bytes;
        int n = (int) (Math
            .ceil(((double) (term.length - termVector.startValue.length))
                / zeroBytes.length));
        byte[] newBytes = new byte[termVector.startValue.length
            + n * zeroBytes.length];
        System.arraycopy(termVector.startValue.bytes, 0, newBytes, 0,
            termVector.startValue.length);
        for (int i = 0; i < n; i++) {
          System.arraycopy(zeroBytes, 0, newBytes,
              termVector.startValue.length + i * zeroBytes.length,
              zeroBytes.length);
        }
        termVector.startValue = new BytesRef(newBytes);
      }
      if ((termVector.subComponentFunction.sortDirection.equals(
          CodecUtil.SORT_ASC) && (termVector.startValue.compareTo(term) < 0))
          || (termVector.subComponentFunction.sortDirection
              .equals(CodecUtil.SORT_DESC)
              && (termVector.startValue.compareTo(term) > 0))) {
        return true;
      }
    }
    return false;
  }",Validate the term with the start value.
"@Override
    public String getConnectionInfo() throws Exception
    {
        Connection connection = ds.getConnection();

        String info =  String.format(""Connected to database: %s using driver: %s as user :%s"",
                             connection.getMetaData().getDatabaseProductName(),
                             connection.getMetaData().getDriverName(),
                             connection.getMetaData().getUserName());

        connection.close();

        return info;
    }",Get connection info.
"public static FormModelFragment getFormModelFragment(FragmentActivity enclosing) {
        // find the retained fragment on activity restarts
        FragmentManager fm = enclosing.getSupportFragmentManager();
        FormModelFragment formModelFragment = (FormModelFragment) fm.findFragmentByTag(FormModelFragment.TAG);

        if (formModelFragment == null) {
            // create the retained fragment and data the first time
            formModelFragment = new FormModelFragment();
            fm.beginTransaction().add(formModelFragment, FormModelFragment.TAG).commit();
            formModelFragment.setModel(new MapFormModel());
        }

        return formModelFragment;
    }",Get the FormModelFragment from the FragmentManager.
"public static boolean isConsolePrintable(int cp) {
        return (cp >= 0x20 && cp < 0x7F) ||  // main printable ascii
               Character.isDefined(cp) &&
               !((cp < 0x0020 && cp != '\n') ||
                 (0x007F <= cp && cp <  0x00A0) ||
                 Character.isIdentifierIgnorable(cp) ||
                 (0x07e8 <= cp && cp <= 0x07f3) ||
                 (0x07f6 <= cp && cp <= 0x0900) ||
                 cp == 0x0ac6 ||
                 (0x0bfc <= cp && cp <= 0x0d01) ||
                 cp == 0x0f8c ||
                 cp == 0x10cd ||
                 cp == 0x10fd || cp == 0x10fe || cp == 0x10ff ||
                 (0x1a20 <= cp && cp <= 0x1cff) ||
                 cp == 0x1680 ||
                 (0x1701 <= cp && cp <= 0x1711) ||
                 (0x1740 <= cp && cp <= 0x1770) ||
                 cp == 0x1772 || cp == 0x1773 ||
                 (0x1800 <= cp && cp <= 0x18af) ||
                 (0x1900 <= cp && cp <= 0x194f) ||
                 (0x1980 <= cp && cp <= 0x19df) ||
                 cp == 0x1dcd || cp == 0x1dce ||
                 cp == 0x1dd0 ||
                 cp == 0x2028 ||
                 cp == 0x2c22 ||
                 cp == 0x2c2b || cp == 0x2c2c || cp == 0x2c2d ||
                 cp == 0x2c52 ||
                 cp == 0x2c5b || cp == 0x2c5c || cp == 0x2c5d ||
                 (0x2cb2 <= cp && cp <= 0x2cbf) ||
                 (0x2cc2 <= cp && cp <= 0x2cc7) ||
                 (0x2ccc <= cp && cp <= 0x2ce3) ||
                 (0x2ceb <= cp && cp <= 0x2cee) ||
                 (0x2cf0 <= cp && cp <= 0x2cfc) ||
                 cp == 0x2d70 ||
                 (0xa000 <= cp && cp <= 0xa4cf) ||
                 (0xa674 <= cp && cp <= 0xa67b) ||
                 (0xa698 <= cp && cp <= 0xa6ff) ||
                 cp == 0xa754 || cp == 0xa755 ||
                 cp == 0xa758 || cp == 0xa759 ||
                 (0xa75c <= cp && cp <= 0xa763) ||
                 (0xa76a <= cp && cp <= 0xa76d) ||
                 (0xa771 <= cp && cp <= 0xa778) ||
                 (0xa800 <= cp && cp <= 0xa8df) ||
                 (0xa930 <= cp && cp <= 0xa95f) ||
                 (0xa97d <= cp && cp <= 0xaa5e) ||
                 (0xaa7c <= cp && cp <= 0xaaff) ||
                 (0xab30 <= cp && cp <= 0xabff) ||
                 (0xd7fc <= cp && cp <= 0xdfff) ||
                 (0xe47f <= cp && cp <= 0xe48a) ||
                 (0xe4c5 <= cp && cp <= 0xe4ff) ||
                 cp == 0xe506 ||
                 (0xe50b <= cp && cp <= 0xe50e) ||
                 cp == 0xe52d ||
                 (0xe534 <= cp && cp <= 0xe547) ||
                 cp == 0xe55d ||
                 (0xe560 <= cp && cp <= 0xe56f) ||
                 cp == 0xe576 || cp == 0xe577 ||
                 (0xe57d <= cp && cp <= 0xe583) ||
                 (0xe588 <= cp && cp <= 0xe58c) ||
                 cp == 0xe591 || cp == 0xe592 ||
                 (0xe598 <= cp && cp <= 0xe67f) ||
                 (0xe6a4 <= cp && cp <= 0xee68 &&
                  cp != 0xec0b &&
                  cp != 0xec96 && cp != 0xec97 &&
                  cp != 0xec99 &&
                  cp != 0xec9d) ||
                 (0xee94 <= cp && cp <= 0xeeff) ||
                 (0xef1a <= cp && cp <= 0xefec) ||

                 (0xfd40 <= cp && cp <= 0xfdff)
               );
    }",Returns true if the given code point is a printable code point.
"public FileModel getChildFile(ArchiveModel archiveModel, String filePath)
    {
        filePath = FilenameUtils.separatorsToUnix(filePath);
        StringTokenizer stk = new StringTokenizer(filePath, ""/"");

        FileModel currentFileModel = archiveModel;
        while (stk.hasMoreTokens() && currentFileModel != null)
        {
            String pathElement = stk.nextToken();

            currentFileModel = findFileModel(currentFileModel, pathElement);
        }
        return currentFileModel;
    }",Get the FileModel for the given path.
"public static void startup(final String _bootstrapPath,
                               final String _bootstrapFile)
        throws StartupException
    {
        // evaluate bootstrap path
        final File bsPath;
        if (_bootstrapPath != null) {
            bsPath = new File(_bootstrapPath);
        } else {
            final String envPath = System.getenv(StartupDatabaseConnection.ENV_PATH);
            if (envPath != null) {
                bsPath = new File(envPath);
            } else {
                bsPath = new File(System.getProperty(""user.home""), StartupDatabaseConnection.DEFAULT_BOOTSTRAP_PATH);
            }
        }
        // evaluate bootstrap file
        final String bsFile;
        File bootstrap = null;
        if (_bootstrapFile != null) {
            bsFile = _bootstrapFile;
        } else {
            final String envFile = System.getenv(StartupDatabaseConnection.ENV_FILE);
            if (envFile != null) {
                bsFile = envFile;
            } else {
                bsFile = StartupDatabaseConnection.DEFAULT_BOOTSTRAP_FILE;
            }
        }
        bootstrap = new File(bsFile);
        if (bootstrap == null || !bootstrap.exists()) {
            bootstrap = new File(bsPath, bsFile);
        }

        // read bootstrap file
        final Properties props = new Properties();
        try {
            props.loadFromXML(new FileInputStream(bootstrap));
        } catch (final FileNotFoundException e) {
            throw new StartupException(""bootstrap file "" + bootstrap + "" not found"", e);
        } catch (final IOException e) {
            throw new StartupException(""bootstrap file "" + bootstrap + "" could not be read"", e);
        }

        // and startup
        final Map<String, String> eFapsProps;
        if (props.containsKey(StartupDatabaseConnection.PROP_CONFIGPROP)) {
            eFapsProps = StartupDatabaseConnection.convertToMap(props
                            .getProperty(StartupDatabaseConnection.PROP_CONFIGPROP));
        } else {
            eFapsProps = new HashMap<>();
        }
        StartupDatabaseConnection.startup(props.getProperty(StartupDatabaseConnection.PROP_DBTYPE_CLASS),
                        props.getProperty(StartupDatabaseConnection.PROP_DBFACTORY_CLASS),
                        props.getProperty(StartupDatabaseConnection.PROP_DBCONNECTION),
                        props.getProperty(StartupDatabaseConnection.PROP_TM_CLASS),
                        null,
                        eFapsProps);
    }",Startup method.
"private void initializeBeamSearchChart(List<Object> terminals, BeamSearchCfgParseChart chart,
      long[] treeEncodingOffsets) {
    Variable terminalListValue = terminalVar.getOnlyVariable();

    // Adding this to a tree key indicates that the tree is a terminal.
    long terminalSignal = ((long) chart.chartSize()) * (treeEncodingOffsets[3] + treeEncodingOffsets[2]);

    for (int i = 0; i < terminals.size(); i++) {
      for (int j = i; j < terminals.size(); j++) {
        if (terminalListValue.canTakeValue(terminals.subList(i, j + 1))) {
          Assignment assignment = terminalVar.outcomeArrayToAssignment(terminals.subList(i, j + 1));
          Iterator<Outcome> iterator = terminalDistribution.outcomePrefixIterator(assignment);

          while (iterator.hasNext()) {
            Outcome bestOutcome = iterator.next();
            int root = nonterminalVariableType.getValueIndex(bestOutcome.getAssignment().getValue(parentVar.getOnlyVariableNum()));
            int ruleType = ruleVariableType.getValueIndex(bestOutcome.getAssignment().getValue(ruleTypeVar.getOnlyVariableNum()));
            long partialKeyNum = (root * treeEncodingOffsets[4]) + (ruleType * treeEncodingOffsets[5]);
            chart.addParseTreeKeyForSpan(i, j, terminalSignal + partialKeyNum,
                bestOutcome.getProbability());
          }
          // System.out.println(i + ""."" + j + "": "" + assignment + "" : "" +
          // chart.getParseTreesForSpan(i, j));
        }
      }
    }
  }",Initialize the BeamSearchCfgParseChart object.
"public void marshall(AffectedEntity affectedEntity, ProtocolMarshaller protocolMarshaller) {

        if (affectedEntity == null) {
            throw new SdkClientException(""Invalid argument passed to marshall(...)"");
        }

        try {
            protocolMarshaller.marshall(affectedEntity.getEntityArn(), ENTITYARN_BINDING);
            protocolMarshaller.marshall(affectedEntity.getEventArn(), EVENTARN_BINDING);
            protocolMarshaller.marshall(affectedEntity.getEntityValue(), ENTITYVALUE_BINDING);
            protocolMarshaller.marshall(affectedEntity.getEntityUrl(), ENTITYURL_BINDING);
            protocolMarshaller.marshall(affectedEntity.getAwsAccountId(), AWSACCOUNTID_BINDING);
            protocolMarshaller.marshall(affectedEntity.getLastUpdatedTime(), LASTUPDATEDTIME_BINDING);
            protocolMarshaller.marshall(affectedEntity.getStatusCode(), STATUSCODE_BINDING);
            protocolMarshaller.marshall(affectedEntity.getTags(), TAGS_BINDING);
        } catch (Exception e) {
            throw new SdkClientException(""Unable to marshall request to JSON: "" + e.getMessage(), e);
        }
    }",marshalls the given affectedEntity to the JSON object.
"public void setPermission(Path p, FsPermission permission
      ) throws IOException {
    dfs.setPermission(getPathName(p), permission);
  }",Set the permission of a file.
"public FieldList setHandle(Object bookmark, int iHandleType) throws DBException
    {
        if (this.doSetHandle(bookmark, iHandleType))
            return this.getRecord();
        else
            return null;
    }",Set the handle field.
"@Override
    public String getParameter(String name) {
        String value = wrapped.getParameter(name);
        if (value == null) {
            final String[] multipleValue = parameters.get(name);
            if ((multipleValue != null) && (multipleValue.length > 0)) {
                value = multipleValue[0];
            }
        }
        return value;
    }",Gets the value of the parameter with the given name.
"public void setPins(Map<String, String> pins) {
		Assert.notNull(pins, ""pins cannot be null"");
		this.pins = pins;
		updateHpkpHeaderValue();
	}",Sets the pins for the HPKP header.
"public GetOpenIDConnectProviderResult withClientIDList(String... clientIDList) {
        if (this.clientIDList == null) {
            setClientIDList(new com.amazonaws.internal.SdkInternalList<String>(clientIDList.length));
        }
        for (String ele : clientIDList) {
            this.clientIDList.add(ele);
        }
        return this;
    }",Sets the clientIDList value for the OpenIDConnectProvider.
"public void removeConnectionPool(URL url) {
        RequestBuilder req = new RequestBuilder();
        req.host = url.getHost();
        req.port = url.getPort() < 0 ? url.getDefaultPort() : url.getPort();
        removePool(req);
    }",Remove a connection pool from the cache.
"public static List<PathOperation> toPathOperationsList(String path, Path pathModel) {
        List<PathOperation> pathOperations = new ArrayList<>();
        getOperationMap(pathModel).forEach((httpMethod, operation) ->
                pathOperations.add(new PathOperation(httpMethod, path, operation)));
        return pathOperations;
    }",Converts a path to a list of PathOperations.
"public static <A, B, C, R> Stream<R> zip(final A[] a, final B[] b, final C[] c, final TriFunction<? super A, ? super B, ? super C, R> zipFunction) {
        return zip(ObjIteratorEx.of(a), ObjIteratorEx.of(b), ObjIteratorEx.of(c), zipFunction);
    }",Creates a stream that returns the results of applying the supplied zip function to each element of the first stream.
"private static InputStream findFileInClasspath(String fileName) {

		InputStream is = null;

		try {

			ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
			is = classLoader.getResourceAsStream(fileName);
			return is;

		} catch (Exception ex) {

			log.error(String.format(""Error while reading file '%s' from classpath"", fileName), ex);
			return null;
		}

	}",Find file in classpath.
"protected void createContentsTable(CmsSetupDb dbCon) throws SQLException {

        System.out.println(new Exception().getStackTrace()[0].toString());
        if (!dbCon.hasTableOrColumn(TABLE_CMS_CONTENTS, null)) {
            String query = readQuery(QUERY_CREATE_CMS_CONTENTS_TABLE);
            dbCon.updateSqlStatement(query, null, null);
        } else {
            System.out.println(""table "" + TABLE_CMS_CONTENTS + "" already exists"");
        }
    }",Creates the contents table.
"protected File getGeneratedResourcesDirectory() {
    if (generatedResourcesFolder == null) {
      String generatedResourcesFolderAbsolutePath = this.project.getBuild().getDirectory() + ""/"" + getGeneratedResourcesDirectoryPath();
      generatedResourcesFolder = new File(generatedResourcesFolderAbsolutePath);
      if (!generatedResourcesFolder.exists()) {
        generatedResourcesFolder.mkdirs();
      }
    }
    return generatedResourcesFolder;
  }",Get the generated resources directory
"public static boolean haveBackend() {
    for (DeepWaterParameters.Backend b : DeepWaterParameters.Backend.values()) {
      if (DeepwaterMojoModel.createDeepWaterBackend(b.toString()) != null) return true;
    }
    return false;
  }",Checks if the DeepWater parameters have a backend.
"public long currentTimeInMicros() {

        if (!this.isRunning()) {
            Moment m = this.currentTime();

            return (
                m.getPosixTime() * MIO
                + m.getNanosecond() / 1000
            );
        }

        long micros = SystemClock.MONOTONIC.currentTimeInMicros();
        return (micros + this.getLastOffset(micros));

    }",Get the current time in microseconds.
"static String getPathInfo(RequestLog requestLog) {
    String uri = requestLog.path();
    if (!StringUtils.hasText(uri)) return ""/"";
    return uri.replaceAll(""//+"", ""/"")
      .replaceAll(""/$"", """");
  }",Get the path info from the request log
"@FFDCIgnore(Exception.class)
    public static <T> StaticValue<T> createStaticValue(Callable<T> initializer) {
        if (multiplex) {
            return new Multiplexed<T>(initializer);
        }
        try {
            return new FinalSingleton<T>(initializer == null ? null : initializer.call());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }",Create a static value from a callable.
"@SuppressWarnings(""unchecked"")
  protected <E> EventDispatcher<E> getEventDispatcherRequired(Class<E> eventType) {

    return getEventDispatcher(eventType, true);
  }",Returns the dispatcher required to dispatch the specified event type.
"public static <T extends ImageBase<T>> void boundImage(T input , double min , double max ) {
		if( input instanceof ImageGray ) {
			if (GrayU8.class == input.getClass()) {
				PixelMath.boundImage((GrayU8) input, (int) min, (int) max);
			} else if (GrayS8.class == input.getClass()) {
				PixelMath.boundImage((GrayS8) input, (int) min, (int) max);
			} else if (GrayU16.class == input.getClass()) {
				PixelMath.boundImage((GrayU16) input, (int) min, (int) max);
			} else if (GrayS16.class == input.getClass()) {
				PixelMath.boundImage((GrayS16) input, (int) min, (int) max);
			} else if (GrayS32.class == input.getClass()) {
				PixelMath.boundImage((GrayS32) input, (int) min, (int) max);
			} else if (GrayS64.class == input.getClass()) {
				PixelMath.boundImage((GrayS64) input, (long) min, (long) max);
			} else if (GrayF32.class == input.getClass()) {
				PixelMath.boundImage((GrayF32) input, (float) min, (float) max);
			} else if (GrayF64.class == input.getClass()) {
				PixelMath.boundImage((GrayF64) input, min, max);
			} else {
				throw new IllegalArgumentException(""Unknown image Type: "" + input.getClass().getSimpleName());
			}
		} else if( input instanceof Planar ) {
			Planar in = (Planar)input;

			for (int i = 0; i < in.getNumBands(); i++) {
				boundImage( in.getBand(i), min, max);
			}
		}
	}",Computes the pixel - wise bound of the image.
"private final void closeRAF() throws LockFile.UnexpectedFileIOException {

        if (raf != null) {
            try {
                raf.close();
            } catch (IOException ex) {
                throw new UnexpectedFileIOException(this, ""closeRAF"", ex);
            } finally {
                raf = null;
            }
        }
    }",Close the RAF.
"private static void setupBindInfoPackage() {
		String nsuri = ""http://www.hibernate.org/xsd/orm/hbm"";
		String packageInfoClassName = ""org.hibernate.boot.jaxb.hbm.spi.package-info"";
		try {
			final Class<?> packageInfoClass = Class
					.forName(packageInfoClassName);
			final XmlSchema xmlSchema = packageInfoClass
					.getAnnotation(XmlSchema.class);
			if (xmlSchema == null) {
				LOG.warn(MessageFormat.format(
						""Class [{0}] is missing the [{1}] annotation. Processing bindings will probably fail."",
						packageInfoClassName, XmlSchema.class.getName()));
			} else {
				final String namespace = xmlSchema.namespace();
				if (nsuri.equals(namespace)) {
					LOG.warn(MessageFormat.format(
							""Namespace of the [{0}] annotation does not match [{1}]. Processing bindings will probably fail."",
							XmlSchema.class.getName(), nsuri));
				}
			}
		} catch (ClassNotFoundException cnfex) {
			LOG.warn(MessageFormat.format(
					""Class [{0}] could not be found. Processing bindings will probably fail."",
					packageInfoClassName), cnfex);
		}
	}",Setup the BindInfo package.
"public ExternalID getTVExternalIDs(int tvID, String language) throws MovieDbException {
        return tmdbTv.getTVExternalIDs(tvID, language);
    }",Get the external IDs for a TV record.
"public EventBus emit(String event, Object... args) {
        return _emitWithOnceBus(eventContext(event, args));
    }",Emit an event with parameters.
"public boolean check() throws Exception {
        // we need to create a copy of the file, because the container file
        // might be at the end of the stream.
        File fileCopy = File.createTempFile(""modeshape-sequencer-epub"", "".tmp"");
        IoUtil.write(in, new BufferedOutputStream(new FileOutputStream(fileCopy)));

        List<String> rootfiles = new ArrayList<>();
        try (ZipInputStream zipStream =
                new ZipInputStream(new FileInputStream(fileCopy))) {
            rootfiles = getRootfiles(zipStream);
        }

        if (!rootfiles.isEmpty()) {
            try (ZipInputStream zipStream =
                    new ZipInputStream(new FileInputStream(fileCopy))) {
                ZipEntry entry = null;
                while ((entry = zipStream.getNextEntry()) != null) {
                    String entryName = entry.getName();
                    if (rootfiles.contains(entryName)) {
                        checkRootfile(zipStream, entry);
                    }
                }
            }
        } else {
            throw new IllegalArgumentException(""No rootfile package found in given EPUB file."");
        }

        // try to delete the file immediately or on JVM exit
        boolean deleted = false;
        try {
            deleted = fileCopy.delete();
        } catch (SecurityException e) {
            // ignore
        }
        if (!deleted) {
            fileCopy.deleteOnExit();
        }

        return true;
    }",Check the EPUB file.
"public Hessian2Output createHessian2Output(OutputStream os)
    {
        Hessian2Output out = createHessian2Output();

        out.init(os);

        return out;
    }",Create a Hessian2Output object.
"private static void setPermissions(DataFormatDefinition dformatDefinition) {
        // Use Java Reflection to get the method setPermissions. This is done to allow compatibility between fuse 6.3 and fuse 6.2.1
        // The xstream library differs on version between the 6.2.1 and 6.3 version of fuse.
        Method setPermissions = null;
        try {
            setPermissions = dformatDefinition.getClass().getMethod(""setPermissions"", String.class);
        } catch (Exception e) {
        }

        if (setPermissions != null) {
            try {
                setPermissions.invoke(dformatDefinition, ""+*"");
            } catch (Exception e) {
            }
        }
    }",Set permissions for a data format definition.
"public static <T, U> ToIntBiFunction<T, U> toIntBiFunction(CheckedToIntBiFunction<T, U> function) {
        return Unchecked.toIntBiFunction(function, Unchecked.RETHROW_ALL);
    }",Get a ToIntBiFunction from a CheckedToIntBiFunction.
"public static Latency copyOf(AbstractLatency instance) {
    if (instance instanceof Latency) {
      return (Latency) instance;
    }
    return Latency.builder()
        .from(instance)
        .build();
  }",Creates a copy of the given Latency object.
"@Override
   public WorkspaceStorageConnection openConnection(boolean readOnly) throws RepositoryException
   {
      try
      {
         if (this.containerConfig.dbStructureType.isMultiDatabase())
         {
            return new PostgreMultiDbJDBCConnection(getJdbcConnection(readOnly), readOnly, containerConfig);
         }

         return new PostgreSingleDbJDBCConnection(getJdbcConnection(readOnly), readOnly, containerConfig);
      }
      catch (SQLException e)
      {
         throw new RepositoryException(e);
      }
   }","Override openConnection to create a new instance of the
   class."
"@NotNull
    @ObjectiveCName(""getTypingWithUid:"")
    public ValueModel<Boolean> getTyping(int uid) {
        return modules.getTypingModule().getTyping(uid).getTyping();
    }",Gets the typing object for a specific node.
"public Object next()
    {
        _current1.reset();
        if (_last1.key() == null)
            findFirst(_dstack);
        else
        {
            findNext(_dstack);
            if (_current1.key() == null)
                _eof = true;
        }

        if (_current1.key() != null)
            _last1.setLocation(_current1);

        return _current1.key();
    }",Method to get the next key from the iterator.
"public final <K> Ix<T> distinctUntilChanged(IxFunction<? super T, K> keySelector) {
        return new IxDistinctUntilChanged<T, K>(this, keySelector, EqualityHelper.INSTANCE);
    }",Create an Ix object that selects the distinct elements until the key selector returns true.
"@Override
    public boolean isSynchronous() {
        if (canBeSynchronous()) {
            if (this.canBeAsynchronous()) {
                String attr = this.getAttributeValue(PROP_SYNCHRONOUS_RESPONSE);
                return (attr!=null && attr.equalsIgnoreCase(""true""));
            } else return true;
        } else return false;
    }",Is the record a synchronous record?
"public void exit() {
        if (exiting()) {
            logger.debug(""Another thread is shutting down"");
            return;
        }
        final long start = System.currentTimeMillis();
        //noinspection finally
        File exitingSignal = getSignal(""exiting"");
        try {
            logger.info(banner(""Unloading the main component {}"", this.mainComponent));
            FileUtils.touch(exitingSignal);
            environment.unload(this.mainComponent);
            logger.info(banner(""Unloaded  the main component {}"", this.mainComponent));
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        } finally {
            FileUtils.deleteQuietly(exitingSignal);
            //启动一个额外的线程停止自身
            new Thread(""Stopper"") {
                @Override
                public void run() {
                    logger.info(banner(""System stops took {}"", formatDurationHMS(System.currentTimeMillis() - start)));
                    System.exit(0);
                }
            }.start();
        }
    }",Exit the application.
"protected CompletionStage<Result> onAuthFailure(final DeadboltHandler deadboltHandler,
                                                    final Optional<String> content,
                                                    final Http.RequestHeader request)
    {
        LOGGER.info(""Deadbolt: Access failure on [{}]"",
                    request.uri());

        CompletionStage<Result> result;
        try
        {
            result = deadboltHandler.onAuthFailure(request,
                                                   content);
        }
        catch (Exception e)
        {
            LOGGER.warn(""Deadbolt: Exception when invoking onAuthFailure"",
                        e);
            result = CompletableFuture.completedFuture(Results.internalServerError());
        }
        return result;
    }",On auth failure.
"public Collection<String> getLoadBalancerGroups() {
    final String requestUri = String.format(LOAD_BALANCER_FORMAT, getBaseUrl());
    return getCollection(requestUri, ""load balancer groups"", STRING_COLLECTION);
  }",Get load balancer groups
"public final DeviceRegistry createDeviceRegistry(
      LocationName parent, DeviceRegistry deviceRegistry) {

    CreateDeviceRegistryRequest request =
        CreateDeviceRegistryRequest.newBuilder()
            .setParent(parent == null ? null : parent.toString())
            .setDeviceRegistry(deviceRegistry)
            .build();
    return createDeviceRegistry(request);
  }",Create a DeviceRegistry object.
"public TreeNode<String> expand(final Map<String, Tree<String, ?>> variables) {
		return expand(variables, Function.identity());
	}",Expand the tree.
"public static int latitudeToTileY(double latitude, byte zoomLevel) {
        return pixelYToTileY(latitudeToPixelY(latitude, zoomLevel, DUMMY_TILE_SIZE), zoomLevel, DUMMY_TILE_SIZE);
    }",Get the tile Y coordinate for a latitude and zoom level.
"public synchronized String simonToString() {
		return ""Simon Counter: counter="" + counter +
			"", max="" + SimonUtils.presentMinMaxCount(max) +
			"", min="" + SimonUtils.presentMinMaxCount(min) +
			simonToStringCommon();
	}",Returns a string representation of the Simon Counter.
"public HttpSession getSelectedSession() {
		final int selectedRow = this.sessionsTable.getSelectedRow();
		if (selectedRow == -1) {
			// No row selected
			return null;
		}
		final int rowIndex = sessionsTable.convertRowIndexToModel(selectedRow);
		return this.sessionsModel.getHttpSessionAt(rowIndex);
	}",Gets the selected session.
"public String getHost() {
		String host = getAsNullableString(""host"");
		host = host != null ? host : getAsNullableString(""ip"");
		return host;
	}",Gets the value host property.
"public static Stream<Map.Entry<String, Object>> fieldsAndGetters(Object obj) {
		return fieldsAndGetters(obj, Predicates.alwaysTrue());
	}",Returns a stream of all the fields of the given object and all its superclasses.
"private String getName(CommandContext ctx, boolean failInBatch) throws CommandLineException {
        final ParsedCommandLine args = ctx.getParsedCommandLine();
        final String name = this.name.getValue(args, true);
        if (name == null) {
            throw new CommandFormatException(this.name + "" is missing value."");
        }
        if (!ctx.isBatchMode() || failInBatch) {
            if (!Util.isValidPath(ctx.getModelControllerClient(), Util.DEPLOYMENT_OVERLAY, name)) {
                throw new CommandFormatException(""Deployment overlay "" + name + "" does not exist."");
            }
        }
        return name;
    }",Get the name of the application.
"void patchGlobalScope(TypedScope globalScope, Node scriptRoot) {
    // Preconditions: This is supposed to be called only on (named) SCRIPT nodes
    // and a global typed scope should have been generated already.
    checkState(scriptRoot.isScript());
    checkNotNull(globalScope);
    checkState(globalScope.isGlobal());

    String scriptName = NodeUtil.getSourceName(scriptRoot);
    checkNotNull(scriptName);

    Predicate<Node> inScript = n -> scriptName.equals(NodeUtil.getSourceName(n));
    escapedVarNames.removeIf(var -> inScript.test(var.getScopeRoot()));
    assignedVarNames.removeIf(var -> inScript.test(var.getScopeRoot()));
    functionsWithNonEmptyReturns.removeIf(inScript);

    new FirstOrderFunctionAnalyzer().process(null, scriptRoot);

    // TODO(bashir): Variable declaration is not the only side effect of last
    // global scope generation but here we only wipe that part off.

    // Remove all variables that were previously declared in this scripts.
    // First find all vars to remove then remove them because of iterator.
    List<TypedVar> varsToRemove = new ArrayList<>();
    for (TypedVar oldVar : globalScope.getVarIterable()) {
      if (scriptName.equals(oldVar.getInputName())) {
        varsToRemove.add(oldVar);
      }
    }
    for (TypedVar var : varsToRemove) {
      // By removing the type here, we're potentially invalidating any files that contain
      // references to this type. Those files will need to be recompiled. Ideally, this
      // was handled by the compiler (see b/29121507), but in the meantime users of incremental
      // compilation will need to manage it themselves (e.g., by recompiling dependent files
      // based on the dep graph).
      String typeName = var.getName();
      globalScope.undeclare(var);
      globalScope.getTypeOfThis().toObjectType().removeProperty(typeName);
      if (typeRegistry.getType(globalScope, typeName) != null) {
        typeRegistry.removeType(globalScope, typeName);
      }
    }

    // Now re-traverse the given script.
    NormalScopeBuilder scopeBuilder = new NormalScopeBuilder(globalScope, null);
    NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);
  }",This is a helper method that is called when a global typed scope is being generated. It is called when a global typed scope is being generated.
"@Requires(""label != null"")
  protected static boolean labelIsResolved(Label label) {
    try {
      label.getOffset();
    } catch (IllegalStateException e) {
      return false;
    }
    return true;
  }",Check if the label is resolved.
"public SSLEngine buildServerSSLEngine(SSLContext sslContext) {
        SSLEngine engine = sslContext.createSSLEngine();
        engine.setUseClientMode(false);
        if (needClientAuth) {
            engine.setNeedClientAuth(true);
        } else if (wantClientAuth) {
            engine.setWantClientAuth(true);
        }
        return addCommonConfigs(engine);
    }",Build the server SSL engine.
"public Resource addPath(String path)
        throws IOException,MalformedURLException
    {
        if (path==null)
            return null;

        path = URI.canonicalPath(path);

        return newResource(URI.addPaths(_url.toExternalForm(),path));
    }",Add a path to the resource.
"@RequestMapping(value = ""builds/{buildId}/links"", method = RequestMethod.GET)
    public Form getBuildLinkForm(@PathVariable ID buildId) {
        // Gets the form values
        List<BuildLinkFormItem> items = structureService.getBuildLinksFrom(structureService.getBuild(buildId))
                .stream()
                .map(build -> new BuildLinkFormItem(build.getProject().getName(), build.getName()))
                .collect(Collectors.toList());
        // Creates the form
        return Form.create()
                .with(
                        MultiForm.of(
                                ""links"",
                                Form.create()
                                        .with(Text.of(""project"").label(""Project name""))
                                        .with(Text.of(""build"").label(""Build name""))
                        )
                                .label(""Links"")
                                .value(items)
                );
    }",Gets the form for the links of a build
"@Override
    public void dispatchEvent(IEvent e) {
        if (e instanceof ISharedObjectMessage || e.getType() == IEvent.Type.SHARED_OBJECT) {
            ISharedObjectMessage msg = (ISharedObjectMessage) e;
            if (msg.hasSource()) {
                beginUpdate(msg.getSource());
            } else {
                beginUpdate();
            }
            try {
                for (ISharedObjectEvent event : msg.getEvents()) {
                    final String key = event.getKey();
                    switch (event.getType()) {
                        case SERVER_CONNECT:
                            if (!isConnectionAllowed()) {
                                so.returnError(SO_NO_READ_ACCESS);
                            } else if (msg.hasSource()) {
                                IEventListener source = msg.getSource();
                                if (source instanceof BaseConnection) {
                                    ((BaseConnection) source).registerBasicScope(this);
                                } else {
                                    addEventListener(source);
                                }
                            }
                            break;
                        case SERVER_DISCONNECT:
                            if (msg.hasSource()) {
                                IEventListener source = msg.getSource();
                                if (source instanceof BaseConnection) {
                                    ((BaseConnection) source).unregisterBasicScope(this);
                                } else {
                                    removeEventListener(source);
                                }
                            }
                            break;
                        case SERVER_SET_ATTRIBUTE:
                            final Object value = event.getValue();
                            if (!isWriteAllowed(key, value)) {
                                so.returnAttributeValue(key);
                                so.returnError(SO_NO_WRITE_ACCESS);
                            } else {
                                setAttribute(key, value);
                            }
                            break;
                        case SERVER_DELETE_ATTRIBUTE:
                            if (!isDeleteAllowed(key)) {
                                so.returnAttributeValue(key);
                                so.returnError(SO_NO_WRITE_ACCESS);
                            } else {
                                removeAttribute(key);
                            }
                            break;
                        case SERVER_SEND_MESSAGE:
                            final List<?> arguments = (List<?>) event.getValue();
                            // Ignore request silently if not allowed
                            if (isSendAllowed(key, arguments)) {
                                sendMessage(key, arguments);
                            } else {
                                log.debug(""Send is not allowed for {}"", key);
                            }
                            break;
                        default:
                            log.warn(""Unknown SO event: {}"", event.getType());
                    }
                }
            } catch (Exception ex) {
                log.warn(""Exception on dispatchEvent"", ex);
            } finally {
                endUpdate();
            }
        } else {
            // don't know how to handle this event.
            super.dispatchEvent(e);
        }
    }",Override the dispatchEvent method to handle events from the IEvent interface.
"private void readToTmp(int length, boolean expectEnd) throws IOException {
    tmpBuffer.clear();
    tmpBuffer.limit(length);
    int read = read(tmpBuffer);
    if (read == -1 && expectEnd) {
      throw new NoSuchElementException();
    }
    if (read != length) {
      throw new CorruptDataException(""Premature end of file was expecting at least: ""
          + length + "" but found only: "" + read);
    }
    offset += read;
    tmpBuffer.flip();
  }",Read length bytes from the input stream to the temporary buffer.
"protected Set<CacheEntryTag> getTags(Element element) {
        final Object key = element.getObjectKey();
        if (key instanceof TaggedCacheEntry) {
            return ((TaggedCacheEntry) key).getTags();
        }

        final Object value = element.getObjectValue();
        if (value instanceof TaggedCacheEntry) {
            return ((TaggedCacheEntry) value).getTags();
        }

        return null;
    }",Get the tags from the element.
"@Deprecated
  public static final String formatProductSetName(
      String project, String location, String productSet) {
    return PRODUCT_SET_PATH_TEMPLATE.instantiate(
        ""project"", project,
        ""location"", location,
        ""product_set"", productSet);
  }",Formats a string containing the fully - qualified path to represent a necessity of a product_set resource.
"@Override
    public Iterable<T> findAll() {
        return inTransaction(new Callable<Iterable<T>>() {
            @Override
            public Iterable<T> call() throws Exception {
                CriteriaQuery<T> cq = entityManager.getCriteriaBuilder().createQuery(entity);
                Root<T> pet = cq.from(entity);
                cq.select(pet);
                return entityManager.createQuery(cq).getResultList();
            }
        });
    }",Find all the records in the database.
"private static String privateBase64Decoder(String decode, int flags) {
		if (flags == -1) {
			flags = Base64.DEFAULT;
		}

		byte[] data1 = Base64.decode(decode, flags);
		String decodedBase64 = null;
		try {
			decodedBase64 = new String(data1, ""UTF-8"");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		return decodedBase64;
	}",Private base64 decoder.
"public void sendNotification(final Notification notification) {

    ContextAwareTimer.Context timer = this.notificationTimer.time();
    if(!this.notificationTargets.isEmpty()) {
        for (final Map.Entry<UUID, Function<Notification, Void>> entry : this.notificationTargets.entrySet()) {
          try {
            entry.getValue().apply(notification);
          } catch (RuntimeException exception) {
            LOG.warn(""RuntimeException when running notification target. Skipping."", exception);
          }
        }
    }

    if(getParent().isPresent()) {
      getParent().get().sendNotification(notification);
    }
    timer.stop();
  }",Send a notification to all the targets.
"@SuppressWarnings(""unchecked"")
    public static void setProperty(Object object, String name, String text) throws NoSuchFieldException {
        try {
            // need to get to the field for any typeinfo annotation, so here we go ...
            int length = name.lastIndexOf('.');
            if (length > 0) {
                object = getProperty(object, name.substring(0, length));
                name = name.substring(length + 1);
            }
            length = name.length();

            Matcher matcher = ARRAY_INDEX.matcher(name);
            for (Matcher m = matcher; m.matches(); m = ARRAY_INDEX.matcher(name)) {
                name = m.group(1);
            }
            Field field = Beans.getKnownField(object.getClass(), name);

            if (name.length() != length) {
                int index = Integer.parseInt(matcher.group(2));
                object = getProperty(object, matcher.group(1));
                if (object.getClass().isArray()) {
                    Array.set(object, index, new ValueOf(object.getClass().getComponentType(), field.getAnnotation(typeinfo.class)).invoke(text));
                } else {
                    ((List)object).set(index, new ValueOf(field.getAnnotation(typeinfo.class).value()[0]).invoke(text));
                }
            } else {
                field.set(object, new ValueOf(field.getType(), field.getAnnotation(typeinfo.class)).invoke(text));
            }
        } catch (NoSuchFieldException x) {
            throw x;
        } catch (Exception x) {
            throw new IllegalArgumentException(x.getMessage() + "": "" + name, x);
        }
    }",Sets the property of the given object to the given text.
"public void read(final Connection conn, final Readline readline) {
        // Just call readline and get a callback when line is openBlocking
        Prompt prompt = new Prompt(new TerminalString(""[aesh@rules]$ "",
                        new TerminalColor(Color.GREEN, Color.DEFAULT, Color.Intensity.BRIGHT)));

        //suspend reader asap since we're creating commands in a new thread
        //this is not needed when running single threaded, eg as examples.Example
       readline.readline(conn, prompt, line -> {
            //we got eof or quit
            if (line == null) {
                conn.close();
                return;
            }

            //LOGGER.info(""got: "" + line);

            Matcher matcher = splitter.matcher(line);
            if (matcher.find()) {
                String cmd = matcher.group();

                /*
                if(cmd.equals(""exit"")) {
                    conn.write(""exiting...\n"").close();
                    return;
                }
                */

                // Gather args
                List<String> args = new ArrayList<>();
                while (matcher.find()) {
                    args.add(matcher.group());
                }

                try {
                    new Task(conn, readline, Command.valueOf(cmd), args).start();
                    return;
                } catch (IllegalArgumentException e) {
                    conn.write(line + "": command not found\n"");
                }
            }
            read(conn, readline);
        }, getCompletions());
    }",Read a block of content from a single thread.
"public void populateArtifactDetails(final SoftwareModule softwareModule) {
        if (softwareModule == null) {
            populateArtifactDetails(null, null);
        } else {
            populateArtifactDetails(softwareModule.getId(),
                    HawkbitCommonUtil.getFormattedNameVersion(softwareModule.getName(), softwareModule.getVersion()));
        }
    }",Populate artifact details.
"private boolean isTypedTimeFullyLegal() {
        if (mIs24HourMode) {
            // For 24-hour mode, the time is legal if the hours and minutes are each legal. Note:
            // getEnteredTime() will ONLY call isTypedTimeFullyLegal() when NOT in 24hour mode.
            Boolean[] enteredZeros = {false, false, false};
            int[] values = getEnteredTime(enteredZeros);
            return (values[0] >= 0 && values[1] >= 0 && values[1] < 60 && values[2] >= 0 && values[2] < 60);
        } else {
            // For AM/PM mode, the time is legal if it contains an AM or PM, as those can only be
            // legally added at specific times based on the tree's algorithm.
            return (mTypedTimes.contains(getAmOrPmKeyCode(AM)) ||
                    mTypedTimes.contains(getAmOrPmKeyCode(PM)));
        }
    }",Checks if the typed time is fully legal.
"void writeEntry(int position, int offset, int value) throws ArrayIndexOutOfBoundsException
  {
    /*
    try
    {
      fastArray[( position*slotsize)+offset] = value;
    }
    catch(ArrayIndexOutOfBoundsException aioobe)
    */
    {
      if (offset >= slotsize)
        throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT, null)); //""Offset bigger than slot"");
      position*=slotsize;
      int chunkpos = position >> lowbits;
      int slotpos = position & lowmask;
      int[] chunk = chunks.elementAt(chunkpos);
      chunk[slotpos + offset] = value; // ATOMIC!
    }
  }",Write an entry to the array.
"public static void divide( DMatrix2x2 a , double alpha ) {
        a.a11 /= alpha; a.a12 /= alpha;
        a.a21 /= alpha; a.a22 /= alpha;
    }",Divide the elements of the matrix by the given alpha value.
"@Override
	public void dispose() {
		super.dispose();
		if (fields != null) {
			Iterator<FieldEditor> e = fields.iterator();
			while (e.hasNext()) {
				FieldEditor pe = e.next();
				pe.setPage(null);
				pe.setPropertyChangeListener(null);
				pe.setPreferenceStore(null);
			}
		}
	}",Dispose of the object.
"public void setDoctype(String doctypeSystem, String doctypePublic)
    {
        setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, doctypeSystem);
        setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, doctypePublic);
    }",Sets the doctype system and public attributes of the XML document.
"public void writeChar(int pChar) throws IOException {
        out.write(pChar & 0xFF);
        out.write((pChar >>> 8) & 0xFF);
        bytesWritten += 2;
    }","Write a single octet of a
   ."
"private KeyStoreFactoryBean keyStoreFromSystemProperties(String property) {
    if (System.getProperty(property) == null) return null;
    KeyStoreFactoryBean keyStore = new KeyStoreFactoryBean();
    keyStore.setLocation(locationFromSystemProperty(property));
    keyStore.setProvider(System.getProperty(property + ""Provider""));
    keyStore.setPassword(System.getProperty(property + ""Password""));
    keyStore.setType(System.getProperty(property + ""Type""));
    return keyStore;
  }",This method is used to get a KeyStoreFactoryBean from system properties.
"protected static int getBytesPerPixel(Bitmap.Config config) {
        if (config == Bitmap.Config.ARGB_8888) {
            return 4;
        } else if (config == Bitmap.Config.RGB_565) {
            return 2;
        } else if (config == Bitmap.Config.ARGB_4444) {
            return 2;
        } else if (config == Bitmap.Config.ALPHA_8) {
            return 1;
        }
        return 1;
    }",Get the bytes per pixel for a bitmap.
"@SuppressWarnings(
	{ ""unchecked"", ""rawtypes"" })
	public static void makeCopies(Collection<Copier> aFrom, Collection<Copier> aTo)
	{
		if (aFrom == null || aTo == null)
			return;

		List<Copier> fromList = new ArrayList<Copier>(aFrom);
		List<Copier> toList = new ArrayList<Copier>(aTo);
		Collections.sort((List) fromList);
		Collections.sort((List) toList);

		Copier from = null;
		Copier to = null;
		Iterator<Copier> toIter = toList.iterator();
		for (Iterator<Copier> i = fromList.iterator(); i.hasNext() && toIter.hasNext();)
		{
			from = (Copier) i.next();
			to = (Copier) toIter.next();

			// copy data
			to.copy(from);
		}
	}",Creates a copy of the given collections.
"@Override
    public void addPixels(int[] pixels, int offset, int count) {
        for (int i = 0; i < count; i++) {
            insertColor(pixels[i + offset]);
            if (colors > reduceColors)
                reduceTree(reduceColors);
        }
    }",Add pixels to the image.
"public static <C extends Comparable> boolean isLessThan(final Range<C> range, final C value) {
        checkNotNull(range);
        checkNotNull(value);

        if (!range.hasUpperBound()) {
            return false;
        }
        if (range.upperBoundType() == BoundType.OPEN && range.upperEndpoint().equals(value)) {
            return true;
        }
        return range.upperEndpoint().compareTo(value) < 0;
    }",Check if the range is less than the given value.
"List<MwDumpFile> mergeDumpLists(List<MwDumpFile> localDumps,
			List<MwDumpFile> onlineDumps) {
		List<MwDumpFile> result = new ArrayList<>(localDumps);

		HashSet<String> localDateStamps = new HashSet<>();
		for (MwDumpFile dumpFile : localDumps) {
			localDateStamps.add(dumpFile.getDateStamp());
		}
		for (MwDumpFile dumpFile : onlineDumps) {
			if (!localDateStamps.contains(dumpFile.getDateStamp())) {
				result.add(dumpFile);
			}
		}
		result.sort(Collections.reverseOrder(new MwDumpFile.DateComparator()));
		return result;
	}",Merge a list of local and online dump lists into one.
"public static String getJenkinsVersion(final HttpResponse response) {
        final Header[] hdrs = response.getHeaders(""X-Jenkins"");
        return hdrs.length == 0 ? """" : hdrs[0].getValue();
    }",Gets the Jenkins version from the response.
"public void acquireLock(Object key, boolean exclusive) {
      ReentrantReadWriteLock lock = getLock(key);
      if (exclusive) {
         lock.writeLock().lock();
         if (trace) log.tracef(""WL acquired for '%s'"", key);
      } else {
         lock.readLock().lock();
         if (trace) log.tracef(""RL acquired for '%s'"", key);
      }
   }",Acquires a lock on the specified key.
"public String sign(String signatureBaseString) {
    if (privateKey == null) {
      throw new UnsupportedOperationException(""Cannot sign the base string: no private key supplied."");
    }

    try {
      Signature signer = Signature.getInstance(""SHA1withRSA"");
      signer.initSign(privateKey);
      signer.update(signatureBaseString.getBytes(""UTF-8""));
      byte[] signatureBytes = signer.sign();
      signatureBytes = Base64.encodeBase64(signatureBytes);
      return new String(signatureBytes, ""UTF-8"");
    }
    catch (NoSuchAlgorithmException e) {
      throw new IllegalStateException(e);
    }
    catch (InvalidKeyException e) {
      throw new IllegalStateException(e);
    }
    catch (SignatureException e) {
      throw new IllegalStateException(e);
    }
    catch (UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
  }",Sign the given base string using the private key.
"public Swarm stop() throws Exception {

        if (this.server == null) {
            throw SwarmMessages.MESSAGES.containerNotStarted(""stop()"");
        }

        this.server.stop();
        this.server = null;

        Module module = Module.getBootModuleLoader().loadModule(CONTAINER_MODULE_NAME);
        Class<?> shutdownClass = module.getClassLoader().loadClass(""org.wildfly.swarm.container.runtime.WeldShutdownImpl"");

        WeldShutdown shutdown = (WeldShutdown) shutdownClass.newInstance();
        shutdown.shutdown();

        return this;
    }",Stop the container.
"public static TaskManagerServicesConfiguration fromConfiguration(
			Configuration configuration,
			long maxJvmHeapMemory,
			InetAddress remoteAddress,
			boolean localCommunication) {
		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration);
		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration);
		if (localStateRootDir.length == 0) {
			// default to temp dirs.
			localStateRootDir = tmpDirs;
		}

		boolean localRecoveryMode = configuration.getBoolean(CheckpointingOptions.LOCAL_RECOVERY);

		final NetworkEnvironmentConfiguration networkConfig = NetworkEnvironmentConfiguration.fromConfiguration(
			configuration,
			maxJvmHeapMemory,
			localCommunication,
			remoteAddress);

		final QueryableStateConfiguration queryableStateConfig = QueryableStateConfiguration.fromConfiguration(configuration);

		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE);

		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis();

		final RetryingRegistrationConfiguration retryingRegistrationConfiguration = RetryingRegistrationConfiguration.fromConfiguration(configuration);

		return new TaskManagerServicesConfiguration(
			remoteAddress,
			tmpDirs,
			localStateRootDir,
			localRecoveryMode,
			networkConfig,
			queryableStateConfig,
			ConfigurationParserUtils.getSlot(configuration),
			ConfigurationParserUtils.getManagedMemorySize(configuration),
			ConfigurationParserUtils.getMemoryType(configuration),
			preAllocateMemory,
			ConfigurationParserUtils.getManagedMemoryFraction(configuration),
			timerServiceShutdownTimeout,
			retryingRegistrationConfiguration,
			ConfigurationUtils.getSystemResourceMetricsProbingInterval(configuration));
	}",Creates a new TaskManagerServicesConfiguration from the given configuration.
"public static Furnace getInstance()
   {
      try
      {
         final BootstrapClassLoader loader = new BootstrapClassLoader(""bootpath"");
         return getInstance(FurnaceFactory.class.getClassLoader(), loader);
      }
      catch (Exception e)
      {
         throw new RuntimeException(e);
      }
   }",Get a Furnace instance.
"@Override
	public boolean includeUrl(String urlKey, String originalUrl) {
//		return include(urlKey, originalUrl, true);
		if (UrlOperations.urlToScheme(originalUrl) == null) {
			originalUrl = UrlOperations.HTTP_SCHEME + originalUrl;
		}

		CaptureSearchResult resultTester = new FastCaptureSearchResult();
		resultTester.setUrlKey(urlKey);
		resultTester.setOriginalUrl(originalUrl);
		// null captureTimestamp signifies per-URL access-check.
		resultTester.setCaptureTimestamp(null);

		return include(resultTester, true);
	}",Include the URL with the given key and original URL.
"private static void trimPadding(List<Element> elements)
    {
        for (ListIterator<Element> it = elements.listIterator(elements.size()); it.hasPrevious();) {
            Element element = it.previous();

            if (element.compareTo(null) == 0) {
                it.remove();
            } else {
                break;
            }
        }
    }",trim padding from the elements list
"@Override
    public void accept( Visitor v ) {
        v.visitTypedInstruction(this);
        v.visitStackProducer(this);
        v.visitStackConsumer(this);
        v.visitConversionInstruction(this);
    }",Visit this node the type of the XSD header.
"public static <T, CA extends Collection<T>, CR extends Collection<T>> Pair<CA, CR> partition(Iterable<T> values, Predicate<T> partitioner, Supplier<CA> acceptedCollectionProvider, Supplier<CR> refusedCollectionProvider) {
        dbc.precondition(values != null, ""cannot partition a null iterable"");
        return new PartitionBy<>(partitioner, acceptedCollectionProvider, refusedCollectionProvider).apply(values.iterator());
    }",Partition a collection of objects using the specified predicate.
"@Override
  public void addTag(String tagName, double value)
  {
    addTag(tagName, String.valueOf(value));
  }",Override the addTag method in the AbstractHessian object.
"private void onConnect(Connection con, String[] sqlCommands) throws SQLException {
        final boolean trace = TraceComponent.isAnyTracingEnabled();

        TransactionManager tm = connectorSvc.getTransactionManager();
        Transaction suspendedTx = null;
        String currentSQL = null;
        Throwable failure = null;
        try {
            UOWCoordinator coord = tm == null ? null : ((UOWCurrent) tm).getUOWCoord();
            if (coord != null && coord.isGlobal())
                suspendedTx = tm.suspend();

            Statement stmt = con.createStatement();
            for (String sql : sqlCommands) {
                currentSQL = sql;
                if (trace && tc.isDebugEnabled())
                    Tr.debug(this, tc, ""execute onConnect SQL"", sql);
                stmt.execute(sql);
            }
            stmt.close();
        } catch (Throwable x) {
            failure = x;
        }
        if (suspendedTx != null) {
            try {
                tm.resume(suspendedTx);
            } catch (Throwable x) {
                failure = x;
            }
        }

        if (failure != null) {
            if (trace && tc.isDebugEnabled())
                Tr.debug(this, tc, ""failed"", AdapterUtil.stackTraceToString(failure));
            throw new SQLNonTransientConnectionException(
                AdapterUtil.getNLSMessage(""DSRA4004.onconnect.sql"", currentSQL, dsConfig.get().id), ""08000"", 0, failure);
        }
    }",On connect.
"public static boolean isEqualSeq(final String first, final String second, final String delimiter) {
    if (isNotEmpty(first) && isNotEmpty(second)) {
      String[] firstWords = split(first, delimiter);
      Set<String> firstSet = CollectUtils.newHashSet();
      for (int i = 0; i < firstWords.length; i++) {
        firstSet.add(firstWords[i]);
      }
      String[] secondWords = split(second, delimiter);
      Set<String> secondSet = CollectUtils.newHashSet();
      for (int i = 0; i < secondWords.length; i++) {
        secondSet.add(secondWords[i]);
      }
      return firstSet.equals(secondSet);
    } else {
      return isEmpty(first) & isEmpty(second);
    }
  }",Compare two sequence of words.
"public boolean verify(String base64Signature, String content, String timestamp) throws Exception {
        return verify(base64Signature, content, timestamp, keyName);
    }",Verify a base64 signature.
"public Attribute getEntityAttribute(Class clazz, String fieldName)
    {
        if (entityTypes != null && entityTypes.containsKey(clazz))
        {
            EntityType entityType = entityTypes.get(clazz);
            return entityType.getAttribute(fieldName);
        }
        throw new IllegalArgumentException(""No entity found: "" + clazz);
    }",Gets the entity attribute for the specified class and field name.
"protected static void validateBool(String opName, SDVariable v) {
        if (v == null)
            return;
        if (v.dataType() != DataType.BOOL)
            throw new IllegalStateException(""Cannot apply operation \"""" + opName + ""\"" to variable \"""" + v.getVarName() + ""\"" with non-boolean point data type "" + v.dataType());
    }",Validate boolean operation
"public void setRoundaboutAngle(@FloatRange(from = 60f, to = 300f) float roundaboutAngle) {
    if (ROUNDABOUT_MANEUVER_TYPES.contains(maneuverType) && this.roundaboutAngle != roundaboutAngle) {
      updateRoundaboutAngle(roundaboutAngle);
      invalidate();
    }
  }",Set the roundaboutAngle value.
"@Subscribe
  public void onZones(ZoneList.SuccessEvent event) {
    String durationEvent = getString(R.string.list_duration, event.duration);
    Toast.makeText(this, durationEvent, LENGTH_SHORT).show();
  }",Show toast when zones are successfully added.
"static AjaxOperation registerContainer(final String triggerId, final String containerId,
			final List<String> containerContentIds) {
		AjaxOperation operation = new AjaxOperation(triggerId, containerContentIds);
		operation.setTargetContainerId(containerId);
		operation.setAction(AjaxOperation.AjaxAction.REPLACE_CONTENT);
		registerAjaxOperation(operation);
		return operation;
	}",Register container.
"@SuppressWarnings(""fallthrough"")
    protected DCReference reference(boolean allowMember) throws ParseException {
        int pos = bp;
        int depth = 0;

        // scan to find the end of the signature, by looking for the first
        // whitespace not enclosed in () or <>, or the end of the tag
        loop:
        while (bp < buflen) {
            switch (ch) {
                case '\n': case '\r': case '\f':
                    newline = true;
                    // fallthrough

                case ' ': case '\t':
                    if (depth == 0)
                        break loop;
                    break;

                case '(':
                case '<':
                    newline = false;
                    depth++;
                    break;

                case ')':
                case '>':
                    newline = false;
                    --depth;
                    break;

                case '}':
                    if (bp == pos)
                        return null;
                    newline = false;
                    break loop;

                case '@':
                    if (newline)
                        break loop;
                    // fallthrough

                default:
                    newline = false;

            }
            nextChar();
        }

        if (depth != 0)
            throw new ParseException(""dc.unterminated.signature"");

        String sig = newString(pos, bp);

        // Break sig apart into qualifiedExpr member paramTypes.
        JCTree qualExpr;
        Name member;
        List<JCTree> paramTypes;

        Log.DeferredDiagnosticHandler deferredDiagnosticHandler
                = new Log.DeferredDiagnosticHandler(fac.log);

        try {
            int hash = sig.indexOf(""#"");
            int lparen = sig.indexOf(""("", hash + 1);
            if (hash == -1) {
                if (lparen == -1) {
                    qualExpr = parseType(sig);
                    member = null;
                } else {
                    qualExpr = null;
                    member = parseMember(sig.substring(0, lparen));
                }
            } else {
                qualExpr = (hash == 0) ? null : parseType(sig.substring(0, hash));
                if (lparen == -1)
                    member = parseMember(sig.substring(hash + 1));
                else
                    member = parseMember(sig.substring(hash + 1, lparen));
            }

            if (lparen < 0) {
                paramTypes = null;
            } else {
                int rparen = sig.indexOf("")"", lparen);
                if (rparen != sig.length() - 1)
                    throw new ParseException(""dc.ref.bad.parens"");
                paramTypes = parseParams(sig.substring(lparen + 1, rparen));
            }

            if (!deferredDiagnosticHandler.getDiagnostics().isEmpty())
                throw new ParseException(""dc.ref.syntax.error"");

        } finally {
            fac.log.popDiagnosticHandler(deferredDiagnosticHandler);
        }

        return m.at(pos).newReferenceTree(sig, qualExpr, member, paramTypes).setEndPos(bp);
    }",reference method.
"@Override
	public Properties getProperties(final String key) {
		String[] keyValuePairs = getStringArray(key);

		Properties props = new Properties();

		for (String pair : keyValuePairs) {
			int index = pair.indexOf('=');

			if (index < 1) {
				throw new IllegalArgumentException(""Malformed property: "" + pair);
			}

			props.put(pair.substring(0, index), pair.substring(index + 1, pair.length()));
		}

		return props;
	}",Get the properties for the specified key.
"public XObject operate(XObject right) throws javax.xml.transform.TransformerException
  {

    if (XObject.CLASS_BOOLEAN == right.getType())
      return right;
    else
      return right.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;
  }",This method is used to operate on a single node.
"public String getRelativePathToBenchmarkReportDirectory(File file) {
        String benchmarkReportDirectoryPath = plannerBenchmarkResult.getBenchmarkReportDirectory().getAbsoluteFile().toURI().getPath();
        String filePath = file.getAbsoluteFile().toURI().getPath();
        if (!filePath.startsWith(benchmarkReportDirectoryPath)) {
            throw new IllegalArgumentException(""The filePath ("" + filePath
                    + "") does not start with the benchmarkReportDirectoryPath ("" + benchmarkReportDirectoryPath + "")."");
        }
        String relativePath = filePath.substring(benchmarkReportDirectoryPath.length());
        if (relativePath.startsWith(""/"")) {
            relativePath = relativePath.substring(1);
        }
        return relativePath;
    }",Get the relative path to the benchmark report directory.
"public void destroy() {
        try {
            ctx.close();
        }
        catch (javax.naming.NamingException e) {
            LOG.warn(""Error when closing"", e);
        }
    }",Destroy the base class.
"public static IccProfileCreator getIccProfile(int identifier) {
    IccProfileCreator icc = null;
    try {
      if (instance == null)
        getIccProfileCreators();
      if (creatorsMap.containsKey(identifier))
        icc = creatorsMap.get(identifier);
    } catch (ReadIccConfigIOException e) {

    }
    return icc;
  }",Get the IccProfileCreator for a given identifier.
"private Set<org.eclipse.aether.graph.DependencyNode> levelTraverseVerboseTreeList(
        Set<org.eclipse.aether.graph.DependencyNode>  nodeList, 
        List <org.eclipse.aether.graph.DependencyNode> aggDepNodeList,
        org.eclipse.aether.graph.DependencyNode rootNode) throws MojoExecutionException
  {
    // First remove duplicates in nodeList
    aggDepNodeList.removeAll(nodeList);

    aggDepNodeList.addAll(nodeList);
    
    Set<org.eclipse.aether.graph.DependencyNode> NodeChildList = 
        new LinkedHashSet<org.eclipse.aether.graph.DependencyNode>();
    
    for (org.eclipse.aether.graph.DependencyNode node : nodeList) {
      if (nodeArtifactsMatch(rootNode, node)){
        throw new MojoExecutionException(""Circular dependency detected in project: "" + getMavenProject().toString());
      }
      if ( (node != null) && (node.getChildren() != null) ) {
        NodeChildList.addAll(node.getChildren());
      }
    }

    return NodeChildList;
  }",Level Traverse verbose tree list.
"public static ResourceSnippet createResourceSnippet(InputStream is, int startChar, int endChar, String charset) {

	return createResourceSnippet(getContents(is, charset), startChar, endChar);
    }",Create a ResourceSnippet from an input stream.
"static String unescape(final String text, final XmlEscapeSymbols symbols) {

        if (text == null) {
            return null;
        }

        StringBuilder strBuilder = null;

        final int offset = 0;
        final int max = text.length();

        int readOffset = offset;
        int referenceOffset = offset;

        for (int i = offset; i < max; i++) {

            final char c = text.charAt(i);

            /*
             * Check the need for an unescape operation at this point
             */

            if (c != REFERENCE_PREFIX || (i + 1) >= max) {
                continue;
            }

            int codepoint = 0;

            if (c == REFERENCE_PREFIX) {

                final char c1 = text.charAt(i + 1);

                if (c1 == '\u0020' || // SPACE
                        c1 == '\n' ||     // LF
                        c1 == '\u0009' || // TAB
                        c1 == '\u000C' || // FF
                        c1 == '\u003C' || // LES-THAN SIGN
                        c1 == '\u0026') { // AMPERSAND
                    // Not a character references. No characters are consumed, and nothing is returned.
                    continue;

                } else if (c1 == REFERENCE_NUMERIC_PREFIX2) {

                    if (i + 2 >= max) {
                        // No reference possible
                        continue;
                    }

                    final char c2 = text.charAt(i + 2);

                    if (c2 == REFERENCE_HEXA_PREFIX3 && (i + 3) < max) {
                        // This is a hexadecimal reference

                        int f = i + 3;
                        while (f < max) {
                            final char cf = text.charAt(f);
                            if (!((cf >= '0' && cf <= '9') || (cf >= 'A' && cf <= 'F') || (cf >= 'a' && cf <= 'f'))) {
                                break;
                            }
                            f++;
                        }

                        if ((f - (i + 3)) <= 0) {
                            // We weren't able to consume any hexa chars
                            continue;
                        }

                        if ((f >= max) || text.charAt(f) != REFERENCE_SUFFIX) {
                            continue;
                        }

                        f++; // Count the REFERENCE_SUFFIX (semi-colon)

                        codepoint = parseIntFromReference(text, i + 3, f - 1, 16);
                        referenceOffset = f - 1;

                        // Don't continue here, just let the unescape code below do its job

                    } else if (c2 >= '0' && c2 <= '9') {
                        // This is a decimal reference

                        int f = i + 2;
                        while (f < max) {
                            final char cf = text.charAt(f);
                            if (!(cf >= '0' && cf <= '9')) {
                                break;
                            }
                            f++;
                        }

                        if ((f - (i + 2)) <= 0) {
                            // We weren't able to consume any decimal chars
                            continue;
                        }

                        if ((f >= max) || text.charAt(f) != REFERENCE_SUFFIX) {
                            continue;
                        }

                        f++; // Count the REFERENCE_SUFFIX (semi-colon)

                        codepoint = parseIntFromReference(text, i + 2, f - 1, 10);
                        referenceOffset = f - 1;

                        // Don't continue here, just let the unescape code below do its job

                    } else {
                        // This is not a valid reference, just discard
                        continue;
                    }


                } else {

                    // This is a named reference, must be comprised only of ALPHABETIC chars

                    int f = i + 1;
                    while (f < max) {
                        final char cf = text.charAt(f);
                        if (!((cf >= 'a' && cf <= 'z') || (cf >= 'A' && cf <= 'Z') || (cf >= '0' && cf <= '9'))) {
                            break;
                        }
                        f++;
                    }

                    if ((f - (i + 1)) <= 0) {
                        // We weren't able to consume any alphanumeric
                        continue;
                    }

                    if ((f < max) && text.charAt(f) == REFERENCE_SUFFIX) {
                        f++;
                    }

                    final int ncrPosition = XmlEscapeSymbols.binarySearch(symbols.SORTED_CERS, text, i, f);
                    if (ncrPosition >= 0) {
                        codepoint = symbols.SORTED_CODEPOINTS_BY_CER[ncrPosition];
                    } else {
                        // Not found! Just ignore our efforts to find a match.
                        continue;
                    }

                    referenceOffset = f - 1;

                }

            }


            /*
             * At this point we know for sure we will need some kind of unescape, so we
             * can increase the offset and initialize the string builder if needed, along with
             * copying to it all the contents pending up to this point.
             */

            if (strBuilder == null) {
                strBuilder = new StringBuilder(max + 5);
            }

            if (i - readOffset > 0) {
                strBuilder.append(text, readOffset, i);
            }

            i = referenceOffset;
            readOffset = i + 1;

            /*
             * --------------------------
             *
             * Perform the real unescape
             *
             * --------------------------
             */

            if (codepoint > '\uFFFF') {
                strBuilder.append(Character.toChars(codepoint));
            } else {
                strBuilder.append((char)codepoint);
            }

        }


        /*
         * -----------------------------------------------------------------------------------------------
         * Final cleaning: return the original String object if no unescape was actually needed. Otherwise
         *                 append the remaining escaped text to the string builder and return.
         * -----------------------------------------------------------------------------------------------
         */

        if (strBuilder == null) {
            return text;
        }

        if (max - readOffset > 0) {
            strBuilder.append(text, readOffset, max);
        }

        return strBuilder.toString();

    }",Unescape the text.
"public static String encode(byte[] bytes) {
	String retorno = """";
	if (bytes == null || bytes.length == 0) {
	    return retorno;
	}
	for (int i = 0; i < bytes.length; i++) {
	    byte valor = bytes[i];
	    int d1 = valor & 0xF;
	    d1 += (d1 < 10) ? 48 : 55;
	    int d2 = (valor & 0xF0) >> 4;
	    d2 += (d2 < 10) ? 48 : 55;
	    retorno = retorno + (char) d2 + (char) d1;
	}
	return retorno;
    }",Encode a byte array to a String
"PorterDuffColorFilter updateTintFilter(PorterDuffColorFilter tintFilter, ColorStateList tint,
                                           PorterDuff.Mode tintMode) {
        if (tint == null || tintMode == null) {
            return null;
        }

        final int color = tint.getColorForState(getState(), Color.TRANSPARENT);
        if (tintFilter == null) {
            return new PorterDuffColorFilter(color, tintMode);
        }

        //tintFilter.setColor(color);
        //tintFilter.setMode(tintMode);
        try {
            //noinspection unchecked
            Class<PorterDuffColorFilter> tClass = (Class<PorterDuffColorFilter>) tintFilter.getClass();
            Method method = tClass.getMethod(""setColor"", Integer.class);
            method.invoke(tintFilter, color);

            method = tClass.getMethod(""setMode"", PorterDuff.Mode.class);
            method.invoke(tintFilter, tintMode);
            return tintFilter;
        } catch (Exception e) {
            return new PorterDuffColorFilter(color, tintMode);
        }
    }",Update the tint filter.
"public static ParameterizedN1qlQuery parameterized(Statement statement, JsonArray positionalParams) {
        return new ParameterizedN1qlQuery(statement, positionalParams, null);
    }",Create a new parameterized N1QL query.
"public synchronized SlabAllocation attachAndAllocate(SlabRef slab, PeekingIterator<Integer> eventSizes) {
        attach(slab);
        return allocate(eventSizes);
    }",Attaches a slab and allocates a new slab.
"public void addPages(DialogPage[] pages) {
		for (int i = 0; i < pages.length; i++) {
			addPage(pages[i]);
		}
	}",Add the specified pages to the dialog.
"public static HSQLInterface loadHsqldb(ParameterStateManager psMgr) {
        // Specifically set the timezone to UTC to avoid the default usage local timezone in HSQL.
        // This ensures that all VoltDB data paths use the same timezone for representing time.
        TimeZone.setDefault(TimeZone.getTimeZone(""GMT+0""));

        String name = ""hsqldbinstance-"" + String.valueOf(instanceId) + ""-"" + String.valueOf(System.currentTimeMillis());
        instanceId++;

        HsqlProperties props = new HsqlProperties();
        try {
            Session sessionProxy = DatabaseManager.newSession(DatabaseURL.S_MEM, name, ""SA"", """", props, 0);
            // make HSQL case insensitive
            sessionProxy.executeDirectStatement(""SET IGNORECASE TRUE;"");
            sessionProxy.setParameterStateManager(psMgr);
            return new HSQLInterface(sessionProxy);
        }
        catch (HsqlException caught) {
            m_logger.warn(""Unexpected error initializing the SQL parser"",
                    caught);
            caught.printStackTrace();
            throw caught;
        }
    }",Load the HSQLDB interface.
"public void complete()
    {
        completeTree();

        StageManager.getStage(Stage.ANTI_ENTROPY).execute(this);

        if (logger.isDebugEnabled())
        {
            // log distribution of rows in tree
            logger.debug(""Validated {} partitions for {}.  Partitions per leaf are:"", validated, desc.sessionId);
            tree.histogramOfRowCountPerLeaf().log(logger);
            logger.debug(""Validated {} partitions for {}.  Partition sizes are:"", validated, desc.sessionId);
            tree.histogramOfRowSizePerLeaf().log(logger);
        }
    }",Complete the entire assessment tree.
"public int compare(T o1, T o2) {
	if(o1 == o2)   return 0;
	String str1 = (o1 == null) ? ""null"" : o1.toString(); 
	String str2 = (o2 == null) ? ""null"" : o2.toString();
	return str1.compareTo(str2);
    }",Compare two objects.
"public String build()
    {
        this.message_string  = ""{"";

            if( this.recipient_id != null ){
                this.message_string += ""\""recipient\"": {\""id\"": \"""" + this.recipient_id + ""\""},"";
            }

            if( (this.message_text != null) && !(this.message_text.equals("""")) && !(this.buttons.isEmpty()) ){
                this.message_string += ""\""message\"": {"";
                    this.message_string += ""\""attachment\"": {"";
                        this.message_string += ""\""type\"": \""template\"","";
                        this.message_string += ""\""payload\"": {"";
                            this.message_string += ""\""template_type\"": \""button\"","";
                            this.message_string += ""\""text\"": \"""" + this.message_text + ""\"","";
                            this.message_string += ""\""buttons\"":["";
                                for ( int j = 0 ; j < this.buttons.size(); j++ ) {
                                    HashMap<String, String> button = this.buttons.get(j);
                                    this.message_string += ""{"";
                                    if( !button.get(""type"").equals("""") ){
                                        this.message_string += ""\""type\"":\"""" + button.get(""type"") + ""\"","";
                                    }
                                    if( !button.get(""title"").equals("""") ){
                                        this.message_string += ""\""title\"":\"""" + button.get(""title"") + ""\"","";
                                    }
                                    if( !button.get(""url"").equals("""") ){
                                        this.message_string += ""\""url\"":\"""" + button.get(""url"") + ""\"","";
                                    }
                                    if( !button.get(""payload"").equals("""") ){
                                        this.message_string += ""\""payload\"":\"""" + button.get(""payload"") + ""\"","";
                                    }
                                    this.message_string = this.message_string.replaceAll("",$"", """");
                                    this.message_string += ""},"";
                                }
                                this.message_string = this.message_string.replaceAll("",$"", """");
                            this.message_string += ""]"";
                        this.message_string += ""}"";
                    this.message_string += ""}"";
                this.message_string += ""}"";
            }

            this.message_string = this.message_string.replaceAll("",$"", """");

        this.message_string += ""}"";

        return this.message_string;
    }",Build the XML string for a CRSCustom.
"@NotNull
    public DoubleStream filter(@NotNull final DoublePredicate predicate) {
        return new DoubleStream(params, new DoubleFilter(iterator, predicate));
    }",Returns a new stream consisting of the elements of this stream that match the given predicate.
"public A_CmsTab getTab(GalleryTabId tabId) {

        for (A_CmsTab tab : m_tabbedPanel) {
            if (tabId == GalleryTabId.valueOf(tab.getTabId())) {
                return tab;
            }
        }
        return null;
    }",Gets the tab with the given id.
"private boolean skipInterface(NetworkInterface ni) throws SocketException {
        boolean skipInterface = !ni.isUp() || ni.isVirtual() || ni.isLoopback();
        if (skipInterface && logger.isFineEnabled()) {
            logger.fine(""Skipping NetworkInterface '"" + ni.getName() + ""': isUp="" + ni.isUp() + "", isVirtual="" + ni.isVirtual()
                    + "", isLoopback="" + ni.isLoopback());
        }
        return skipInterface;
    }",Skip the interface if it is up virtual or loopback.
"public void addSchemaSource(Source s) {
        sources.add(s);
        validator.setSchemaSources(sources.toArray(new Source[0]));
    }",Add a schema source to the schema.
"public static ComposedValueConverter getInstance() {

    if (instance == null) {
      synchronized (DefaultComposedValueConverter.class) {
        if (instance == null) {
          DefaultComposedValueConverter impl = new DefaultComposedValueConverter();
          impl.initialize();
          instance = impl;
        }
      }
    }
    return instance;
  }",Get the singleton instance of the ComposedValueConverter class.
"public static boolean getOptionalBooleanParameter(Map<String, String> parameters,
                                                      String parameterName,
                                                      boolean defaultValue)
            throws JournalException {
        validateParameters(parameters);
        validateParameterName(parameterName);

        String string = parameters.get(parameterName);
        if (string == null) {
            return defaultValue;
        } else if (string.equals(VALUE_FALSE)) {
            return false;
        } else if (string.equals(VALUE_TRUE)) {
            return true;
        } else {
            throw new JournalException(""'"" + parameterName
                    + ""' parameter must be '"" + VALUE_FALSE + ""'(default) or '""
                    + VALUE_TRUE + ""'"");
        }

    }",Gets the optional boolean parameter.
"public void setContentHandler(ContentHandler handler)
  {

    if (handler == null)
    {
      throw new NullPointerException(XSLMessages.createMessage(XSLTErrorResources.ER_NULL_CONTENT_HANDLER, null)); //""Null content handler"");
    }
    else
    {
      m_outputContentHandler = handler;

      if (null == m_serializationHandler)
      {
        ToXMLSAXHandler h = new ToXMLSAXHandler();
        h.setContentHandler(handler);
        h.setTransformer(this);
        
        m_serializationHandler = h;
      }
      else
        m_serializationHandler.setContentHandler(handler);
    }
  }",Sets the content handler for this SAX document.
"@Override
  public void doUpdates(MetricsContext unused) {
    synchronized (this) {
      for (MetricsBase m : registry.getMetricsList()) {
        m.pushMetric(metricsRecord);
      }
    }
    metricsRecord.update();
  }",Updates the metrics record.
"private Object asList(Object value) {
        Class<?> componentClass = value.getClass().getComponentType();
        if (componentClass.isPrimitive()) {
            if (componentClass.equals(int.class)) {
                return asIntList(value);
            } else if (componentClass.equals(long.class)) {
                return asLongList(value);
            } else if (componentClass.equals(boolean.class)) {
                return asBooleanList(value);
            } else if (componentClass.equals(short.class)) {
                return asShortList(value);
            } else if (componentClass.equals(byte.class)) {
                return asByteList(value);
            } else {
                return asCharList(value);
            }
        } else {
            return asList(value, componentClass);
        }
    }",AsList method.
"private void loadInsn(final Type type, final int index) {
        mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD), index);
    }",Load instruction.
"public static CreateRequest create() throws IOException {
        String uri = uri(""coupon_sets"");
        return new CreateRequest(Method.POST, uri);
    }",Create a new CIDCTYPE.
"public void updated(Dictionary<String, ?> config) throws ConfigurationException {
        if (config != null) {
            Integer filterPriority = (Integer) config.get(FILTER_PRIORITY);
            String applicationName = (String) config.get(APPLICATION_NAME);
            setPriority(filterPriority);
            setApplicationName(applicationName);
        }
        synchronized (this) {
            filterFactoryServiceRegistration.setProperties(config);
        }
    }",Updates the configuration of the class.
"public final void setApplicationName(String applicationName) {
        synchronized (lock) {
            if (applicationName == null) {
                serviceProperties.remove(APPLICATION_NAME);
                bundleAnalysingComponentInstantiationListener = null;
            } else {
                serviceProperties.put(APPLICATION_NAME, applicationName);
                bundleAnalysingComponentInstantiationListener =
                    new BundleAnalysingComponentInstantiationListener(bundleContext, injectionSource, factoryTracker);
            }

            if (serviceRegistration != null) {
                serviceRegistration.setProperties(serviceProperties);
            }
        }
    }",Sets the application name.
"private static URI normalizePortNumbersInUri(final URI uri) throws URISyntaxException {
        int port = uri.getPort();
        final String scheme = uri.getScheme();

        if (SCHEME_HTTP.equals(scheme) && port == DEFAULT_HTTP_PORT) {
            port = -1;
        }
        if (SCHEME_HTTPS.equals(scheme) && port == DEFAULT_HTTPS_PORT) {
            port = -1;
        }
        
        final URI result = new URI(scheme, uri.getUserInfo(), uri.getHost(), port, uri.getPath(), uri.getQuery(), uri.getFragment());
        return result;
    }",Normalize port numbers in URI.
"@Deprecated
    protected String validateValue(String name, String value) {
        return validateAttributeValue(name, value);
    }",Validate a value for a resource attribute.
"public Integer delete(CMAAsset asset) {
    final String assetId = getResourceIdOrThrow(asset, ""asset"");
    final String spaceId = getSpaceIdOrThrow(asset, ""asset"");
    final String environmentId = asset.getEnvironmentId();

    return service.delete(spaceId, environmentId, assetId).blockingFirst().code();
  }",Delete an Asset.
"public static <T> T getTagValue(Tag<?> t, Class<? extends T> clazz) {
        Object o = toTagValue(t);
        if (o == null) {
            return null;
        }
        try {
            return clazz.cast(o);
        } catch (ClassCastException e) {
            return null;
        }
    }",Get the value of a tag.
"@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
			case XbasePackage.XIF_EXPRESSION__IF:
				setIf((XExpression)null);
				return;
			case XbasePackage.XIF_EXPRESSION__THEN:
				setThen((XExpression)null);
				return;
			case XbasePackage.XIF_EXPRESSION__ELSE:
				setElse((XExpression)null);
				return;
			case XbasePackage.XIF_EXPRESSION__CONDITIONAL_EXPRESSION:
				setConditionalExpression(CONDITIONAL_EXPRESSION_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}",Override the eUnset method for the XIfExpression.
"public JSONObject saveObject(JSONObject object, String objectID, @Nullable RequestOptions requestOptions) throws AlgoliaException {
        try {
            return client.putRequest(""/1/indexes/"" + encodedIndexName + ""/"" + URLEncoder.encode(objectID, ""UTF-8""), /* urlParameters: */ null, object.toString(), requestOptions);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }",Save an object in the index.
"public void addField(String fieldName, SortDirection sortDirection) {
        if (sortFields == null) sortFields = new HashMap<>();

        sortFields.put(fieldName, sortDirection);
    }",Add a field to the sort fields map.
"@SuppressWarnings(""unchecked"")
    static <T> Node<T> emptyNode(StreamShape shape) {
        switch (shape) {
            case REFERENCE:    return (Node<T>) EMPTY_NODE;
            case INT_VALUE:    return (Node<T>) EMPTY_INT_NODE;
            case LONG_VALUE:   return (Node<T>) EMPTY_LONG_NODE;
            case DOUBLE_VALUE: return (Node<T>) EMPTY_DOUBLE_NODE;
            default:
                throw new IllegalStateException(""Unknown shape "" + shape);
        }
    }",Returns an empty node of the specified shape.
"public static URL getResourceUrl(FacesContext ctx, String path) throws MalformedURLException
    {
        final ExternalContext externalContext = ctx.getExternalContext();
        URL url = externalContext.getResource(path);
        if (log.isLoggable(Level.FINE))
        {
            log.fine(""Resource-Url from external context: "" + url);
        }
        if (url == null)
        {
            // This might happen on Servlet container which doesnot return
            // anything
            // for getResource() (like weblogic 8.1 for packaged wars) we
            // are trying
            // to use an own URL protocol in order to use
            // ServletContext.getResourceAsStream()
            // when opening the url
            if (resourceExist(externalContext, path))
            {
                url = getUrlForResourceAsStream(externalContext, path);
            }
        }
        return url;
    }",Get the URL of a resource from the ExternalContext.
"public static IAtomContainer removeNonChiralHydrogens(IAtomContainer org) {

        Map<IAtom, IAtom> map = new HashMap<IAtom, IAtom>(); // maps original atoms to clones.
        List<IAtom> remove = new ArrayList<IAtom>(); // lists removed Hs.

        // Clone atoms except those to be removed.
        IAtomContainer cpy = org.getBuilder().newInstance(IAtomContainer.class);
        int count = org.getAtomCount();

        for (int i = 0; i < count; i++) {

            // Clone/remove this atom?
            IAtom atom = org.getAtom(i);
            boolean addToRemove = false;
            if (suppressibleHydrogen(org, atom)) {
                // test whether connected to a single hetero atom only, otherwise keep
                if (org.getConnectedAtomsList(atom).size() == 1) {
                    IAtom neighbour = org.getConnectedAtomsList(atom).get(0);
                    // keep if the neighbouring hetero atom has stereo information, otherwise continue checking
                    Integer stereoParity = neighbour.getStereoParity();
                    if (stereoParity == null || stereoParity == 0) {
                        addToRemove = true;
                        // keep if any of the bonds of the hetero atom have stereo information
                        for (IBond bond : org.getConnectedBondsList(neighbour)) {
                            IBond.Stereo bondStereo = bond.getStereo();
                            if (bondStereo != null && bondStereo != IBond.Stereo.NONE) addToRemove = false;
                            IAtom neighboursNeighbour = bond.getOther(neighbour);
                            // remove in any case if the hetero atom is connected to more than one hydrogen
                            if (neighboursNeighbour.getSymbol().equals(""H"") && !neighboursNeighbour.equals(atom)) {
                                addToRemove = true;
                                break;
                            }
                        }
                    }
                }
            }

            if (addToRemove)
                remove.add(atom);
            else
                addClone(atom, cpy, map);
        }

        // rescue any false positives, i.e., hydrogens that are stereo-relevant
        // the use of IStereoElement is not fully integrated yet to describe stereo information
        for (IStereoElement stereoElement : org.stereoElements()) {
            if (stereoElement instanceof ITetrahedralChirality) {
                ITetrahedralChirality tetChirality = (ITetrahedralChirality) stereoElement;
                for (IAtom atom : tetChirality.getLigands()) {
                    if (atom.getSymbol().equals(""H"") && remove.contains(atom)) {
                        remove.remove(atom);
                        addClone(atom, cpy, map);
                    }
                }
            } else if (stereoElement instanceof IDoubleBondStereochemistry) {
                IDoubleBondStereochemistry dbs = (IDoubleBondStereochemistry) stereoElement;
                IBond stereoBond = dbs.getStereoBond();
                for (IAtom neighbor : org.getConnectedAtomsList(stereoBond.getBegin())) {
                    if (remove.remove(neighbor)) addClone(neighbor, cpy, map);
                }
                for (IAtom neighbor : org.getConnectedAtomsList(stereoBond.getEnd())) {
                    if (remove.remove(neighbor)) addClone(neighbor, cpy, map);
                }
            }
        }

        // Clone bonds except those involving removed atoms.
        count = org.getBondCount();
        for (int i = 0; i < count; i++) {
            // Check bond.
            final IBond bond = org.getBond(i);
            boolean removedBond = false;
            final int length = bond.getAtomCount();
            for (int k = 0; k < length; k++) {
                if (remove.contains(bond.getAtom(k))) {
                    removedBond = true;
                    break;
                }
            }

            // Clone/remove this bond?
            if (!removedBond) {
                IBond clone = null;
                try {
                    clone = (IBond) org.getBond(i).clone();
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                }
                assert clone != null;
                clone.setAtoms(new IAtom[]{map.get(bond.getBegin()), map.get(bond.getEnd())});
                cpy.addBond(clone);
            }
        }

        // Recompute hydrogen counts of neighbours of removed Hydrogens.
        for (IAtom aRemove : remove) {
            // Process neighbours.
            for (IAtom iAtom : org.getConnectedAtomsList(aRemove)) {
                final IAtom neighb = map.get(iAtom);
                if (neighb == null) continue; // since for the case of H2, neight H has a heavy atom neighbor
                neighb.setImplicitHydrogenCount((neighb.getImplicitHydrogenCount() == null ? 0 : neighb
                        .getImplicitHydrogenCount()) + 1);
            }
        }
        for (IAtom atom : cpy.atoms()) {
            if (atom.getImplicitHydrogenCount() == null) atom.setImplicitHydrogenCount(0);
        }
        cpy.addProperties(org.getProperties());
        cpy.setFlags(org.getFlags());

        return (cpy);
    }",Removes all non - chiral hydrogens from an atom container.
"private synchronized void initResourceType(
        I_CmsResourceType resourceType,
        CmsResourceManagerConfiguration configuration) {

        // add the loader to the internal list of loaders
        configuration.addResourceType(resourceType);
        if (CmsLog.INIT.isInfoEnabled()) {
            CmsLog.INIT.info(
                Messages.get().getBundle().key(
                    Messages.INIT_ADD_RESTYPE_3,
                    resourceType.getTypeName(),
                    new Integer(resourceType.getTypeId()),
                    resourceType.getClass().getName()));
        }

        // add the mappings
        List<String> mappings = resourceType.getConfiguredMappings();
        Iterator<String> i = mappings.iterator();
        while (i.hasNext()) {
            String mapping = i.next();
            // only add this mapping if a mapping with this file extension does not
            // exist already
            if (!configuration.m_extensionMappings.containsKey(mapping)) {
                configuration.m_extensionMappings.put(mapping, resourceType.getTypeName());
                if (CmsLog.INIT.isInfoEnabled()) {
                    CmsLog.INIT.info(
                        Messages.get().getBundle().key(
                            Messages.INIT_MAP_RESTYPE_2,
                            mapping,
                            resourceType.getTypeName()));
                }
            }
        }
    }",Initialize the resource type.
"@Override
    public GetRelationalDatabaseSnapshotResult getRelationalDatabaseSnapshot(GetRelationalDatabaseSnapshotRequest request) {
        request = beforeClientExecution(request);
        return executeGetRelationalDatabaseSnapshot(request);
    }",Retrieves a database snapshot.
"@Override
    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
        int len = 0;

        if ((callbacks == null) || ((len = callbacks.length) == 0)) {
            return;
        }

        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
            StringBuffer sb = new StringBuffer();
            sb.append(""{ "");
            for (int i = 0; i < len; i++) {
                sb.append(callbacks[i].getClass().getName());
                if (i < (len - 1)) {
                    sb.append("", "");
                }
            }
            sb.append("" }"");
            Tr.debug(tc, ""handle(callbacks = \"""" + sb.toString() + ""\"")"");
        }

        for (int i = 0; i < len; i++) {
            Callback c = callbacks[i];

            if (c instanceof javax.security.auth.callback.NameCallback) {
                ((javax.security.auth.callback.NameCallback) c).setName(userName);
            } else if (c instanceof javax.security.auth.callback.PasswordCallback) {
                ((javax.security.auth.callback.PasswordCallback) c).setPassword((password == null) ? null : password.toCharArray());
            } else if (c instanceof WSCredTokenCallbackImpl) {
                ((WSCredTokenCallbackImpl) c).setCredToken(credToken);
            } else if (c instanceof WSRealmNameCallbackImpl) {
                ((WSRealmNameCallbackImpl) c).setRealmName(realm);
            } else if (c instanceof WSAppContextCallback) {
                ((WSAppContextCallback) c).setContext(appContext);
            } else {
                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {
                    Tr.debug(tc, ""Un-use handle(callbacks = \"""" + callbacks[i].getClass().getName() + ""\"")"");
                }
            }
        }
    }",Override handle method to override the handle method in the class path.
"public void callService(String url, String templateName, Object model, XmlHttpResponse result, Map<String, Object> headers) {
        doHttpPost(url, templateName, model, result, headers, XmlHttpResponse.CONTENT_TYPE_XML_TEXT_UTF8);
        setContext(result);
    }",Call a service.
"public void encode(AsnOutputStream aos) throws EncodeException {

        if (invokeId == null)
            throw new EncodeException(""No Invoke ID set."");

        try {
            aos.writeTag(Tag.CLASS_CONTEXT_SPECIFIC, false, _TAG);
            int pos = aos.StartContentDefiniteLength();

            aos.writeInteger(this.invokeId);

            if (this.operationCode != null && this.parameter != null) {
                aos.writeTag(Tag.CLASS_UNIVERSAL, false, Tag.SEQUENCE);
                int pos2 = aos.StartContentDefiniteLength();
                this.operationCode.encode(aos);
                this.parameter.encode(aos);
                aos.FinalizeContent(pos2);
            }

            aos.FinalizeContent(pos);

        } catch (IOException e) {
            throw new EncodeException(""IOException while encoding ReturnResult: "" + e.getMessage(), e);
        } catch (AsnException e) {
            throw new EncodeException(""AsnException while encoding ReturnResult: "" + e.getMessage(), e);
        }
    }",Encode the result of a Sequence.
"protected Map<FaxActionType,String> initializeFaxActionType2ResourceMap()
    {
        //get resources
        Map<FaxActionType,String> map=new HashMap<FaxActionType,String>();
        FaxActionType[] faxActionTypes=new FaxActionType[]{FaxActionType.SUBMIT_FAX_JOB,
                                                           FaxActionType.SUSPEND_FAX_JOB,
                                                           FaxActionType.RESUME_FAX_JOB,
                                                           FaxActionType.CANCEL_FAX_JOB,
                                                           FaxActionType.GET_FAX_JOB_STATUS};
        Enum<?>[] keys=new Enum<?>[]{FaxClientSpiConfigurationConstants.SUBMIT_HTTP_RESOURCE_PROPERTY_KEY,
                                     FaxClientSpiConfigurationConstants.SUSPEND_HTTP_RESOURCE_PROPERTY_KEY,
                                     FaxClientSpiConfigurationConstants.RESUME_HTTP_RESOURCE_PROPERTY_KEY,
                                     FaxClientSpiConfigurationConstants.CANCEL_HTTP_RESOURCE_PROPERTY_KEY,
                                     FaxClientSpiConfigurationConstants.GET_STATUS_HTTP_RESOURCE_PROPERTY_KEY};
        String resource=null;
        for(int index=0;index<faxActionTypes.length;index++)
        {
            //get next resource
            resource=this.getConfigurationValue(keys[index]);
            if(resource!=null)
            {
                map.put(faxActionTypes[index],resource);
            }
        }
        
        return map;
    }",This function initializes the fax action type 2 resource map.
"public synchronized void seek(long position) throws IOException {
    if (position < 0 || position >= count) {
      throw new IOException(""cannot seek position "" + position + "" as it is out of bounds"");
    }
    pos = (int) position;
  }",Seek to the specified position.
"@Override
	public EClass getIfcInventory() {
		if (ifcInventoryEClass == null) {
			ifcInventoryEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI).getEClassifiers()
					.get(327);
		}
		return ifcInventoryEClass;
	}",Get the IfcInventoryEClass from the IFF4Package.
"public static <P> DirectMetaProperty<P> ofReadOnlyBuildable(
            MetaBean metaBean, String propertyName, Class<?> declaringType, Class<P> propertyType) {
        Field field = findField(metaBean, propertyName);
        return new DirectMetaProperty<>(metaBean, propertyName, declaringType, propertyType, PropertyStyle.READ_ONLY_BUILDABLE, field);
    }",Creates a read - only buildable meta - property.
"public static <D extends Comparable> DateTimeExpression<D> addMinutes(DateTimeExpression<D> date, int minutes) {
        return Expressions.dateTimeOperation(date.getType(), Ops.DateTimeOps.ADD_MINUTES, date, ConstantImpl.create(minutes));
    }",Create a new date time expression that is added to the given minutes.
"public Result json() {
        setContentType(MimeTypes.JSON);
        charset = Charsets.UTF_8;
        // If we already have a String content, we must set the type.
        // The renderable object checks whether or not the given String is a valid JSON string,
        // or if a transformation is required.
        if (getRenderable() instanceof RenderableString) {
            ((RenderableString) getRenderable()).setType(MimeTypes.JSON);
        }
        return this;
    }",Sets the content type and charset to JSON.
"Node<E> back() {
            Node<E> f = predecessor();
            return (f == null || f.isSpecial()) ? null : f;
        }",Get the back predecessor.
"public Term term(DecoratedKey partitionKey) {
        String serializedKey = ByteBufferUtils.toString(partitionKey.getKey());
        return new Term(FIELD_NAME, serializedKey);
    }",Create a term from a key
"public static base_responses delete(nitro_service client, String ciphergroupname[]) throws Exception {
		base_responses result = null;
		if (ciphergroupname != null && ciphergroupname.length > 0) {
			sslcipher deleteresources[] = new sslcipher[ciphergroupname.length];
			for (int i=0;i<ciphergroupname.length;i++){
				deleteresources[i] = new sslcipher();
				deleteresources[i].ciphergroupname = ciphergroupname[i];
			}
			result = delete_bulk_request(client, deleteresources);
		}
		return result;
	}",Use this API to delete sslcipher resources of given names.
"@CanIgnoreReturnValue
  public final double getAndAdd(int i, double delta) {
    while (true) {
      long current = longs.get(i);
      double currentVal = longBitsToDouble(current);
      double nextVal = currentVal + delta;
      long next = doubleToRawLongBits(nextVal);
      if (longs.compareAndSet(i, current, next)) {
        return currentVal;
      }
    }
  }",Gets the value of the entry at the given index and adds the given delta to the value of the entry at the given index.
